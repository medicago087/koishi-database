/// <reference types="koa" />
/// <reference types="ws" />
/// <reference types="node" />
import { RegisterMeta, SatoriRegistrar } from 'satori-decorators';
import { Context, I18n, Next, Session, Component } from 'koishi';
import { CommandConfigExtended, CommandPut, CommandPutPre, CommandReturnType, CommandTransformer } from './def';
type PutMeta = RegisterMeta<CommandPut, {
    pre?: RegisterMeta<CommandPutPre>;
}>;
declare module 'satori-decorators' {
    namespace Registrar {
        interface MetadataMap {
            KoishiCommandPutObject: PutMeta;
        }
        interface MetadataArrayMap {
            KoishiCommandTransformer: RegisterMeta<CommandTransformer>;
            KoishiCommandPut: PutMeta;
            KoishiCommandPutObjectKeys: string;
        }
    }
}
export declare class KoishiRegistrar extends SatoriRegistrar<Context> {
    decorateCommandTransformer<A extends any[]>(transformer: CommandTransformer<A>): (...args: A) => ClassDecorator & MethodDecorator;
    decorateCommandPut<A extends any[]>(put: CommandPut<A>, pre?: CommandPutPre<A>): (...args: A) => ParameterDecorator & PropertyDecorator;
    methodDecorators(): {
        UseMiddleware: (prepend?: boolean) => import("satori-decorators").TypedMethodDecorator<(session: Session, next: Next) => CommandReturnType>;
        UseBeforeEvent: (event: "send" | "attach-channel" | "attach-user" | "attach" | "internal/service" | "internal/update" | "parse" | "command/execute" | "command/attach-channel" | "command/attach-user", append?: boolean) => import("satori-decorators").TypedMethodDecorator<((this: Session<never, never>, session: Session<never, never>, args_0: import("koishi").SendOptions) => boolean | void | Promise<boolean | void>) | ((session: Session<never, never>, fields: Set<keyof import("koishi").Channel>) => void) | ((session: Session<never, never>, fields: Set<keyof import("koishi").User>) => void) | ((session: Session<never, never>) => void) | ((name: string, value: any) => void) | ((fork: import("cordis").ForkScope<import("cordis").Context.Parameterized<Context, any>>, config: any) => void) | ((content: string, session: Session<never, never>) => import("koishi").Argv<never, never, any[], {}>) | ((argv: import("koishi").Argv<never, never, any[], {}>) => string | void | Promise<string | void>) | ((argv: import("koishi").Argv<never, never, any[], {}>, fields: Set<keyof import("koishi").Channel>) => void) | ((argv: import("koishi").Argv<never, never, any[], {}>, fields: Set<keyof import("koishi").User>) => void)>;
        UseCommand: (...args: [string, CommandConfigExtended?] | [string, string, CommandConfigExtended?]) => import("satori-decorators").TypedMethodDecorator<(...args: any[]) => CommandReturnType>;
        UsePreset: (name: string) => import("satori-decorators").TypedMethodDecorator<I18n.Renderer>;
        UseInterval: (interval: number) => import("satori-decorators").TypedMethodDecorator<(...args: any[]) => any>;
        UseComponent: (name: string, options?: Component.Options) => import("satori-decorators").TypedMethodDecorator<Component>;
        RouterMethod: (method: "options" | "delete" | "get" | "post" | "put" | "patch" | "head" | "all", path: string) => import("satori-decorators").TypedMethodDecorator<(ctx: import("satori-decorators").KoaContext, Next: import("koa").Next) => Promise<any>>;
        Ws: (path: string) => import("satori-decorators").TypedMethodDecorator<(socket: import("ws"), request: import("http").IncomingMessage) => any>;
        UseEvent: (event: keyof import("koishi").Events<Context>, prepend?: boolean) => import("satori-decorators").TypedMethodDecorator<(...args: any[]) => any>;
        UsePlugin: () => import("satori-decorators").TypedMethodDecorator<(...args: any[]) => import("satori-decorators").PluginRegistrar.PluginDefinition<Context, any> | Promise<import("satori-decorators").PluginRegistrar.PluginDefinition<Context, any>>>;
        Apply: () => import("satori-decorators").TypedMethodDecorator<(...args: any[]) => any>;
    };
}
export declare const koishiRegistrar: KoishiRegistrar;
export declare const StarterPlugin: <C>(config?: import("satori-decorators").ClassType<C>) => new (ctx: Context, config: import("satori-decorators").PartialDeep<C>) => {
    ctx: Context;
    config: C;
};
export {};
