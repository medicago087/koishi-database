"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyOptionToCommand = exports.registerTemplate = exports.adaptLocaleDict = void 0;
const native_type_mapping_1 = require("./native-type-mapping");
function adaptLocaleDict(value) {
    if (typeof value === 'string') {
        return {
            '': value,
        };
    }
    return value;
}
exports.adaptLocaleDict = adaptLocaleDict;
const registerTemplate = (templateConfig, ctx, command) => {
    const key = (command ? `commands.${command.name}.messages.` : '') + templateConfig.name;
    for (const [locale, text] of Object.entries(templateConfig.text)) {
        ctx.i18n.define(locale, key, text);
    }
};
exports.registerTemplate = registerTemplate;
function applyOptionToCommand(ctx, cmd, def, 
// eslint-disable-next-line @typescript-eslint/ban-types
nativeType) {
    const { name, config } = def;
    const { desc } = def;
    if (config?.description) {
        const desc = adaptLocaleDict(config.description);
        for (const [locale, text] of Object.entries(desc)) {
            ctx.i18n.define(locale, `commands.${cmd.name}.options.${name}`, text);
        }
    }
    const clonedConfig = { ...(config || {}) };
    delete clonedConfig.description;
    cmd = cmd.option(name, desc, clonedConfig);
    const option = cmd._options[name];
    (0, native_type_mapping_1.applyNativeTypeToArg)(option, nativeType);
    return cmd;
}
exports.applyOptionToCommand = applyOptionToCommand;
//# sourceMappingURL=utility.js.map