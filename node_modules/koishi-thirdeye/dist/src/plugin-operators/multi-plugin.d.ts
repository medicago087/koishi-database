import { BasePlugin, ClassType, PluginRegistrar, TypeFromClass } from 'cordis-decorators';
import PluginClass = PluginRegistrar.PluginClass;
import { Context } from 'koishi';
import ClassPluginConfig = PluginRegistrar.ClassPluginConfig;
import { WithSelection } from './mapping-base';
export interface Instances<T> {
    instances: T[];
}
export declare function ToInstancesConfig<Inner extends new (...args: any[]) => any>(instanceConfig: Inner): new () => Instances<TypeFromClass<Inner>>;
export declare class MultiInstancePluginFramework<Ctx extends Context, InnerPlugin extends PluginClass<Ctx>> extends BasePlugin<Ctx, Instances<ClassPluginConfig<InnerPlugin>>, Instances<ClassPluginConfig<InnerPlugin> & WithSelection>> {
    instances: TypeFromClass<InnerPlugin>[];
    _getInnerPlugin(): InnerPlugin;
    _registerInstances(): void;
    _onThingsDispose(): void;
}
export declare function MultiInstancePlugin<Ctx extends Context, InnerPlugin extends PluginClass<Ctx>, OuterConfig>(innerPlugin: InnerPlugin, outerConfig?: ClassType<OuterConfig>): new (ctx: import("cordis").Context<any>, config: import("cordis-decorators").PartialDeep<OuterConfig> & Instances<PluginRegistrar.ClassPluginConfig<InnerPlugin> & WithSelection>) => {
    _getInnerPlugin(): InnerPlugin;
    instances: TypeFromClass<InnerPlugin>[];
    _registerInstances(): void;
    _onThingsDispose(): void;
    ctx: Ctx;
    config: Instances<PluginRegistrar.ClassPluginConfig<InnerPlugin>>;
} & {
    config: Instances<PluginRegistrar.ClassPluginConfig<InnerPlugin>> & OuterConfig;
};
