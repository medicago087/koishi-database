import { BasePlugin, PartialDeep, PluginRegistrar } from 'cordis-decorators';
import { Selection } from '../utility/select-context';
import PluginClass = PluginRegistrar.PluginClass;
import { Context, Dict } from 'koishi';
import ClassPluginConfig = PluginRegistrar.ClassPluginConfig;
export interface WithSelection {
    $filter?: Selection;
}
export type MapPluginToConfig<Ctx extends Context, M extends Dict<PluginClass<Ctx>>> = {
    [K in keyof M]: ClassPluginConfig<M[K]>;
};
export type MapPluginToConfigWithSelection<Ctx extends Context, M extends Dict<PluginClass<Ctx>>> = {
    [K in keyof M]: ClassPluginConfig<M[K]> & WithSelection;
};
export declare class MappingPluginBase<Ctx extends Context, M extends Dict<PluginClass<Ctx>>, C, PC = PartialDeep<C>> extends BasePlugin<Ctx, C, PC> {
    _getDict(): M;
    _instanceMap: Map<string, PluginRegistrar.PluginClass<Ctx, any, any>>;
    getInstance<K extends keyof M>(key: K): M[K];
    _getPluginConfig(key: keyof M): any;
    _registerInstances(): void;
    _onThingsDispose(): void;
}
