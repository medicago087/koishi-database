"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiInstancePlugin = exports.MultiInstancePluginFramework = exports.ToInstancesConfig = void 0;
const cordis_decorators_1 = require("cordis-decorators");
const select_context_1 = require("../utility/select-context");
const clone_plugin_1 = require("../utility/clone-plugin");
const registrar_1 = require("../registrar");
const koishi_1 = require("koishi");
const decorators_1 = require("cordis-decorators/dist/src/decorators");
function ToInstancesConfig(instanceConfig) {
    const instanceConfigClass = class InstancesConfig {
    };
    (0, cordis_decorators_1.SchemaProperty)({
        type: (0, cordis_decorators_1.SchemaClass)(instanceConfig),
        default: [],
        array: true,
    })(instanceConfigClass.prototype, 'instances');
    return instanceConfigClass;
}
exports.ToInstancesConfig = ToInstancesConfig;
class MultiInstancePluginFramework extends cordis_decorators_1.BasePlugin {
    constructor() {
        super(...arguments);
        this.instances = [];
    }
    _getInnerPlugin() {
        throw new Error(`Not implemented`);
    }
    _registerInstances() {
        const innerPlugin = this._getInnerPlugin();
        for (let i = 0; i < this.config.instances.length; i++) {
            const clonedInnerPlugin = (0, clone_plugin_1.ClonePlugin)(innerPlugin, `${this.constructor.name}_${innerPlugin.name}_instance_${i}`, (instance) => this.instances.push(instance));
            const instanceConfig = this.config.instances[i];
            const instanceContext = instanceConfig['$filter']
                ? (0, select_context_1.selectContext)(this.ctx, instanceConfig['$filter'])
                : this.ctx;
            instanceContext.plugin(clonedInnerPlugin, instanceConfig);
        }
    }
    _onThingsDispose() {
        delete this.instances;
    }
}
__decorate([
    (0, decorators_1.Apply)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MultiInstancePluginFramework.prototype, "_registerInstances", null);
__decorate([
    (registrar_1.koishiRegistrar.methodDecorators().UseEvent('dispose')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MultiInstancePluginFramework.prototype, "_onThingsDispose", null);
exports.MultiInstancePluginFramework = MultiInstancePluginFramework;
function MultiInstancePlugin(innerPlugin, outerConfig) {
    const basePlugin = class SpecificMultiInstancePlugin extends MultiInstancePluginFramework {
        _getInnerPlugin() {
            return innerPlugin;
        }
    };
    const schema = ToInstancesConfig((innerPlugin['Config'] ||
        innerPlugin['schema'] ||
        koishi_1.Schema.any()));
    const factory = (0, cordis_decorators_1.CreatePluginFactory)(basePlugin, schema);
    const plugin = factory(outerConfig);
    if (innerPlugin['using']) {
        (0, decorators_1.UsingService)(...innerPlugin['using'])(plugin);
    }
    return plugin;
}
exports.MultiInstancePlugin = MultiInstancePlugin;
//# sourceMappingURL=multi-plugin.js.map