"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MappingPluginBase = void 0;
const cordis_decorators_1 = require("cordis-decorators");
const select_context_1 = require("../utility/select-context");
const registrar_1 = require("../registrar");
const clone_plugin_1 = require("../utility/clone-plugin");
const decorators_1 = require("cordis-decorators/dist/src/decorators");
class MappingPluginBase extends cordis_decorators_1.BasePlugin {
    constructor() {
        super(...arguments);
        this._instanceMap = new Map();
    }
    _getDict() {
        throw new Error('not implemented');
    }
    getInstance(key) {
        return this._instanceMap?.get(key);
    }
    _getPluginConfig(key) {
        return {};
    }
    _registerInstances() {
        const dict = this._getDict();
        for (const [key, plugin] of Object.entries(dict)) {
            const config = this._getPluginConfig(key);
            if (config == null)
                continue;
            const ctx = config['$filter']
                ? (0, select_context_1.selectContext)(this.ctx, config.$filter)
                : this.ctx;
            const clonedPlugin = (0, clone_plugin_1.ClonePlugin)(plugin, `${this.constructor.name}_${plugin.name}_dict_${key}`, (o) => this._instanceMap.set(key, o));
            ctx.plugin(clonedPlugin, config);
        }
    }
    _onThingsDispose() {
        delete this._instanceMap;
    }
}
__decorate([
    (0, decorators_1.Apply)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MappingPluginBase.prototype, "_registerInstances", null);
__decorate([
    (registrar_1.koishiRegistrar.methodDecorators().UseEvent('dispose')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MappingPluginBase.prototype, "_onThingsDispose", null);
exports.MappingPluginBase = MappingPluginBase;
//# sourceMappingURL=mapping-base.js.map