"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PutObject = exports.PutTemplate = exports.PutCommonRenderer = exports.PutRenderer = exports.PutNext = exports.PutSelfId = exports.PutBot = exports.PutGuildId = exports.PutGuildName = exports.PutChannelId = exports.PutChannelName = exports.PutUserId = exports.PutUserName = exports.PutGuild = exports.PutChannel = exports.PutUser = exports.PutOption = exports.PutArgs = exports.PutArg = exports.PutCommand = exports.PutContext = exports.PutSession = exports.PutArgv = exports.PutValue = exports.CommandTemplate = exports.CommandAction = exports.CommandBefore = exports.CommandChannelFields = exports.CommandUserFields = exports.CommandOption = exports.CommandExample = exports.CommandUsage = exports.CommandShortcut = exports.CommandAlias = exports.CommandDescription = exports.CommandLocale = exports.UseCommand = exports.UseComponent = exports.UseInterval = exports.UsePreset = exports.UseMiddleware = exports.UseBeforeEvent = exports.UseEvent = void 0;
const registrar_1 = require("../registrar");
const utility_1 = require("../utility/utility");
const native_type_mapping_1 = require("../utility/native-type-mapping");
__exportStar(require("satori-decorators/dist/src/decorators/common"), exports);
const methodDecorators = registrar_1.koishiRegistrar.methodDecorators();
exports.UseEvent = methodDecorators.UseEvent, exports.UseBeforeEvent = methodDecorators.UseBeforeEvent, exports.UseMiddleware = methodDecorators.UseMiddleware, exports.UsePreset = methodDecorators.UsePreset, exports.UseInterval = methodDecorators.UseInterval, exports.UseComponent = methodDecorators.UseComponent;
function UseCommand(...args) {
    return methodDecorators.UseCommand(...args);
}
exports.UseCommand = UseCommand;
exports.CommandLocale = registrar_1.koishiRegistrar.decorateCommandTransformer((ctx, cmd, locale, def) => {
    ctx.i18n.define(locale, `commands.${cmd.name}`, def);
    return cmd;
});
exports.CommandDescription = registrar_1.koishiRegistrar.decorateCommandTransformer((ctx, cmd, desc) => {
    for (const localData of Object.entries((0, utility_1.adaptLocaleDict)(desc))) {
        const [locale, text] = localData;
        ctx.i18n.define(locale, `commands.${cmd.name}.description`, text);
    }
    return cmd;
});
exports.CommandAlias = registrar_1.koishiRegistrar.decorateCommandTransformer((ctx, cmd, ...names) => cmd.alias(...names));
exports.CommandShortcut = registrar_1.koishiRegistrar.decorateCommandTransformer((ctx, cmd, pattern, config) => 
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
cmd.shortcut(pattern, config));
exports.CommandUsage = registrar_1.koishiRegistrar.decorateCommandTransformer((ctx, cmd, text) => cmd.usage(text));
exports.CommandExample = registrar_1.koishiRegistrar.decorateCommandTransformer((ctx, cmd, text) => cmd.example(text));
exports.CommandOption = registrar_1.koishiRegistrar.decorateCommandTransformer((ctx, cmd, name, desc, config = {}) => (0, utility_1.applyOptionToCommand)(ctx, cmd, { name, desc, config }));
exports.CommandUserFields = registrar_1.koishiRegistrar.decorateCommandTransformer((ctx, cmd, fields) => cmd.userFields(fields));
exports.CommandChannelFields = registrar_1.koishiRegistrar.decorateCommandTransformer((ctx, cmd, fields) => cmd.channelFields(fields));
exports.CommandBefore = registrar_1.koishiRegistrar.decorateCommandTransformer((ctx, cmd, callback, append = false) => cmd.before(callback, append));
exports.CommandAction = registrar_1.koishiRegistrar.decorateCommandTransformer((ctx, cmd, callback, prepend = false) => cmd.action(callback, prepend));
exports.CommandTemplate = registrar_1.koishiRegistrar.decorateCommandTransformer((ctx, cmd, name, text) => {
    (0, utility_1.registerTemplate)({ name, text: (0, utility_1.adaptLocaleDict)(text) }, ctx, cmd);
    return cmd;
});
exports.PutValue = registrar_1.koishiRegistrar.decorateCommandPut((data, v) => v);
exports.PutArgv = registrar_1.koishiRegistrar.decorateCommandPut((data, field) => (field ? data.argv[field] : data.argv));
exports.PutSession = registrar_1.koishiRegistrar.decorateCommandPut((data, field) => field ? data.argv.session[field] : data.argv.session);
exports.PutContext = registrar_1.koishiRegistrar.decorateCommandPut((data) => data.ctx);
exports.PutCommand = registrar_1.koishiRegistrar.decorateCommandPut((data) => data.command);
exports.PutArg = registrar_1.koishiRegistrar.decorateCommandPut((data, index, decl) => data.args[index], (data, index, decl) => {
    const cmd = data.command;
    let arg = cmd._arguments[index];
    if (!arg) {
        arg = {};
        cmd._arguments[index] = arg;
    }
    (0, native_type_mapping_1.applyNativeTypeToArg)(arg, data.nativeType);
    if (decl) {
        Object.assign(arg, decl);
    }
});
exports.PutArgs = registrar_1.koishiRegistrar.decorateCommandPut((data) => data.args);
exports.PutOption = registrar_1.koishiRegistrar.decorateCommandPut((data, name, desc, config) => data.argv.options[name], (data, name, desc, config) => (0, utility_1.applyOptionToCommand)(data.ctx, data.command, {
    name,
    desc,
    config: config || {},
}, data.nativeType));
exports.PutUser = registrar_1.koishiRegistrar.decorateCommandPut((data, field) => data.argv.session.user, (data, field) => data.command.userFields(field));
exports.PutChannel = registrar_1.koishiRegistrar.decorateCommandPut((data, field) => data.argv.session.channel, (data, field) => data.command.channelFields(field));
exports.PutGuild = registrar_1.koishiRegistrar.decorateCommandPut((data, field) => data.argv.session.guild, (data, field) => data.command.channelFields(field));
exports.PutUserName = registrar_1.koishiRegistrar.decorateCommandPut((data, useDatabase) => {
    const { argv } = data;
    if (useDatabase !== false) {
        const user = argv.session.user;
        if (user?.name) {
            return user?.name;
        }
    }
    return (argv.session.author?.nickname ||
        argv.session.author?.username ||
        argv.session.userId);
}, (data, useDatabase) => {
    if (useDatabase !== false) {
        data.command.userFields(['name']);
    }
});
exports.PutUserId = registrar_1.koishiRegistrar.decorateCommandPut((data) => data.argv.session.userId);
exports.PutChannelName = registrar_1.koishiRegistrar.decorateCommandPut((data) => data.argv.session.channelName);
exports.PutChannelId = registrar_1.koishiRegistrar.decorateCommandPut((data) => data.argv.session.channelId);
exports.PutGuildName = registrar_1.koishiRegistrar.decorateCommandPut((data) => data.argv.session.guildName);
exports.PutGuildId = registrar_1.koishiRegistrar.decorateCommandPut((data) => data.argv.session.guildId);
exports.PutBot = registrar_1.koishiRegistrar.decorateCommandPut((data) => data.argv.session.bot);
exports.PutSelfId = registrar_1.koishiRegistrar.decorateCommandPut((data) => data.argv.session.selfId);
exports.PutNext = registrar_1.koishiRegistrar.decorateCommandPut((data) => data.argv.next);
exports.PutRenderer = registrar_1.koishiRegistrar.decorateCommandPut((data, path) => path
    ? // eslint-disable-next-line @typescript-eslint/ban-types
        (params) => data.argv.session.text(path, params)
    : // eslint-disable-next-line @typescript-eslint/ban-types
        (path, params) => data.argv.session.text(path, params));
exports.PutCommonRenderer = exports.PutRenderer;
exports.PutTemplate = registrar_1.koishiRegistrar.decorateCommandPut(
// eslint-disable-next-line @typescript-eslint/ban-types
(data, name, text) => (params) => data.argv.session.text(`.${name}`, params), (data, name, text) => (0, utility_1.registerTemplate)({
    name,
    text: (0, utility_1.adaptLocaleDict)(text),
}, data.ctx, data.command));
exports.PutObject = registrar_1.koishiRegistrar.decorateCommandPut((data) => {
    const targetClass = data.nativeType;
    if (!targetClass) {
        return;
    }
    const instance = new targetClass();
    const keys = registrar_1.koishiRegistrar.reflector.getArray('KoishiCommandPutObjectKeys', instance);
    for (const key of keys) {
        const meta = registrar_1.koishiRegistrar.reflector.get('KoishiCommandPutObject', instance, key);
        if (meta) {
            const propertyNativeType = Reflect.getMetadata('design:type', targetClass.prototype, key);
            instance[key] = meta.run(data.view, {
                ...data,
                nativeType: propertyNativeType,
            });
        }
    }
    return instance;
}, (data) => {
    const targetClass = data.nativeType;
    if (!targetClass) {
        return;
    }
    const keys = registrar_1.koishiRegistrar.reflector.getArray('KoishiCommandPutObjectKeys', targetClass);
    for (const key of keys) {
        const meta = registrar_1.koishiRegistrar.reflector.get('KoishiCommandPutObject', targetClass, key)?.info?.pre;
        if (meta) {
            const propertyNativeType = Reflect.getMetadata('design:type', targetClass.prototype, key);
            meta.run(data.view, {
                ...data,
                nativeType: propertyNativeType,
            });
        }
    }
});
//# sourceMappingURL=common.js.map