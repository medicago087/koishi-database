import { CommandConfigExtended, CommandLocaleDef, CommandOptionConfigWithDescription, CommandReturnType } from '../def';
import { Argv, Command, Dict, FieldCollector, Session, User } from 'koishi';
import { TypedMethodDecorator } from 'satori-decorators';
export * from 'satori-decorators/dist/src/decorators/common';
export declare const UseEvent: (event: keyof import("koishi").Events<import("koishi").Context>, prepend?: boolean) => TypedMethodDecorator<(...args: any[]) => any>, UseBeforeEvent: (event: "attach-channel" | "attach-user" | "attach" | "send" | "internal/service" | "internal/update" | "parse" | "command/execute" | "command/attach-channel" | "command/attach-user", append?: boolean) => TypedMethodDecorator<((session: Session<never, never>, fields: Set<keyof import("koishi").Channel>) => void) | ((session: Session<never, never>, fields: Set<keyof User>) => void) | ((session: Session<never, never>) => void) | Session.EventCallback<boolean | void | Promise<boolean | void>> | ((name: string, value: any) => void) | ((fork: import("cordis").Fork<import("cordis").Context.Parameterized<import("koishi").Context, any>>, config: any) => void) | ((content: string, session: Session<never, never>) => Argv<never, never, any[], {}>) | ((argv: Argv<never, never, any[], {}>) => string | void | Promise<string | void>) | ((argv: Argv<never, never, any[], {}>, fields: Set<keyof import("koishi").Channel>) => void) | ((argv: Argv<never, never, any[], {}>, fields: Set<keyof User>) => void)>, UseMiddleware: (prepend?: boolean) => TypedMethodDecorator<(session: Session<never, never>, next: import("koishi").Next) => string | void | import("@satorijs/element") | (string | import("@satorijs/element"))[] | import("rxjs").Observable<string | void | import("@satorijs/element") | (string | import("@satorijs/element"))[]> | Promise<string | void | import("@satorijs/element") | (string | import("@satorijs/element"))[] | import("rxjs").Observable<string | void | import("@satorijs/element") | (string | import("@satorijs/element"))[]>>>, UsePreset: (name: string) => TypedMethodDecorator<import("koishi").I18n.Renderer>, UseFormatter: (name: string) => TypedMethodDecorator<import("koishi").I18n.Formatter>, UseInterval: (interval: number) => TypedMethodDecorator<(...args: any[]) => any>;
export declare function UseCommand<D extends string>(def: D, config?: CommandConfigExtended): TypedMethodDecorator<(...args: any[]) => CommandReturnType>;
export declare function UseCommand<D extends string>(def: D, desc: string, config?: CommandConfigExtended): TypedMethodDecorator<(...args: any[]) => CommandReturnType>;
export declare const CommandLocale: (locale: string, def: CommandLocaleDef) => ClassDecorator & MethodDecorator;
export declare const CommandDescription: (desc: string | Dict<string, string>) => ClassDecorator & MethodDecorator;
export declare const CommandAlias: (...args: string[]) => ClassDecorator & MethodDecorator;
export declare const CommandShortcut: (name: string | RegExp, config?: Command.Shortcut) => ClassDecorator & MethodDecorator;
export declare const CommandUsage: (text: Command.Usage<never, never>) => ClassDecorator & MethodDecorator;
export declare const CommandExample: (text: string) => ClassDecorator & MethodDecorator;
export declare const CommandOption: (name: string, desc: string, config?: CommandOptionConfigWithDescription) => ClassDecorator & MethodDecorator;
export declare const CommandUserFields: (fields: FieldCollector<"user", keyof User, any[], {}>) => ClassDecorator & MethodDecorator;
export declare const CommandChannelFields: (fields: FieldCollector<"channel", keyof import("koishi").Channel, any[], {}>) => ClassDecorator & MethodDecorator;
export declare const CommandBefore: (callback: Command.Action<never, never, any[], {}>, append?: any) => ClassDecorator & MethodDecorator;
export declare const CommandAction: (callback: Command.Action<never, never, any[], {}>, prepend?: any) => ClassDecorator & MethodDecorator;
export declare const CommandTemplate: (name: string, text: string | Dict<string, string>) => ClassDecorator & MethodDecorator;
export declare const PutValue: (v: any) => ParameterDecorator & PropertyDecorator;
export declare const PutArgv: (field?: keyof Argv<never, never, any[], {}>) => ParameterDecorator & PropertyDecorator;
export declare const PutSession: (field?: keyof Session<never, never>) => ParameterDecorator & PropertyDecorator;
export declare const PutContext: () => ParameterDecorator & PropertyDecorator;
export declare const PutCommand: () => ParameterDecorator & PropertyDecorator;
export declare const PutArg: (index: number, decl?: Argv.Declaration) => ParameterDecorator & PropertyDecorator;
export declare const PutArgs: () => ParameterDecorator & PropertyDecorator;
export declare const PutOption: (name: string, desc: string, config?: CommandOptionConfigWithDescription) => ParameterDecorator & PropertyDecorator;
export declare const PutUser: (field: FieldCollector<"user", keyof User, any[], {}>) => ParameterDecorator & PropertyDecorator;
export declare const PutChannel: (field: FieldCollector<"channel", keyof import("koishi").Channel, any[], {}>) => ParameterDecorator & PropertyDecorator;
export declare const PutGuild: (field: FieldCollector<"channel", keyof import("koishi").Channel, any[], {}>) => ParameterDecorator & PropertyDecorator;
export declare const PutUserName: (useDatabase?: boolean) => ParameterDecorator & PropertyDecorator;
export declare const PutUserId: () => ParameterDecorator & PropertyDecorator;
export declare const PutChannelName: () => ParameterDecorator & PropertyDecorator;
export declare const PutChannelId: () => ParameterDecorator & PropertyDecorator;
export declare const PutGuildName: () => ParameterDecorator & PropertyDecorator;
export declare const PutGuildId: () => ParameterDecorator & PropertyDecorator;
export declare const PutBot: () => ParameterDecorator & PropertyDecorator;
export declare const PutSelfId: () => ParameterDecorator & PropertyDecorator;
export declare const PutNext: () => ParameterDecorator & PropertyDecorator;
export declare const PutRenderer: (path?: string) => ParameterDecorator & PropertyDecorator;
export declare const PutCommonRenderer: (path?: string) => ParameterDecorator & PropertyDecorator;
export declare const PutTemplate: (name: string, text: string | Dict<string, string>) => ParameterDecorator & PropertyDecorator;
export declare const PutObject: () => ParameterDecorator & PropertyDecorator;
