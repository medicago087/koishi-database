/// <reference types="node" />
import { Channel, Element, Fragment, SendOptions, Session, User } from 'koishi';
interface Prompt {
    resolver: (value: string) => void;
    timeout: NodeJS.Timeout;
    session: ReplySession;
    callback: (session: ReplySession) => any;
}
declare module 'koishi' {
    interface Context {
        __prompt_resolver__: PromptResolver;
    }
}
export declare class ReplySession<U extends User.Field = never, G extends Channel.Field = never> extends Session<U, G> {
    replyMessages: Element[];
    private midResolver;
    private emitPromise;
    private midPromise;
    process(): Promise<Element[]>;
    waitForPattern(): Promise<Element[]>;
    getIdentifier(): string;
    midResolve(finish?: boolean): void;
    send(content: Fragment, options?: SendOptions): Promise<string[]>;
    gatherReplyMessages(): Element[];
    prompt(...args: any[]): Promise<string>;
}
declare const PromptResolver_base: new (ctx: import("koishi").Context, config: {}) => {
    ctx: import("koishi").Context;
    config: unknown;
};
declare class PromptResolver extends PromptResolver_base {
    prompts: Map<string, Prompt>;
    addPrompt(identifier: string, prompt: Prompt): void;
    private handlePrompt;
    resolvePrompt(identifier: string, session: ReplySession): Promise<Prompt>;
}
export {};
