import { AragamiConfig } from './config';
import { LifecycleEvents, PartialDeep } from 'koishi-thirdeye';
import { Channel, Command, Context, User } from 'koishi';
import { Aragami, AragamiOptions } from 'aragami';
export * from './config';
export * from 'aragami';
declare module 'koishi' {
    interface Context {
        aragami: AragamiPlugin;
    }
}
export default class AragamiPlugin extends Aragami implements LifecycleEvents {
    constructor(ctx: Context, _config: PartialDeep<AragamiConfig> & AragamiOptions);
    onDisconnect(): Promise<void>;
    private commandLock;
    commandUserLock<C extends Command>(cmd: C, fields: (keyof User)[]): C;
    commandChannelLock<C extends Command>(cmd: C, fields: (keyof Channel)[]): C;
    commandGuildLock<C extends Command>(cmd: C, fields: (keyof Channel)[]): C;
}
export declare const UseCache: <T>(cl: import("aragami").ClassType<T>) => import("aragami").TypedMethodDecorator<(...args: any[]) => Promise<T>>, UseLock: () => import("aragami").TypedMethodDecorator<(...args: any[]) => Promise<any>>;
export declare const CommandUserLock: (...args: (keyof User)[]) => ClassDecorator & MethodDecorator;
export declare const CommandChannelLock: (...args: (keyof Channel)[]) => ClassDecorator & MethodDecorator;
export declare const CommandGuildLock: (...args: (keyof Channel)[]) => ClassDecorator & MethodDecorator;
export declare const PutLockingUser: (...args: (keyof User)[]) => ParameterDecorator & PropertyDecorator;
export declare const PutLockingChannel: (...args: (keyof Channel)[]) => ParameterDecorator & PropertyDecorator;
export declare const PutLockingGuild: (...args: (keyof Channel)[]) => ParameterDecorator & PropertyDecorator;
