"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const koishi_1 = require("koishi");
const plugin_console_1 = require("@koishijs/plugin-console");
const path_1 = require("path");
const semver_1 = require("semver");
const which_pm_runs_1 = __importDefault(require("which-pm-runs"));
const scripts = {
    async '4.11.0'(ctx) {
        const installer = ctx.console.dependencies;
        await installer.override({
            '@koishijs/cli': null,
            '@koishijs/plugin-console': '5.0.2',
            'koishi': '4.11.0',
        });
        const args = [];
        const agent = (0, which_pm_runs_1.default)().name || 'npm';
        if (agent !== 'yarn') {
            args.push('install');
        }
        args.push('--registry', installer.registry);
        await installer.exec(agent, args);
        process.exit(0);
    },
};
class Migration extends plugin_console_1.DataService {
    static using = ['console.dependencies'];
    static schema = koishi_1.Schema.object({});
    constructor(ctx) {
        super(ctx, 'migration', { authority: 4 });
        ctx.console.addEntry({
            dev: (0, path_1.resolve)(__dirname, '../client/index.ts'),
            prod: (0, path_1.resolve)(__dirname, '../dist'),
        });
        ctx.console.addListener('migrate', async (target) => {
            return scripts[target](ctx, {});
        });
    }
    async get() {
        const deps = await this.ctx.console.dependencies.get();
        return {
            current: deps.koishi.resolved,
            next: Object.keys(scripts).find(version => (0, semver_1.gt)(version, deps.koishi.resolved)),
        };
    }
}
exports.default = Migration;
