"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const koishi_1 = require("koishi");
const plugin_console_1 = require("@koishijs/plugin-console");
const path_1 = require("path");
const envinfo_1 = require("envinfo");
const which_pm_runs_1 = __importDefault(require("which-pm-runs"));
class EnvInfo extends plugin_console_1.DataService {
    static using = ['console'];
    static schema = koishi_1.Schema.object({});
    task;
    constructor(ctx) {
        super(ctx, 'envinfo', { authority: 4 });
        ctx.console.addEntry({
            dev: (0, path_1.resolve)(__dirname, '../client/index.ts'),
            prod: (0, path_1.resolve)(__dirname, '../dist'),
        });
    }
    async _get() {
        const [[, OS], [, CPU]] = await Promise.all([
            envinfo_1.helpers.getOSInfo(),
            envinfo_1.helpers.getCPUInfo(),
        ]);
        const agent = (0, which_pm_runs_1.default)();
        const system = { OS, CPU };
        const binaries = {
            Node: process.versions.node
        };
        if (agent) {
            if (agent.name === 'yarn') {
                agent.name = 'Yarn';
            }
            binaries[agent.name] = agent.version;
        }
        const koishi = {
            Core: koishi_1.version,
            Console: require('@koishijs/plugin-console/package.json').version,
        };
        if (process.env.KOISHI_AGENT) {
            const [name, version] = process.env.KOISHI_AGENT.split('/');
            koishi[name] = version;
        }
        return { system, binaries, koishi };
    }
    async get() {
        if (!this.task)
            this.task = this._get();
        return this.task;
    }
}
exports.default = EnvInfo;
