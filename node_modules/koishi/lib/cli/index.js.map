{
  "version": 3,
  "sources": ["../../src/cli/start.ts", "../../src/cli/index.ts"],
  "sourcesContent": ["import { Dict, hyphenate, isInteger } from '@koishijs/utils'\nimport { ChildProcess, fork } from 'child_process'\nimport { resolve } from 'path'\nimport { CAC } from 'cac'\nimport type { Config } from '../worker/daemon'\nimport kleur from 'kleur'\n\ntype Event = Event.Start | Event.Env | Event.Heartbeat\n\nnamespace Event {\n  export interface Start {\n    type: 'start'\n    body: Config\n  }\n\n  export interface Env {\n    type: 'shared'\n    body: string\n  }\n\n  export interface Heartbeat {\n    type: 'heartbeat'\n  }\n}\n\nlet child: ChildProcess\n\nprocess.env.KOISHI_SHARED = '{}'\n\nfunction toArg(key: string) {\n  return key.length === 1 ? `-${key}` : `--${hyphenate(key)}`\n}\n\nfunction createWorker(options: Dict<any>) {\n  const execArgv = Object.entries(options).flatMap<string>(([key, value]) => {\n    if (key === '--') return []\n    key = toArg(key)\n    if (value === true) {\n      return [key]\n    } else if (value === false) {\n      return ['--no-' + key.slice(2)]\n    } else if (Array.isArray(value)) {\n      return value.flatMap(value => [key, value])\n    } else {\n      return [key, value]\n    }\n  })\n  execArgv.push(...options['--'])\n\n  child = fork(resolve(__dirname, '../worker'), [], {\n    execArgv,\n  })\n\n  let config: Config\n  let timer: NodeJS.Timeout\n\n  child.on('message', (message: Event) => {\n    if (message.type === 'start') {\n      config = message.body\n      timer = config.heartbeatTimeout && setTimeout(() => {\n        console.log(kleur.red('daemon: heartbeat timeout'))\n        child.kill('SIGKILL')\n      }, config.heartbeatTimeout)\n    } else if (message.type === 'shared') {\n      process.env.KOISHI_SHARED = message.body\n    } else if (message.type === 'heartbeat') {\n      if (timer) timer.refresh()\n    }\n  })\n\n  function shouldExit(code: number) {\n    // start failed\n    if (!config) return true\n\n    // exit manually or by signal\n    // https://tldp.org/LDP/abs/html/exitcodes.html\n    if (code === 0 || code >= 128 && code < 128 + 16) return true\n\n    // restart manually\n    if (code === 51) return false\n    if (code === 52) return true\n\n    // fallback to autoRestart\n    return !config.autoRestart\n  }\n\n  child.on('exit', (code) => {\n    if (shouldExit(code)) {\n      process.exit(code)\n    }\n    createWorker(options)\n  })\n}\n\nfunction setEnvArg(name: string, value: string | boolean) {\n  if (value === true) {\n    process.env[name] = ''\n  } else if (value) {\n    process.env[name] = value\n  }\n}\n\nexport default function (cli: CAC) {\n  cli.command('start [file]', 'start a koishi bot')\n    .alias('run')\n    .allowUnknownOptions()\n    .option('--debug [namespace]', 'specify debug namespace')\n    .option('--log-level [level]', 'specify log level (default: 2)')\n    .option('--log-time [format]', 'show timestamp in logs')\n    .option('--watch [path]', 'watch and reload at change')\n    .action((file, options) => {\n      const { logLevel, debug, logTime, watch, ...rest } = options\n      if (logLevel !== undefined && (!isInteger(logLevel) || logLevel < 0)) {\n        console.warn(`${kleur.red('error')} log level should be a positive integer.`)\n        process.exit(1)\n      }\n      setEnvArg('KOISHI_WATCH_ROOT', watch)\n      setEnvArg('KOISHI_LOG_TIME', logTime)\n      process.env.KOISHI_LOG_LEVEL = logLevel || ''\n      process.env.KOISHI_DEBUG = debug || ''\n      process.env.KOISHI_CONFIG_FILE = file || ''\n      createWorker(rest)\n    })\n}\n", "#!/usr/bin/env node\n\nimport registerStartCommand from './start'\nimport CAC from 'cac'\n\nconst { version } = require('../../package.json')\nconst cli = CAC('koishi').help().version(version)\n\nregisterStartCommand(cli)\n\ncli.parse()\n\nif (!cli.matchedCommand) {\n  cli.outputHelp()\n}\n"],
  "mappings": "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",
  "names": ["value", "kleur", "cli", "CAC"]
}
