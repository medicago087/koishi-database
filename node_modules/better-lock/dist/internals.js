"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyQueue = exports.LockJob = void 0;
/**
 * Class that represents one scheduled job and its state. This is created every time user calls "acquire"
 */
var LockJob = /** @class */ (function () {
    function LockJob(keys, executor, callback, options) {
        /** ID to uniquely identify this particular job */
        this.id = undefined;
        /**
         * Timestamp when job was created
         */
        this.enqueued_at = new Date();
        /**
         * Timestamp when job was executed
         */
        this.executed_at = null;
        /**
         * This is set when job ends, in case something holds a reference to it
         */
        this.ended_at = null;
        /**
         * Id of the wait timer
         */
        this.wait_timeout_id = null;
        /**
         * Id of the execution timer
         */
        this.execution_timeout_id = null;
        /**
         * Saved incoming stack, for the purpose of extending stack traces
         */
        this.incoming_stack = null;
        LockJob._lastId++;
        this.id = LockJob._lastId;
        this.keys = keys;
        this.waiting_count = keys.length;
        this.executor = executor;
        this.callback = callback;
        this.options = options;
    }
    LockJob.prototype.toString = function () {
        return "Job #" + this.id + " [" + this.keys.join(', ') + "]";
    };
    LockJob._lastId = 0;
    return LockJob;
}());
exports.LockJob = LockJob;
// *********************************************************************************************************************
/**
 * Class to hold pending, holding and executing jobs for one key
 */
var KeyQueue = /** @class */ (function () {
    function KeyQueue(key) {
        /**
         * Queue of jobs waiting to be executed.
         * Jobs in this state are governed by the wait_timeout.
         */
        this.jobs = [];
        /**
         * Active job that is holding this key. This job could be waiting on other keys or executing.
         */
        this.active = null;
        this.key = key;
    }
    KeyQueue.prototype.toString = function () {
        return this.key === KeyQueue.DEFAULT_QUEUE_KEY ? 'JobQueue' : "JobQueue<" + this.key + ">";
    };
    // We will use this key when user doesn't supply anything
    KeyQueue.DEFAULT_QUEUE_KEY = '___DEFAULT_QUEUE_KEY___';
    return KeyQueue;
}());
exports.KeyQueue = KeyQueue;
//# sourceMappingURL=internals.js.map