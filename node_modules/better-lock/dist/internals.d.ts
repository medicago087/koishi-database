import { ILockJobOptions } from './options';
import { ICallback, IExecutor } from './types';
/**
 * Class that represents one scheduled job and its state. This is created every time user calls "acquire"
 */
export declare class LockJob<TResult> {
    static _lastId: number;
    /** ID to uniquely identify this particular job */
    id: any;
    /**
     * List of keys that will be locked. Always an array
     */
    keys: Array<string | null>;
    /**
     * Number of keys which this job is waiting on. Once this reaches 0, job will be executed
     */
    waiting_count: number;
    /**
     * Function that will be called inside the lock
     */
    executor: IExecutor<TResult>;
    /**
     * Function that will be called once job is done, whether it succeeds or times out.
     * This is supplied by user in callback API, and generated internally otherwise.
     */
    callback: ICallback<TResult>;
    /**
     * Timestamp when job was created
     */
    enqueued_at: Date;
    /**
     * Timestamp when job was executed
     */
    executed_at: Date;
    /**
     * This is set when job ends, in case something holds a reference to it
     */
    ended_at: Date;
    /**
     * Options that apply to this particular job
     */
    options: ILockJobOptions;
    /**
     * Id of the wait timer
     */
    wait_timeout_id: any;
    /**
     * Id of the execution timer
     */
    execution_timeout_id: any;
    /**
     * Saved incoming stack, for the purpose of extending stack traces
     */
    incoming_stack: string;
    constructor(keys: Array<string | null>, executor: IExecutor<TResult>, callback: ICallback<TResult>, options: ILockJobOptions);
    toString(): string;
}
/**
 * Class to hold pending, holding and executing jobs for one key
 */
export declare class KeyQueue {
    static readonly DEFAULT_QUEUE_KEY = "___DEFAULT_QUEUE_KEY___";
    key: string;
    /**
     * Queue of jobs waiting to be executed.
     * Jobs in this state are governed by the wait_timeout.
     */
    jobs: LockJob<any>[];
    /**
     * Active job that is holding this key. This job could be waiting on other keys or executing.
     */
    active: LockJob<any>;
    constructor(key?: string);
    toString(): string;
}
