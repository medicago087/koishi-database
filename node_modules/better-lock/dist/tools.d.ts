import { ICallback } from './types';
export declare function isString(val: any): boolean;
export declare function isFunction(val: any): boolean;
export declare function isObject(val: any): boolean;
export declare function isNumber(val: any, includeInfinity?: boolean, includeNaN?: boolean): boolean;
export declare function noop(): void;
export declare function makeLog(name: any, doLog: any): (msg: string) => void;
/**
 * Create a wrapped promise + callback construct
 */
export declare function callbackWithPromise<TResult = any>(): Promise<TResult> & {
    callback: ICallback<TResult>;
};
/**
 * Assign properties from sources to target, skipping over undefined-s
 * @param target Target object which will be mutated
 * @param sources One or more source objects which will provide properties
 */
export declare function assign<T>(target: T, sources: T[]): T;
