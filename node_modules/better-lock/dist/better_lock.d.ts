import { ILockJobOptions, IOptions } from './options';
import { ICallback, ICallbackExecutor, ILockKey, IPromiseExecutor } from './types';
/**
 * Main better lock class.
 */
export declare class BetterLock {
    /**
     * Default options to be used when creating BetterLock instances.
     */
    static DEFAULT_OPTIONS: IOptions;
    private readonly options;
    private readonly log;
    private readonly queues;
    /**
     * Create a better lock instance
     */
    constructor(options?: IOptions);
    /**
     * Return or create a key queue for given key
     */
    private getQueue;
    /**
     * Returns true if the caller can *immediately* acquire the lock. There is nothing holding the key and nothing in the queue.
     */
    canAcquire(key?: string): boolean;
    private normalizeAndValidateKey;
    acquire<TResult>(executor: IPromiseExecutor<TResult>, jobOptions?: ILockJobOptions): Promise<TResult>;
    acquire<TResult>(executor: ICallbackExecutor<TResult>, jobOptions?: ILockJobOptions): Promise<TResult>;
    acquire<TResult>(executor: ICallbackExecutor<TResult>, callback: ICallback<TResult>, jobOptions?: ILockJobOptions): void;
    acquire<TResult>(key: ILockKey | Array<ILockKey>, executor: IPromiseExecutor<TResult>, jobOptions?: ILockJobOptions): Promise<TResult>;
    acquire<TResult>(key: ILockKey | Array<ILockKey>, executor: ICallbackExecutor<TResult>, jobOptions?: ILockJobOptions): Promise<TResult>;
    acquire<TResult>(key: ILockKey | Array<ILockKey>, executor: ICallbackExecutor<TResult>, callback: ICallback<TResult>, jobOptions?: ILockJobOptions): void;
    /**
     * Update state of given list of queues.
     */
    private update;
    private executeJob;
    private onWaitTimeout;
    private onExecutionTimeout;
    private endJob;
    /**
     * Abort all jobs for a given key (or from the default job queue, if no key is given).
     * Job executors will not be called. Callbacks will be called with JobAbortedError.
     * Currently executing job will not be interrupted.
     * @param [key]
     */
    abort(key?: ILockKey): void;
    /**
     * Abort all pending jobs from all queues.
     * Currently executing jobs will not be interrupted.
     */
    abortAll(): void;
}
