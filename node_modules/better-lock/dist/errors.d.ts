import { LockJob } from './internals';
import { IErrorName } from './types';
export declare class BetterLockError extends Error {
    /**
     * Name of the lock that caused the error
     */
    lock_name: string;
    /**
     * Error name, maps to error's class name. Eg. BetterLockError.
     */
    name: IErrorName;
    constructor(lockName: any, message: any, incomingStack?: any);
}
export declare class BetterLockInternalError extends BetterLockError {
    constructor(lockName: any, message: any);
}
export declare class BetterLockInvalidArgumentError extends BetterLockError {
    argument: any;
    constructor(lockName: any, argument: any, expected: any, actual: any);
}
export declare class BetterLockWaitTimeoutError extends BetterLockError {
    job_id: number;
    keys: string[];
    enqueued_at: Date;
    constructor(lockName: any, job: LockJob<any>);
}
export declare class BetterLockExecutionTimeoutError extends BetterLockError {
    job_id: number;
    keys: string[];
    executed_at: Date;
    constructor(lockName: any, job: LockJob<any>);
}
export declare class BetterLockQueueOverflowError extends BetterLockError {
    job_id: number;
    keys: string[];
    job_count: number;
    kicked_out_job_id: number;
    constructor(lockName: any, key: any, count: any, job: LockJob<any>);
}
export declare class BetterLockJobAbortedError extends BetterLockError {
    job_id: number;
    keys: string[];
    constructor(lockName: any, job: any);
}
