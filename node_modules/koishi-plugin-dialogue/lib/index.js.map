{
  "version": 3,
  "sources": ["../src/index.ts", "../src/service.ts", "../src/command.ts", "../src/utils.ts", "../src/receiver.ts", "../src/search.ts", "../src/update.ts", "../src/review.ts", "../src/internal.ts", "../src/probability.ts"],
  "sourcesContent": ["import { Argv, Awaitable, Context, Query, Schema, Time } from 'koishi'\nimport * as Koishi from 'koishi'\n\n// features\nimport { Abstract, DialogueService } from './service'\nimport { OrderedList } from './utils'\nimport command from './command'\nimport receiver from './receiver'\nimport search from './search'\nimport update from './update'\nimport review from './review'\nimport internal from './internal'\nimport probability from './probability'\n\nexport * from './command'\nexport * from './utils'\nexport * from './receiver'\nexport * from './search'\nexport * from './service'\nexport * from './update'\nexport * from './review'\nexport * from './probability'\n\ndeclare module 'koishi' {\n  interface Events {\n    'dialogue/validate'(session: Dialogue.Session): void | string\n    'dialogue/action'(session: Dialogue.Session): Awaitable<void | Fragment>\n    'dialogue/before-action'(session: Dialogue.Session): Awaitable<void | string>\n    'dialogue/permit'(session: Dialogue.Session, dialogue: Dialogue): boolean\n    'dialogue/query'(test: DialogueTest, query: Query.Expr<Dialogue>): void\n    'dialogue/abstract'(dialogue: Dialogue, output: Abstract, session: Dialogue.Session): void\n    'dialogue/appendix'(dialogue: Dialogue, output: string[], prefix: string, session: Dialogue.Session): void\n    'dialogue/usage'(output: OrderedList, session: Dialogue.Session): void\n  }\n\n  interface Context {\n    dialogue: DialogueService\n  }\n\n  interface Tables {\n    dialogue: Dialogue\n  }\n}\n\nexport interface Dialogue {\n  id?: number\n  question: string\n  answer: string\n  original: string\n  flag: number\n  _weight?: number\n  _capture?: RegExpExecArray\n  _type?: Dialogue.ModifyType\n  _operator?: string\n  _timestamp?: number\n  _backup?: Readonly<Dialogue>\n}\n\nexport interface DialogueTest {\n  original?: string\n  question?: string\n  answer?: string\n  regexp?: boolean\n  activated?: boolean\n  appellative?: boolean\n  noRecursive?: boolean\n}\n\nexport namespace Dialogue {\n  export type ModifyType = 'create' | 'modify' | 'remove'\n  export type Field = keyof Dialogue\n\n  export interface Config {\n    historyTimeout?: number\n  }\n\n  export interface Stats {\n    questions: number\n    dialogues: number\n  }\n\n  export enum Flag {\n    /** 冻结：只有 4 级以上权限者可修改 */\n    frozen = 1,\n    /** 正则：使用正则表达式进行匹配 */\n    regexp = 2,\n    /** 上下文：后继问答可以被上下文内任何人触发 */\n    context = 4,\n    /** 代行者：由教学者完成回答的执行 */\n    substitute = 8,\n    /** 补集：上下文匹配时取补集 */\n    complement = 16,\n  }\n\n  export interface Options {\n    help?: boolean\n    original?: string\n    appellative?: boolean\n    action?: 'review' | 'revert' | 'remove' | 'create' | 'search' | 'modify'\n    skipped?: number[]\n    updated?: number[]\n    unknown?: number[]\n    forbidden?: number[]\n    dialogues?: Dialogue[]\n    dialogueMap?: Record<number, Dialogue>\n  }\n\n  export interface Session extends Koishi.Session<'authority'> {\n    argv: Argv<'authority', never, string[], Dialogue.Options>\n  }\n}\n\nexport type Config = Dialogue.Config\n\nexport const schema: Schema<Config> = Schema.intersect([\n  Schema.object({\n    prefix: Schema.string().description('教学指令的前缀。').default('#'),\n    historyTimeout: Schema.natural().role('ms').description('教学操作在内存中的保存时间。').default(Time.minute * 10),\n  }).description('通用设置'),\n\n  Schema.object({\n    authority: Schema.object({\n      base: Schema.natural().description('可访问教学系统的权限等级。').default(2),\n      admin: Schema.natural().description('可修改非自己创建的问答的权限等级。').default(3),\n      context: Schema.natural().description('可修改上下文设置的权限等级。').default(3),\n      frozen: Schema.natural().description('可修改锁定的问答的权限等级。').default(4),\n      regExp: Schema.natural().description('可使用正则表达式的权限等级。').default(3),\n      writer: Schema.natural().description('可设置作者或匿名的权限等级。').default(2),\n    }),\n  }).description('权限设置'),\n\n  Schema.object({\n    maxRedirections: Schema.natural().description('问题重定向的次数上限。').default(3),\n    successorTimeout: Schema.natural().role('ms').description('问答触发后继问答的持续时间。').default(Time.second * 20),\n    appellationTimeout: Schema.natural().role('ms').description('称呼作为问题触发的后续效果持续时间。').default(Time.minute * 10),\n  }).description('触发设置'),\n\n  Schema.object({\n    maxPreviews: Schema.natural().description('同时查看的最大问答数量。').default(10),\n    previewDelay: Schema.natural().role('ms').description('显示两个问答之间的时间间隔。').default(Time.second * 0.5),\n    itemsPerPage: Schema.natural().description('搜索结果每一页显示的最大数量。').default(30),\n    maxAnswerLength: Schema.natural().description('搜索结果中回答显示的长度限制。').default(100),\n    mergeThreshold: Schema.natural().description('合并搜索模式中，相同的问题和回答被合并的最小数量。').default(5),\n  }).description('显示设置'),\n])\n\nexport const name = 'dialogue'\nexport const using = ['database'] as const\n\nexport function apply(ctx: Context, config: Config) {\n  ctx.i18n.define('zh', require('./locales/zh'))\n\n  // features\n  ctx.plugin(DialogueService, config)\n  ctx.plugin(command, config)\n  ctx.plugin(receiver, config)\n  ctx.plugin(search, config)\n  ctx.plugin(update, config)\n  ctx.plugin(review, config)\n  ctx.plugin(internal, config)\n  ctx.plugin(probability, config)\n}\n", "import { $, clone, Context, defineProperty, escapeRegExp, makeArray, Observed, Query, segment, Service } from 'koishi'\n// import { Dialogue, DialogueTest, equal } from './utils'\nimport { Dialogue, DialogueTest, SessionState } from '.'\n\nconst halfWidth = ',,.~?!()[]'\nconst fullWidth = '，、。～？！（）【】'\nconst fullWidthRegExp = new RegExp(`[${fullWidth}]`)\n\ninterface Question {\n  /** 被 unescape 处理后原本的句子 */\n  original: string\n  /** 去除句首句尾标点符号，句中空格和句首称呼的句子 */\n  parsed: string\n  /** 是否含有称呼 */\n  appellative: boolean\n  /** 是否仅含有称呼 */\n  activated: boolean\n}\n\nfunction createLeadingRE(patterns: string[], prefix = '', suffix = '') {\n  return patterns.length ? new RegExp(`^${prefix}(${patterns.map(escapeRegExp).join('|')})${suffix}`) : /$^/\n}\n\nexport class DialogueService extends Service {\n  states: Record<string, SessionState> = Object.create(null)\n  history: Record<number, Dialogue> = Object.create(null)\n  nameRE: RegExp\n\n  constructor(ctx: Context, public config: Dialogue.Config) {\n    super(ctx, 'dialogue', true)\n\n    ctx.model.extend('dialogue', {\n      id: 'unsigned',\n      flag: 'unsigned(4)',\n      probS: { type: 'decimal', precision: 4, scale: 3, initial: 1 },\n      probA: { type: 'decimal', precision: 4, scale: 3, initial: 0 },\n      original: 'string(255)',\n      question: 'string(255)',\n      answer: 'text',\n    }, {\n      autoInc: true,\n    })\n\n    this.nameRE = createLeadingRE(makeArray(ctx.root.config.nickname), '@?', '([,，]\\\\s*|\\\\s+|$)')\n  }\n\n  flag(flag: keyof typeof Dialogue.Flag) {\n    this.ctx.before('dialogue/search', (session, test) => {\n      test[flag] = session.argv.options[flag]\n    })\n\n    this.ctx.on('dialogue/modify', (session, data) => {\n      const { options } = session.argv\n      if (options[flag] !== undefined) {\n        data.flag &= ~Dialogue.Flag[flag]\n        data.flag |= +options[flag] * Dialogue.Flag[flag]\n      }\n    })\n\n    this.ctx.on('dialogue/query', (test, query) => {\n      if (test[flag] === undefined) return\n      query.$and.push({\n        flag: { [test[flag] ? '$bitsAllSet' : '$bitsAllClear']: Dialogue.Flag[flag] },\n      })\n    })\n  }\n\n  async stats(): Promise<Dialogue.Stats> {\n    const selection = this.ctx.database.select('dialogue')\n    const [dialogues, questions] = await Promise.all([\n      selection.execute(row => $.count(row.id)),\n      selection.execute(row => $.count(row.question)),\n    ])\n    return { dialogues, questions }\n  }\n\n  get(test: DialogueTest): Promise<Dialogue[]>\n  get<K extends Dialogue.Field>(ids: number[], fields?: K[]): Promise<Pick<Dialogue, K>[]>\n  async get(test: DialogueTest | number[], fields?: Dialogue.Field[]) {\n    if (Array.isArray(test)) {\n      const dialogues = await this.ctx.database.get('dialogue', test, fields)\n      dialogues.forEach(d => defineProperty(d, '_backup', clone(d)))\n      return dialogues\n    } else {\n      const query: Query.Expr<Dialogue> = { $and: [] }\n      this.ctx.emit('dialogue/query', test, query)\n      const dialogues = await this.ctx.database.get('dialogue', query)\n      dialogues.forEach(d => defineProperty(d, '_backup', clone(d)))\n      return dialogues/* .filter((data) => {\n        if (!test.guilds || test.partial) return true\n        return !(data.flag & Dialogue.Flag.complement) === test.reversed || !equal(test.guilds, data.guilds)\n      }) */\n    }\n  }\n\n  async update(dialogues: Observed<Dialogue>[], session: Dialogue.Session) {\n    const data: Partial<Dialogue>[] = []\n    const { options } = session.argv\n    for (const dialogue of dialogues) {\n      if (!Object.keys(dialogue.$diff).length) {\n        options.skipped.push(dialogue.id)\n      } else {\n        options.updated.push(dialogue.id)\n        data.push({ ...dialogue.$diff, id: dialogue.id })\n        dialogue.$diff = {}\n        this.addHistory(dialogue._backup, 'modify', session, false)\n      }\n    }\n    await this.ctx.database.upsert('dialogue', data)\n  }\n\n  async remove(dialogues: Dialogue[], session: Dialogue.Session, revert = false) {\n    const ids = dialogues.map(d => d.id)\n    for (const id of ids) {\n      this.addHistory(session.argv.options.dialogueMap[id], 'remove', session, revert)\n    }\n    await this.ctx.database.remove('dialogue', ids)\n    return ids\n  }\n\n  async revert(dialogues: Dialogue[], session: Dialogue.Session) {\n    const created = dialogues.filter(d => d._type === 'create')\n    const edited = dialogues.filter(d => d._type !== 'create')\n    await this.remove(created, session, true)\n    await this.recover(edited, session)\n    return session.text('.revert-success', [dialogues.map(d => d.id).sort((a, b) => a - b).join(', ')])\n  }\n\n  async recover(dialogues: Dialogue[], session: Dialogue.Session) {\n    await this.ctx.database.upsert('dialogue', dialogues)\n    for (const dialogue of dialogues) {\n      this.addHistory(dialogue, 'modify', session, true)\n    }\n  }\n\n  addHistory(dialogue: Dialogue, type: Dialogue.ModifyType, session: Dialogue.Session, revert: boolean) {\n    if (revert) return delete this.history[dialogue.id]\n    this.history[dialogue.id] = dialogue\n    const time = Date.now()\n    defineProperty(dialogue, '_timestamp', time)\n    defineProperty(dialogue, '_operator', session.userId)\n    defineProperty(dialogue, '_type', type)\n    this.ctx.setTimeout(() => {\n      if (this.history[dialogue.id]?._timestamp === time) {\n        delete this.history[dialogue.id]\n      }\n    }, this.config.historyTimeout)\n  }\n\n  stripQuestion(source: string): Question {\n    const original = segment.unescape(source)\n    source = segment.transform(source, {\n      text({ content }) {\n        return segment.unescape('' + content)\n          .toLowerCase()\n          .replace(/\\s+/g, '')\n          .replace(fullWidthRegExp, $0 => halfWidth[fullWidth.indexOf($0)])\n      },\n    })\n    source = source.replace(/^\\(*/, '')\n    source = source.replace(/[\\.,?!()~]*$/, '')\n    const capture = this.nameRE.exec(source)\n    const unprefixed = capture ? source.slice(capture[0].length) : source\n    return {\n      original,\n      parsed: unprefixed || source,\n      appellative: unprefixed && unprefixed !== source,\n      activated: !unprefixed && unprefixed !== source,\n    }\n  }\n\n  formatDialogue(session: Dialogue.Session, dialogue: Dialogue) {\n    const abstract = getAbstract(session, dialogue)\n    const { original, answer } = dialogue\n    const questionType = session.text(`commands.teach.messages.entity.${abstract.questionType || 'question'}`)\n    const answerType = session.text(`commands.teach.messages.entity.${abstract.answerType || 'answer'}`)\n    return [\n      session.text('commands.teach.messages.detail', [formatAbstract(dialogue, abstract) + questionType, original]),\n      session.text('commands.teach.messages.detail', [answerType, formatAnswer(answer, this.config)]),\n    ].join(session.text('general.comma'))\n  }\n\n  list(session: Dialogue.Session, dialogues: Dialogue[], prefix = '') {\n    return dialogues.map((dialogue) => {\n      const output = [prefix + this.formatDialogue(session, dialogue)]\n      this.ctx.emit('dialogue/appendix', dialogue, output, prefix, session)\n      return output.join('\\n')\n    })\n  }\n}\n\nexport function formatAnswer(source: string, { maxAnswerLength = 100 }: Dialogue.Config) {\n  let trimmed = false\n  const lines = source.split(/(\\r?\\n|\\$n)/g)\n  if (lines.length > 1) {\n    trimmed = true\n    source = lines[0].trim()\n  }\n  source = source.replace(/<image [^>]+>/g, '[图片]')\n  if (source.length > maxAnswerLength) {\n    trimmed = true\n    source = source.slice(0, maxAnswerLength)\n  }\n  if (trimmed && !source.endsWith('……')) {\n    if (source.endsWith('…')) {\n      source += '…'\n    } else {\n      source += '……'\n    }\n  }\n  return source\n}\n\nexport interface Abstract extends Array<string> {\n  questionType?: string\n  answerType?: string\n}\n\nexport function getAbstract(session: Dialogue.Session, dialogue: Dialogue) {\n  const abstract: Abstract = []\n  session.app.emit('dialogue/abstract', dialogue, abstract, session)\n  return abstract\n}\n\nexport function formatAbstract(dialogue: Dialogue, abstract: Abstract) {\n  return `${dialogue.id}. ${abstract.length ? `[${abstract.join(', ')}] ` : ''}`\n}\n\nexport function formatPrefix(session: Dialogue.Session, dialogue: Dialogue, showAnswerType = false) {\n  const details = getAbstract(session, dialogue)\n  let result = formatAbstract(dialogue, details)\n  if (details.questionType) {\n    result += `[${session.text('commands.teach.messages.entity.' + details.questionType)}] `\n  }\n  if (showAnswerType && details.answerType) {\n    result += `[${session.text('commands.teach.messages.entity.' + details.answerType)}] `\n  }\n  return result\n}\n\nexport function formatAnswers(session: Dialogue.Session, dialogues: Dialogue[], prefix = '') {\n  const app = session.app\n  return dialogues.map((dialogue) => {\n    const { answer } = dialogue\n    const output = [`${prefix}${formatPrefix(session, dialogue, true)}${formatAnswer(answer, app.dialogue.config)}`]\n    app.emit('dialogue/appendix', dialogue, output, prefix, session)\n    return output.join('\\n')\n  })\n}\n", "/* eslint-disable no-irregular-whitespace */\n\nimport { Argv, Context, deduplicate, escapeRegExp, segment } from 'koishi'\nimport { OrderedList, split } from './utils'\nimport { Dialogue } from '.'\nimport {} from '@koishijs/plugin-help'\nimport {} from '@koishijs/plugin-console'\nimport {} from '@koishijs/plugin-status'\n\ndeclare module '.' {\n  export namespace Dialogue {\n    export interface Config {\n      prefix?: string\n      authority?: AuthorityConfig\n    }\n  }\n}\n\nexport interface AuthorityConfig {\n  /** 可访问教学系统，默认值为 2 */\n  base?: number\n  /** 可修改非自己创建的问答，默认值为 3 */\n  admin?: number\n  /** 可使用正则表达式，默认值为 3 */\n  regExp?: number\n  /** 可触发教学问答，默认值为 1 */\n  receive?: number\n}\n\nconst cheatSheet = (session: Dialogue.Session, config: Dialogue.Config) => {\n  const { authority } = session.user\n  const { authority: a, prefix: p } = config\n  const l = p[p.length - 1]\n  const output = new OrderedList()\n  output.add(`\\\n教学系统基本用法：\n　添加问答：${p} 问题 回答\n　搜索回答：${p}${l} 问题\n　搜索问题：${p}${l} ~ 回答\n　查看问答：${p}id\n　修改问题：${p}id 问题\n　修改回答：${p}id ~ 回答\n　删除问答：${p}id -r\n　批量查看：${p}${l}id\n搜索选项：\n　管道语法：　　　|\n　结果页码：　　　/ page\n　禁用递归查询：　-R${authority >= a.regExp ? `\n　正则+合并结果：${p}${l}${l}` : ''}`, 1000)\n  output.add('问答选项：', 600)\n  output.add(`\\\n　忽略智能提示：　-I\n　重定向：　　　　=>`, 510)\n  output.add('匹配规则：', 500)\n  if (authority >= a.regExp) {\n    output.add('　正则表达式：　　-x/-X', 490)\n  }\n  output.add(`\\\n　严格匹配权重：　-p prob\n　称呼匹配权重：　-P prob`, 480)\n  output.add(`\\\n回退功能：\n　查看近期改动：　-v\n　回退近期改动：　-V\n　设置查看区间：　-l/-L\n特殊语法：\n　$$：一个普通的 $ 字符\n　$0：收到的原文本\n　$n：分条发送\n　$a：@说话人\n　$m：@${session.app.config.nickname[0]}\n　$s：说话人的名字\n　\\$()：指令插值\n　\\${}：表达式插值`, 0)\n  session.app.emit('dialogue/usage', output, session)\n  return output.toString()\n}\n\nexport default function command(ctx: Context, config: Dialogue.Config) {\n  const { prefix } = config\n  const g = '\\\\d+(?:\\\\.\\\\.\\\\d+)?'\n  const last = prefix[prefix.length - 1]\n  const p = escapeRegExp(prefix)\n  const l = escapeRegExp(last)\n  const teachRegExp = new RegExp(`^${p}(${l}?)((${g}(?:,${g})*)?|${l}?)$`)\n  //                                   $1     $2\n\n  ctx.before('parse', (content, session: Dialogue.Session) => {\n    const argv = Argv.parse(content) as Dialogue.Session['argv']\n    if (session.quote || !argv.tokens.length) return\n    let prefix = argv.tokens[0].content\n    if (session.parsed.prefix) {\n      prefix = session.parsed.prefix + prefix\n    }\n\n    // ignore non-text prefix\n    try {\n      segment.transform(prefix, {\n        text: true,\n        default: () => { throw new Error() },\n      })\n    } catch {\n      return\n    }\n\n    prefix = segment.unescape(prefix)\n    const capture = teachRegExp.exec(prefix)\n    if (!capture) return\n\n    argv.tokens.shift()\n    argv.tokens.forEach(Argv.revert)\n    argv.source = session.parsed.content\n    argv.options = {}\n    const { length } = argv.tokens\n    if (capture[1] === last) {\n      if (!argv.tokens.length) {\n        argv.name = 'dialogue.stats'\n        return argv\n      }\n      argv.options.action = 'search'\n      if (capture[2] === last) {\n        argv.options.autoMerge = true\n        argv.options.regexp = true\n      }\n    } else if (!capture[2] && !length) {\n      argv.options.help = true\n    }\n\n    if (capture[2] && capture[2] !== last) {\n      argv.options.target = deduplicate(split(capture[2]))\n    }\n\n    argv.name = 'teach'\n    return argv\n  })\n\n  ctx.command('teach', { authority: config.authority.base, checkUnknown: true, hideOptions: true })\n    .userFields(['authority', 'id'])\n    .option('target', '')\n    .usage(session => cheatSheet(session as Dialogue.Session, config))\n    .before(({ session }) => {\n      return ctx.serial('dialogue/before-action', session as never)\n    }, true)\n    .action(({ session }) => {\n      return ctx.bail('dialogue/action', session as never)\n    })\n}\n", "export function split(source: string) {\n  if (!source) return []\n  return source.split(',').flatMap((value) => {\n    if (!value.includes('..')) return +value\n    const capture = value.split('..')\n    const start = +capture[0], end = +capture[1]\n    if (end < start) return []\n    return new Array(end - start + 1).fill(0).map((_, index) => start + index)\n  })\n}\n\nexport function equal(array1: (string | number)[], array2: (string | number)[]) {\n  return array1.slice().sort().join() === array2.slice().sort().join()\n}\n\nexport const RE_DIALOGUES = /^\\d+(\\.\\.\\d+)?(,\\d+(\\.\\.\\d+)?)*$/\n\nexport class OrderedList {\n  private output: [text: string, order: number][] = []\n\n  add(text: string, order: number) {\n    order ??= 0\n    const index = this.output.findIndex(a => a[1] < order)\n    if (index >= 0) {\n      this.output.splice(index, 0, [text, order])\n    } else {\n      this.output.push([text, order])\n    }\n  }\n\n  toString() {\n    return this.output.map(entry => entry[0]).join('\\n')\n  }\n}\n", "import { Argv, Awaitable, Channel, Context, Next, noop, Random, segment, Session, User } from 'koishi'\nimport { Dialogue, DialogueTest } from '.'\n\ndeclare module 'koishi' {\n  interface Events {\n    'dialogue/state'(state: SessionState): void\n    'dialogue/receive'(state: SessionState): void | boolean\n    'dialogue/prepare'(state: SessionState): void\n    'dialogue/before-attach-user'(state: SessionState, userFields: Set<User.Field>): void\n    'dialogue/attach-user'(state: SessionState): void | boolean\n    'dialogue/before-send'(state: SessionState): Awaitable<void | boolean>\n    'dialogue/send'(state: SessionState): void\n  }\n\n  interface Context {\n    getSessionState(this: Context, session: Session): SessionState\n  }\n\n  interface Session {\n    _redirected?: number\n  }\n}\n\ndeclare module '.' {\n  namespace Dialogue {\n    interface Config {\n      appellationTimeout?: number\n      maxRedirections?: number\n    }\n  }\n}\n\nexport interface SessionState {\n  userId?: string\n  channelId?: string\n  answer?: string\n  session?: Session<User.Field>\n  test?: DialogueTest\n  dialogue?: Dialogue\n  dialogues?: Dialogue[]\n  next?: Next\n  isSearch?: boolean\n}\n\nexport function escapeAnswer(message: string) {\n  return message.replace(/\\$/g, '@@__PLACEHOLDER__@@')\n}\n\nexport function unescapeAnswer(message: string) {\n  return message.replace(/@@__PLACEHOLDER__@@/g, '$')\n}\n\nContext.prototype.getSessionState = function (session) {\n  const { channelId, userId, app } = session\n  if (!app.dialogue.states[channelId]) {\n    this.emit('dialogue/state', app.dialogue.states[channelId] = { channelId } as SessionState)\n  }\n  const state = Object.create(app.dialogue.states[channelId])\n  state.session = session\n  state.userId = userId\n  return state\n}\n\nexport async function getTotalWeight(ctx: Context, state: SessionState) {\n  const { session, dialogues } = state\n  ctx.emit(session, 'dialogue/prepare', state)\n  const userFields = new Set<User.Field>(['name', 'flag'])\n  ctx.emit(session, 'dialogue/before-attach-user', state, userFields)\n  await session.observeUser(userFields)\n  if (ctx.bail(session, 'dialogue/attach-user', state)) return 0\n  return dialogues.reduce((prev, curr) => prev + curr._weight, 0)\n}\n\nexport class MessageBuffer {\n  private buffer = ''\n  private original = false\n\n  public hasData = false\n  public send: Session['send']\n  public sendQueued: Session['sendQueued']\n\n  constructor(private session: Session) {\n    this.send = session.send.bind(session)\n    this.sendQueued = session.sendQueued.bind(session)\n\n    session.send = async (message: string) => {\n      if (!message) return\n      this.hasData = true\n      if (this.original) {\n        return this.send(message)\n      }\n      this.buffer += message\n    }\n\n    session.sendQueued = async (message, delay) => {\n      if (!message) return\n      this.hasData = true\n      if (this.original) {\n        return this.sendQueued(message, delay)\n      }\n      return this._flush(this.buffer + message, delay)\n    }\n  }\n\n  write(message: string) {\n    if (!message) return\n    this.hasData = true\n    this.buffer += message\n  }\n\n  private async _flush(message: string, delay?: number) {\n    this.original = true\n    message = message.trim()\n    const result = await this.sendQueued(message, delay)\n    this.buffer = ''\n    this.original = false\n    return result\n  }\n\n  flush() {\n    return this._flush(this.buffer)\n  }\n\n  async execute(argv: Argv) {\n    this.original = false\n    const send = this.session.send\n    const sendQueued = this.session.sendQueued\n    await this.session.execute(argv)\n    this.session.sendQueued = sendQueued\n    this.session.send = send\n    this.original = true\n  }\n\n  async end(message = '') {\n    this.write(message)\n    await this.flush()\n    this.original = true\n    delete this.session.send\n    delete this.session.sendQueued\n  }\n}\n\nconst tokenizer = new Argv.Tokenizer()\n\ntokenizer.interpolate('$n', '', (rest) => {\n  return { rest, tokens: [], source: '' }\n})\n\nexport async function triggerDialogue(ctx: Context, session: Session, next: Next = noop) {\n  if (!session.content) return\n\n  const state = ctx.getSessionState(session)\n  state.next = next\n  state.test = {}\n\n  if (ctx.bail('dialogue/receive', state)) return next()\n  const logger = ctx.logger('dialogue')\n  logger.debug('[receive]', session.messageId, session.content)\n\n  // fetch matched dialogues\n  const dialogues = state.dialogues = await ctx.dialogue.get(state.test)\n\n  // pick dialogue\n  let dialogue: Dialogue\n  const total = await getTotalWeight(ctx, state)\n  if (!total) return next()\n  const target = Random.real(Math.max(1, total))\n  let pointer = 0\n  for (const _dialogue of dialogues) {\n    pointer += _dialogue._weight\n    if (target < pointer) {\n      dialogue = _dialogue\n      break\n    }\n  }\n  if (!dialogue) return next()\n  logger.debug('[attach]', session.messageId)\n\n  // parse answer\n  state.dialogue = dialogue\n  state.dialogues = [dialogue]\n  state.answer = dialogue.answer\n    .replace(/\\$\\$/g, '@@__PLACEHOLDER__@@')\n    .replace(/\\$A/g, segment('at', { type: 'all' }).toString())\n    .replace(/\\$a/g, segment('at', { id: session.userId }).toString())\n    .replace(/\\$m/g, segment('at', { id: session.selfId }).toString())\n    .replace(/\\$s/g, () => escapeAnswer(session.username))\n    .replace(/\\$0/g, escapeAnswer(session.content))\n\n  if (dialogue.flag & Dialogue.Flag.regexp) {\n    const capture = dialogue._capture || new RegExp(dialogue.original, 'i').exec(state.test.original)\n    // emojis will be transformed into \"?\" in mysql\n    // which will lead to incorrect matches\n    // TODO enhance emojis in regexp tests\n    if (!capture) return\n    capture.forEach((segment, index) => {\n      if (index && index <= 9) {\n        state.answer = state.answer.replace(new RegExp(`\\\\$${index}`, 'g'), escapeAnswer(segment || ''))\n      }\n    })\n  }\n\n  if (await ctx.serial(session, 'dialogue/before-send', state)) return\n  logger.debug('[send]', session.messageId, '->', dialogue.answer)\n\n  // send answers\n  const buffer = new MessageBuffer(session)\n  session._redirected = (session._redirected || 0) + 1\n\n  // parse answer\n  let index: number\n  const { content, inters } = tokenizer.parseToken(unescapeAnswer(state.answer))\n  while (inters.length) {\n    const argv = inters.shift()\n    buffer.write(content.slice(index, argv.pos))\n    if (argv.initiator === '$n') {\n      await buffer.flush()\n    } else {\n      await buffer.execute(argv)\n    }\n    index = argv.pos\n  }\n  await buffer.end(content.slice(index))\n  await ctx.parallel(session, 'dialogue/send', state)\n}\n\nexport default function receiver(ctx: Context, config: Dialogue.Config) {\n  const { maxRedirections = 3 } = config\n  const ctx2 = ctx.guild()\n\n  ctx.before('attach', (session) => {\n    if (session.parsed.appel) return\n    const { activated } = ctx.getSessionState(session)\n    if (activated[session.userId]) session.parsed.appel = true\n  })\n\n  ctx2.middleware(async (session, next) => {\n    return triggerDialogue(ctx, session, next)\n  })\n\n  ctx.on('notice/poke', async (session) => {\n    if (session.targetId !== session.selfId) return\n    const { flag } = await session.observeChannel(['flag'])\n    if (flag & Channel.Flag.ignore) return\n    session.content = 'hook:poke'\n    triggerDialogue(ctx, session)\n  })\n\n  async function triggerNotice(name: string, session: Session) {\n    const { flag, assignee } = await session.observeChannel(['flag', 'assignee'])\n    if (assignee !== session.selfId) return\n    if (flag & Channel.Flag.ignore) return\n    session.content = 'hook:' + name + (session.userId === session.selfId ? ':self' : ':others')\n    triggerDialogue(ctx, session)\n  }\n\n  ctx.on('notice/honor', async (session) => {\n    await triggerNotice(session.subsubtype, session)\n  })\n\n  ctx.on('guild-member-added', triggerNotice.bind(null, 'join'))\n\n  ctx.on('guild-member-deleted', triggerNotice.bind(null, 'leave'))\n\n  ctx.on('dialogue/receive', ({ session }) => {\n    // generally flag and authority has already attached to users\n    if (session.user?.authority < config.authority.receive) return true\n  })\n\n  ctx.on('dialogue/receive', ({ session, test }) => {\n    if (session.content.includes('<image ')) return true\n    const { original, parsed, appellative, activated } = ctx.dialogue.stripQuestion(session.content)\n    test.question = parsed\n    test.original = original\n    test.activated = activated\n    test.appellative = appellative\n  })\n\n  // predict the user fields involved\n  ctx.before('dialogue/attach-user', ({ dialogues, session }, userFields) => {\n    for (const data of dialogues) {\n      const { inters } = tokenizer.parseToken(data.answer)\n      for (const argv of inters) {\n        session.collect('user', argv, userFields)\n      }\n    }\n  })\n\n  ctx2.command('dialogue <message:text>')\n    .action(async ({ session }, message = '') => {\n      if (session._redirected > maxRedirections) return\n      session.content = message\n      return triggerDialogue(ctx, session)\n    })\n}\n", "import { Dialogue, DialogueTest } from '.'\nimport { Context, Dict } from 'koishi'\nimport { getTotalWeight } from './receiver'\nimport { formatAnswers, formatPrefix } from './service'\n\ndeclare module 'koishi' {\n  interface Events {\n    'dialogue/before-search'(argv: Dialogue.Session, test: DialogueTest): void | boolean\n    'dialogue/search'(argv: Dialogue.Session, test: DialogueTest, dialogue: Dialogue[]): Promise<void>\n  }\n}\n\ndeclare module '.' {\n  interface Dialogue {\n    _redirections: Dialogue[]\n  }\n\n  namespace Dialogue {\n    interface Config {\n      itemsPerPage?: number\n      mergeThreshold?: number\n      maxAnswerLength?: number\n    }\n\n    interface Options {\n      questionMap?: Dict<Dialogue[]>\n      autoMerge?: boolean\n      recursive?: boolean\n      page?: number\n      pipe?: string\n    }\n  }\n}\n\nexport default function apply(ctx: Context) {\n  ctx.command('dialogue.stats').action(async ({ session }) => {\n    const stats = await ctx.dialogue.stats()\n    return session.text('.output', stats)\n  })\n\n  ctx.command('teach')\n    .option('page', '/ <page:posint>')\n    .option('autoMerge', '')\n    .option('recursive', '-R', { value: false })\n    .option('pipe', '| <op:text>')\n\n  ctx.on('dialogue/appendix', ({ _redirections }, output, prefix, argv) => {\n    if (!_redirections) return\n    output.push(...formatAnswers(argv, _redirections, prefix + '= '))\n  })\n\n  ctx.on('dialogue/abstract', ({ flag }, output) => {\n    if (flag & Dialogue.Flag.regexp) {\n      output.questionType = 'regexp'\n    }\n  })\n\n  ctx.before('dialogue/search', ({ argv }, test) => {\n    test.noRecursive = argv.options.recursive === false\n  })\n\n  ctx.before('dialogue/search', ({ argv }, test) => {\n    test.appellative = argv.options.appellative\n  })\n\n  ctx.on('dialogue/search', async (session, test, dialogues) => {\n    const { options } = session.argv\n    if (!options.questionMap) {\n      options.questionMap = { [test.question]: dialogues }\n    }\n    for (const dialogue of dialogues) {\n      const { answer } = dialogue\n      // TODO extract dialogue command\n      if (!answer.startsWith('%{dialogue ')) continue\n      const { original, parsed } = ctx.dialogue.stripQuestion(answer.slice(11, -1).trimStart())\n      if (parsed in options.questionMap) continue\n      // TODO multiple tests in one query\n      const dialogues = options.questionMap[parsed] = await ctx.dialogue.get({\n        ...test,\n        regexp: null,\n        question: parsed,\n        original: original,\n      })\n      Object.defineProperty(dialogue, '_redirections', { writable: true, value: dialogues })\n      await ctx.parallel('dialogue/search', session, test, dialogues)\n    }\n  })\n\n  ctx.on('dialogue/action', (session) => {\n    const { options } = session.argv\n    if (options.action !== 'search') return\n    return showSearch(session)\n  }, true)\n}\n\nasync function showSearch(session: Dialogue.Session) {\n  const app = session.app\n  const { options, args: [question, answer] } = session.argv\n  const { regexp, page = 1, original, pipe, recursive, autoMerge } = options\n  const { itemsPerPage = 30, mergeThreshold = 5 } = app.dialogue.config\n\n  const test: DialogueTest = { question, answer, regexp, original }\n  if (app.bail('dialogue/before-search', session, test)) return ''\n  const dialogues = await app.dialogue.get(test)\n\n  if (pipe) {\n    if (!dialogues.length) return session.text('.search.empty')\n    const command = app.command('teach')\n    const argv = { ...command.parse(pipe), session, command }\n    const target = argv.options['target'] = dialogues.map(d => d.id).join(',')\n    argv.source = `#${target} ${pipe}`\n    return command.execute(argv)\n  }\n\n  if (recursive !== false && !autoMerge) {\n    await app.parallel('dialogue/search', session, test, dialogues)\n  }\n\n  if (!original && !answer) {\n    if (!dialogues.length) return sendEmpty('.search.empty-all')\n    return sendResult('.search.result-all', app.dialogue.list(session, dialogues))\n  }\n\n  if (!options.regexp) {\n    const hint = options.regexp !== false ? session.text('.search.regexp-hint') : ''\n    if (!original) {\n      if (!dialogues.length) return sendEmpty('.search.empty-answer', hint)\n      const output = dialogues.map(d => `${formatPrefix(session, d)}${d.original}`)\n      return sendResult('.search.result-answer', output)\n    } else if (!answer) {\n      if (!dialogues.length) return sendEmpty('.search.empty-question', hint)\n      const output = formatAnswers(session, dialogues)\n      const state = app.getSessionState(session)\n      state.isSearch = true\n      state.test = test\n      state.dialogues = dialogues\n      const total = await getTotalWeight(app, state)\n      const epilog = dialogues.length > 1 ? session.text('.search.probability') + Math.min(total, 1).toFixed(3) : ''\n      return sendResult('.search.result-question', output, epilog)\n    } else {\n      if (!dialogues.length) return sendEmpty('.search.empty-dialogue', hint)\n      const output = [dialogues.map(d => d.id).join(', ')]\n      return sendResult('.search.result-dialogue', output)\n    }\n  }\n\n  let output: string[]\n  if (!autoMerge || question && answer) {\n    output = app.dialogue.list(session, dialogues)\n  } else {\n    const idMap: Dict<number[]> = {}\n    for (const dialogue of dialogues) {\n      const key = question ? dialogue.original : dialogue.answer\n      if (!idMap[key]) idMap[key] = []\n      idMap[key].push(dialogue.id)\n    }\n    const type = session.text('commands.teach.messages.entity.' + (question ? 'answer' : 'question'))\n    output = Object.keys(idMap).map((key) => {\n      const { length } = idMap[key]\n      return length <= mergeThreshold\n        ? `${key} (#${idMap[key].join(', #')})`\n        : `${key} (${session.text('.search.count', [length])}${type})`\n    })\n  }\n\n  if (!original) {\n    if (!dialogues.length) return sendEmpty('.search.empty-regexp-answer')\n    return sendResult('.search.result-regexp-answer', output)\n  } else if (!answer) {\n    if (!dialogues.length) return sendEmpty('.search.empty-regexp-question')\n    return sendResult('.search.result-regexp-question', output)\n  } else {\n    if (!dialogues.length) return sendEmpty('.search.empty-regexp-dialogue')\n    return sendResult('.search.result-regexp-dialogue', output)\n  }\n\n  function sendEmpty(path: string, hint?: string) {\n    return session.text(path, [original, answer, hint])\n  }\n\n  function sendResult(path: string, output: string[], suffix?: string) {\n    if (output.length <= itemsPerPage) {\n      output.unshift(session.text(path, [original, answer]))\n      if (suffix) output.push(suffix)\n    } else {\n      const pageCount = Math.ceil(output.length / itemsPerPage)\n      output = output.slice((page - 1) * itemsPerPage, page * itemsPerPage)\n      const hint = session.text('.search.page-hint', [page, pageCount])\n      output.unshift(session.text(path, [original, answer, hint]))\n      if (suffix) output.push(suffix)\n      output.push(session.text('.search.page-footer'))\n    }\n    return output.join('\\n')\n  }\n}\n", "import { Awaitable, Context, difference, observe, pick, sleep } from 'koishi'\nimport { Dialogue, OrderedList } from '.'\n\ndeclare module 'koishi' {\n  interface Events {\n    'dialogue/before-modify'(session: Dialogue.Session): Awaitable<void | string>\n    'dialogue/modify'(session: Dialogue.Session, dialogue: Dialogue): void\n    'dialogue/after-modify'(session: Dialogue.Session): void\n    'dialogue/before-detail'(session: Dialogue.Session): Awaitable<void>\n    'dialogue/detail'(dialogue: Dialogue, detail: OrderedList, session: Dialogue.Session): void\n  }\n}\n\ndeclare module '.' {\n  namespace Dialogue {\n    interface Config {\n      previewDelay?: number\n      maxPreviews?: number\n    }\n\n    interface Options {\n      target?: number[]\n    }\n  }\n}\n\nexport default function apply(ctx: Context) {\n  ctx.command('teach')\n    .option('action', '-r', { value: 'remove' })\n\n  ctx.on('dialogue/action', (session) => {\n    const { options } = session.argv\n    if (!options.target) return\n    return analyze(session)\n  }, true)\n\n  ctx.on('dialogue/action', (session) => {\n    return create(session)\n  })\n\n  ctx.before('dialogue/detail', async (session) => {\n    const { action, dialogues } = session.argv.options\n    if (action === 'modify') return\n    await ctx.parallel('dialogue/search', session, {}, dialogues)\n  })\n\n  ctx.on('dialogue/detail', ({ original, answer, flag }, detail, session) => {\n    const entity = session.text(`.entity.${flag & Dialogue.Flag.regexp ? 'regexp' : 'question'}`)\n    detail.add(session.text('.detail', [entity, original]), 1100)\n    detail.add(session.text('.detail', [session.text('.entity.answer'), answer]), 1000)\n  })\n}\n\nexport async function handleError(session: Dialogue.Session, callback: (session: Dialogue.Session) => Promise<string>) {\n  try {\n    return await callback(session)\n  } catch (err) {\n    const { action } = session.argv.options\n    session.app.logger('dialogue').warn(err)\n    return session.text('.unknown-error', [session.text(`.operation.${action}`)])\n  }\n}\n\nexport function prepareTargets(session: Dialogue.Session, dialogues?: Dialogue[]) {\n  const { options } = session.argv\n  dialogues ||= options.dialogues\n  const targets = dialogues.filter((dialogue) => {\n    return !session.app.bail('dialogue/permit', session, dialogue)\n  })\n  options.forbidden.unshift(...difference(dialogues, targets).map(d => d.id))\n  return targets.map(dialogue => observe(dialogue))\n}\n\nfunction prepareModifyOptions(session: Dialogue.Session) {\n  const { options } = session.argv\n  options.forbidden = []\n  options.updated = []\n  options.skipped = []\n}\n\nexport async function analyze(session: Dialogue.Session) {\n  const app = session.app\n  const { options, args } = session.argv\n  const { maxPreviews = 10, previewDelay = 500 } = app.dialogue.config\n  const { target, action } = options\n\n  if (!options.action && (Object.keys(options).length > 1 || args.length)) {\n    options.action = 'modify'\n  } else if (!options.action && target.length > maxPreviews) {\n    return session.text('.max-previews', [maxPreviews])\n  }\n\n  prepareModifyOptions(session)\n  const dialogues = options.dialogues = action === 'review' || action === 'revert'\n    ? Object.values(pick(app.dialogue.history, target)).filter(Boolean)\n    : await app.dialogue.get(target)\n  options.dialogueMap = Object.fromEntries(dialogues.map(d => [d.id, { ...d }]))\n\n  const actualIds = options.dialogues.map(d => d.id)\n  options.unknown = difference(target, actualIds)\n  await app.serial('dialogue/before-detail', session)\n\n  if (!options.action) {\n    if (options.unknown.length) {\n      await session.send(session.text(`.${options.action === 'review' ? 'revert' : 'modify'}-unknown`, [options.unknown.join(', ')]))\n    }\n    for (let index = 0; index < dialogues.length; index++) {\n      const type = session.text(`.entity.${options.action === 'review' ? 'history' : 'detail'}`)\n      const detail = new OrderedList()\n      detail.add(session.text('.detail-header', [dialogues[index].id, type]), Infinity)\n      app.emit('dialogue/detail', dialogues[index], detail, session)\n      if (index) await sleep(previewDelay)\n      await session.send(detail.toString())\n    }\n    return ''\n  }\n\n  return handleError(session, async () => {\n    const targets = prepareTargets(session)\n\n    if (action === 'revert') {\n      const message = targets.length ? await app.dialogue.revert(targets, session) : ''\n      return sendResult(session, message)\n    }\n\n    if (action === 'remove') {\n      let message = ''\n      if (targets.length) {\n        const editable = await app.dialogue.remove(targets, session)\n        message = session.text('.remove-success', [editable.join(', ')])\n      }\n      await app.serial('dialogue/after-modify', session)\n      return sendResult(session, message)\n    }\n\n    if (targets.length) {\n      const result = await app.serial('dialogue/before-modify', session)\n      if (typeof result === 'string') return result\n      for (const dialogue of targets) {\n        app.emit('dialogue/modify', session, dialogue)\n      }\n      await app.dialogue.update(targets, session)\n      await app.serial('dialogue/after-modify', session)\n    }\n\n    return sendResult(session)\n  })\n}\n\nexport async function create(session: Dialogue.Session) {\n  const { options, args: [question, answer] } = session.argv\n  const app = session.app\n  options.action = 'create'\n  options.unknown = []\n  prepareModifyOptions(session)\n  options.dialogues = await app.dialogue.get({ question, answer, regexp: false })\n  await app.serial('dialogue/before-detail', session)\n  const result = await app.serial('dialogue/before-modify', session)\n  if (typeof result === 'string') return result\n\n  if (options.dialogues.length) {\n    options.target = options.dialogues.map(d => d.id)\n    options.dialogueMap = Object.fromEntries(options.dialogues.map(d => [d.id, d]))\n    const targets = prepareTargets(session)\n    for (const dialogue of targets) {\n      app.emit('dialogue/modify', session, dialogue)\n    }\n    await app.dialogue.update(targets, session)\n    await app.serial('dialogue/after-modify', session)\n    return sendResult(session)\n  }\n\n  const dialogue = { flag: 0 } as Dialogue\n  if (app.bail('dialogue/permit', session, dialogue)) {\n    return session.text('.low-permission')\n  }\n\n  return handleError(session, async () => {\n    app.emit('dialogue/modify', session, dialogue)\n    const created = await app.database.create('dialogue', dialogue)\n    app.dialogue.addHistory(dialogue, 'create', session, false)\n    options.dialogues = [created]\n\n    await app.serial('dialogue/after-modify', session)\n    return sendResult(session, session.text('.create-success', [options.dialogues[0].id]))\n  })\n}\n\nexport function sendResult(session: Dialogue.Session, prolog?: string, epilog?: string) {\n  const { prefix } = session.app.dialogue.config\n  const { action, forbidden, unknown, skipped, updated, target } = session.argv.options\n  const output = []\n  if (prolog) output.push(prolog)\n  if (updated.length) {\n    if (action === 'create') {\n      output.push(session.text('.create-modified', [updated.join(', ')]))\n    } else {\n      output.push(session.text('.modify-success', [updated.join(', ')]))\n    }\n  }\n  if (skipped.length) {\n    if (action === 'create') {\n      output.push(session.text('.create-unchanged', [target.join(', '), prefix + skipped.join(',')]))\n    } else {\n      output.push(session.text('.unchanged', [skipped.join(', ')]))\n    }\n  }\n  if (forbidden.length) {\n    const operation = session.text('.operation.' + (action === 'create' ? 'modify' : action))\n    output.push(session.text('.permission-denied', [forbidden.join(', '), operation]))\n  }\n  if (unknown.length) {\n    output.push(session.text(`.${action === 'revert' ? 'revert' : 'modify'}-unknown`, [unknown.join(', ')]))\n  }\n  if (epilog) output.push(epilog)\n  return output.join('\\n')\n}\n", "import { Context, isInteger, Time } from 'koishi'\nimport { handleError } from './update'\n\ndeclare module '.' {\n  namespace Dialogue {\n    interface Options {\n      includeLast?: any\n      excludeLast?: any\n    }\n  }\n}\n\nexport default function apply(ctx: Context) {\n  ctx.command('teach')\n    .option('action', '-v', { value: 'review' })\n    .option('action', '-V', { value: 'revert' })\n    .option('includeLast', '-l [count]', { type: isIntegerOrInterval })\n    .option('excludeLast', '-L [count]', { type: isIntegerOrInterval })\n\n  ctx.on('dialogue/action', (session) => {\n    const { options } = session.argv\n    const { includeLast, excludeLast, action, target } = options\n    if (action !== 'review' && action !== 'revert' || target) return\n    const now = Date.now(), includeTime = Time.parseTime(includeLast), excludeTime = Time.parseTime(excludeLast)\n    const dialogues = Object.values(ctx.dialogue.history).filter((dialogue) => {\n      if (dialogue._operator !== session.userId) return\n      const offset = now - dialogue._timestamp\n      if (includeTime && offset >= includeTime) return\n      if (excludeTime && offset < excludeTime) return\n      return true\n    }).sort((d1, d2) => d2._timestamp - d1._timestamp).filter((_, index, temp) => {\n      if (!includeTime && includeLast && index >= +includeLast) return\n      if (!excludeTime && excludeLast && index < temp.length - +excludeLast) return\n      return true\n    })\n\n    if (!dialogues.length) return session.text('.no-history')\n    if (action === 'review') {\n      const output = dialogues.map((dialogue) => {\n        return session.app.dialogue.formatDialogue(session, dialogue)\n      })\n      output.unshift(session.text('.recent-history'))\n      return output.join('\\n')\n    }\n    return handleError(session, () => {\n      return session.app.dialogue.revert(dialogues, session)\n    })\n  }, true)\n\n  ctx.on('dialogue/abstract', ({ _type, _timestamp }, output, session) => {\n    if (!_type) return\n    output.unshift(`${session.text(`.operation.${_type}`)}-${Time.format(Date.now() - _timestamp)}`)\n  })\n\n  ctx.on('dialogue/detail', ({ _type, _timestamp }, detail, session) => {\n    if (!_type) return\n    detail.add(session.text('.review', [\n      session.text(`.operation.${_type}`),\n      Date.now() - _timestamp,\n    ]), -100)\n  })\n}\n\nfunction isIntegerOrInterval(source: string) {\n  const n = +source\n  if (n * 0 === 0) {\n    if (isInteger(n) && n > 0) return n\n    throw new Error()\n  } else {\n    if (Time.parseTime(source)) return source\n    throw new Error()\n  }\n}\n", "import { Context, defineProperty, Query, segment } from 'koishi'\nimport { Dialogue } from '.'\nimport { analyze, create } from './update'\nimport { distance } from 'fastest-levenshtein'\n\ndeclare module 'koishi' {\n  namespace Command {\n    interface Config {\n      noInterp?: boolean\n    }\n  }\n}\n\ndeclare module '.' {\n  namespace Dialogue {\n    interface Options {\n      ignoreHint?: boolean\n      regexp?: boolean\n      redirect?: string\n    }\n  }\n}\n\nexport default function apply(ctx: Context, config: Dialogue.Config) {\n  ctx.command('teach')\n    .option('ignoreHint', '-I')\n    .option('regexp', '-x', { authority: config.authority.regExp })\n    .option('regexp', '-X', { value: false })\n    .option('redirect', '=> <answer:string>')\n\n  ctx.before('dialogue/action', (session) => {\n    function parseArgument() {\n      if (!args.length) return ''\n      const arg = args.shift()\n      if (!arg || arg === '~' || arg === '～') return ''\n      return arg.trim()\n    }\n\n    const { options, args } = session.argv\n    let question = parseArgument()\n    const answer = options.redirect ? `$(dialogue ${options.redirect})` : parseArgument()\n    if (args.length) return session.text('.too-many-arguments')\n    try {\n      question = segment.transform(question, {\n        text: true,\n        face: true,\n        default() {\n          throw new Error()\n        },\n      })\n    } catch {\n      return session.text('.prohibited-cq-code')\n    }\n    const { original, parsed, appellative } = options.regexp\n      ? { original: segment.unescape(question), parsed: question, appellative: false }\n      : ctx.dialogue.stripQuestion(question)\n    defineProperty(options, 'appellative', appellative)\n    defineProperty(options, 'original', original)\n    args[0] = parsed\n    args[1] = answer\n    if (!args[0] && !args[1]) args.splice(0, Infinity)\n  })\n\n  function maybeAnswer(question: string, dialogues: Dialogue[]) {\n    return dialogues.every(dialogue => {\n      const dist = distance(question, dialogue.answer)\n      return dist < dialogue.answer.length / 2\n        && dist < distance(question, dialogue.question)\n    })\n  }\n\n  function maybeRegExp(question: string) {\n    return question.startsWith('^') || question.endsWith('$')\n  }\n\n  ctx.before('dialogue/modify', async (session) => {\n    const { options, args } = session.argv\n    const { ignoreHint, regexp, target, dialogues } = options\n    const [question, answer] = args\n\n    function applySuggestion(session: Dialogue.Session) {\n      return session.withScope('commands.teach.messages', () => {\n        return session.argv.options.target ? analyze(session) : create(session)\n      })\n    }\n\n    // the user may want to modify the answer but modified the question\n    if (target && !ignoreHint && question && !answer && maybeAnswer(question, dialogues)) {\n      const dispose = session.middleware(({ content }, next) => {\n        dispose()\n        content = content.trim()\n        if (content && content !== '.' && content !== '。') return next()\n        args[1] = options.original\n        args[0] = ''\n        return applySuggestion(session)\n      })\n      return session.text('.probably-modify-answer')\n    }\n\n    // if the question is likely to be a regular expression\n    // but the original dialogue is not in regexp mode\n    // prompt the user to add -x option\n    if (question && !regexp && maybeRegExp(question) && !ignoreHint && (!target || !dialogues.every(d => d.flag & Dialogue.Flag.regexp))) {\n      const dispose = session.middleware(({ content }, next) => {\n        dispose()\n        content = content.trim()\n        if (content && content !== '.' && content !== '。') return next()\n        options.regexp = true\n        return applySuggestion(session)\n      })\n      const operation = session.text('.operation', [target ? 'modify' : 'create'])\n      return session.text('.probably-regexp', [operation])\n    }\n\n    // check the syntax of the input regular expression\n    if (regexp || regexp !== false && question && dialogues.some(d => d.flag & Dialogue.Flag.regexp)) {\n      const questions = question ? [question] : dialogues.map(d => d.question)\n      try {\n        questions.forEach(q => new RegExp(q))\n      } catch (error) {\n        return session.text('.illegal-regexp')\n      }\n    }\n  })\n\n  ctx.before('dialogue/modify', async (session) => {\n    const { options, args } = session.argv\n    // missing question or answer when creating a dialogue\n    if (options.action === 'create' && !options.target && !(args[0] && args[1])) {\n      return session.text('.missing-question-or-answer')\n    }\n  })\n\n  ctx.on('dialogue/modify', (session, data) => {\n    const { args, options } = session.argv\n\n    if (args[1]) {\n      data.answer = args[1]\n    }\n\n    if (options.regexp !== undefined) {\n      data.flag = (data.flag & ~Dialogue.Flag.regexp) | (+options.regexp * Dialogue.Flag.regexp)\n    }\n\n    if (args[0]) {\n      data.question = args[0]\n      data.original = options.original\n    }\n  })\n\n  ctx.on('dialogue/detail', async (dialogue, detail, session) => {\n    if (dialogue._redirections?.length) {\n      detail.add([\n        session.text('.redirections'),\n        ...ctx.dialogue.list(session, dialogue._redirections),\n      ].join('\\n'), -1000)\n    }\n  })\n\n  ctx.before('command/execute', ({ command, session }) => {\n    if (command.config.noInterp && session._redirected) {\n      return session.text('.prohibited-command', [command.name])\n    }\n  })\n\n  ctx.before('dialogue/modify', async (session) => {\n    const { args } = session.argv\n    if (!args[1] || !ctx.assets) return\n    try {\n      args[1] = await ctx.assets.transform(args[1])\n    } catch (error) {\n      ctx.logger('teach').warn(error.message)\n      return session.text('.upload-failed')\n    }\n  })\n\n  ctx.on('dialogue/query', ({ regexp, answer, question, original }, query) => {\n    if (regexp) {\n      if (answer) query.answer = { $regex: new RegExp(answer, 'i') }\n      if (original) query.original = { $regex: new RegExp(original, 'i') }\n      return\n    }\n    if (answer) query.answer = answer\n    if (regexp === false) {\n      if (question) query.question = question\n    } else if (original) {\n      const $or: Query.Expr<Dialogue>[] = [{\n        flag: { $bitsAllSet: Dialogue.Flag.regexp },\n        original: { $regexFor: original },\n      }]\n      if (question) $or.push({ flag: { $bitsAllClear: Dialogue.Flag.regexp }, question })\n      query.$and.push({ $or })\n    }\n  })\n}\n", "import { Context } from 'koishi'\nimport { Dialogue } from '.'\n\ndeclare module '.' {\n  interface Dialogue {\n    probS: number\n    probA: number\n  }\n\n  namespace Dialogue {\n    interface Options {\n      probabilityStrict?: number\n      probabilityAppellative?: number\n    }\n  }\n}\n\ndeclare module './receiver' {\n  interface SessionState {\n    activated?: Record<number, number>\n  }\n}\n\nexport function isZeroToOne(source: string) {\n  const n = +source\n  if (n >= 0 && n <= 1) return n\n  throw new Error('commands.teach.messages.probability.zero-to-one')\n}\n\nexport default function probability(ctx: Context, config: Dialogue.Config) {\n  const { appellationTimeout = 20000 } = config\n\n  ctx.command('teach')\n    .option('probabilityStrict', '-p <prob>', { type: isZeroToOne })\n    .option('probabilityAppellative', '-P <prob>', { type: isZeroToOne })\n\n  ctx.on('dialogue/modify', (session, data) => {\n    const { options } = session.argv\n    if (options.action === 'create') {\n      data.probS = options.probabilityStrict ?? 1 - +options.appellative\n      data.probA = options.probabilityAppellative ?? +options.appellative\n    } else {\n      if (options.probabilityStrict !== undefined) {\n        data.probS = options.probabilityStrict\n      }\n      if (options.probabilityAppellative !== undefined) {\n        data.probA = options.probabilityAppellative\n      }\n    }\n  })\n\n  ctx.on('dialogue/state', (state) => {\n    state.activated = {}\n  })\n\n  ctx.on('dialogue/prepare', ({ test, userId, dialogues, activated }) => {\n    const hasNormal = dialogues.some(d => !(d.flag & Dialogue.Flag.regexp))\n    dialogues.forEach((dialogue) => {\n      if (hasNormal && (dialogue.flag & Dialogue.Flag.regexp)) {\n        // if there is a normal dialogue matched,\n        // all regexp dialogues will be ignored\n        dialogue._weight = 0\n      } else if (userId in activated) {\n        // if activated, take the maximum of the two probabilities\n        dialogue._weight = Math.max(dialogue.probS, dialogue.probA)\n      } else if (!test.appellative || !(dialogue.flag & Dialogue.Flag.regexp)) {\n        // if the dialogue is not in regexp mode,\n        // or the question is not appellative,\n        // the probability is based on appellation\n        dialogue._weight = test.appellative ? dialogue.probA : dialogue.probS\n      } else {\n        // 对于含有称呼的正则表达式，需要判断正则表达式是否使用了称呼\n        // 优先匹配概率更高的版本，如果概率相同则优先匹配 probA 的版本\n        // 这里匹配的结果会被存储下来，后面 receiver 用得着\n        const regexp = new RegExp(dialogue.question)\n        const queue = dialogue.probS >= dialogue.probA\n          ? [[test.original, dialogue.probS], [test.question, dialogue.probA]] as const\n          : [[test.question, dialogue.probA], [test.original, dialogue.probS]] as const\n        for (const [question, weight] of queue) {\n          dialogue._capture = regexp.exec(question)\n          dialogue._weight = weight\n          if (dialogue._capture) break\n        }\n      }\n    })\n  })\n\n  ctx.before('dialogue/send', ({ test, activated, userId }) => {\n    if (!test.activated) return\n    const time = activated[userId] = Date.now()\n    setTimeout(() => {\n      if (activated[userId] === time) {\n        delete activated[userId]\n      }\n    }, appellationTimeout)\n  })\n\n  ctx.on('dialogue/detail', (dialogue, detail, session) => {\n    const { probS, probA } = dialogue\n    if (probS < 1 || probA > 0) {\n      detail.add(session.text('.probability.detail', dialogue), 900)\n    }\n  })\n\n  ctx.on('dialogue/abstract', ({ probS, probA }, output) => {\n    if (probS < 1) output.push(`p=${probS}`)\n    if (probA > 0) output.push(`P=${probA}`)\n  })\n}\n"],
  "mappings": "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",
  "names": ["apply", "import_koishi", "import_koishi", "prefix", "import_koishi", "segment", "index", "name", "dialogues", "command", "sendResult", "output", "import_koishi", "apply", "dialogue", "import_koishi", "apply", "import_koishi", "apply", "session", "command", "Dialogue", "Flag", "apply"]
}
