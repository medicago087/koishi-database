declare type MatrixColumn<A extends any[], P extends any[] = []> = A extends [
    infer L,
    ...infer R
] ? [L extends [...P, infer E, ...any[]] ? E : never, ...MatrixColumn<R, P>] : [];
declare type MatrixRow<A extends any[], P extends any[] = []> = A extends [
    ...P,
    infer TargetRow,
    ...any[]
] ? TargetRow : [];
declare type MapAny<A extends any[]> = A extends [any, ...infer R] ? [any, ...MapAny<R>] : [];
declare type IsLongerOrEqual<A extends any[], B extends any[]> = A extends [
    ...MapAny<B>,
    ...any[]
] ? true : false;
declare type ShouldFinish<A extends any[], P extends any[], CP extends any[] = []> = IsLongerOrEqual<P, MatrixRow<A, CP>> extends true ? IsLongerOrEqual<CP, A> extends true ? true : ShouldFinish<A, P, [any, ...CP]> : false;
export declare type MatrixTwist<A extends any[], P extends any[] = []> = ShouldFinish<A, P> extends true ? [] : [MatrixColumn<A, P>, ...MatrixTwist<A, [any, ...P]>];
export declare type MatrixToUnionArray<A extends any[]> = A extends [
    infer L,
    ...infer R
] ? [L extends any[] ? L[number] : never, ...MatrixToUnionArray<R>] : [];
export {};
