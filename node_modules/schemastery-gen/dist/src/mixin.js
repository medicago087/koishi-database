"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mixin = exports.getOriginalClass = void 0;
const def_1 = require("./def");
const reflector_1 = require("./metadata/reflector");
const metadata_1 = require("./metadata/metadata");
const getOriginalClass = (cls) => {
    if (cls[def_1.OriginalClassSym]) {
        return cls[def_1.OriginalClassSym];
    }
    return cls;
};
exports.getOriginalClass = getOriginalClass;
function applyMixin(mixedClass, sourceClass, 
// eslint-disable-next-line @typescript-eslint/ban-types
visited = new Set()) {
    if (visited.has(sourceClass)) {
        return;
    }
    visited.add(sourceClass);
    Object.getOwnPropertyNames(sourceClass.prototype).forEach((name) => {
        if (mixedClass.prototype[name] == null) {
            mixedClass.prototype[name] = sourceClass.prototype[name];
        }
    });
    const schemaKeys = reflector_1.reflector.getArray('SchemaMetaKey', sourceClass);
    for (const name of schemaKeys) {
        const schemaMeta = reflector_1.reflector.get('SchemaMeta', sourceClass, name);
        if (schemaMeta == null) {
            continue;
        }
        const existingMetadata = reflector_1.reflector.get('SchemaMeta', mixedClass, name);
        if (existingMetadata != null) {
            continue;
        }
        metadata_1.Metadata.set('SchemaMeta', schemaMeta, 'SchemaMetaKey')(mixedClass.prototype, name);
        const transformerMeta = reflector_1.reflector.get('Transformer', sourceClass, name);
        if (transformerMeta) {
            metadata_1.Metadata.set('Transformer', transformerMeta)(mixedClass.prototype, name);
        }
    }
    const sourceParentClass = Object.getPrototypeOf(sourceClass);
    if (sourceParentClass?.prototype) {
        applyMixin(mixedClass, sourceParentClass, visited);
    }
}
// eslint-disable-next-line @typescript-eslint/ban-types
function Mixin(...classes) {
    const originalClasses = classes.map(exports.getOriginalClass);
    const mixedClass = class MixedClass {
    };
    // eslint-disable-next-line @typescript-eslint/ban-types
    const visited = new Set();
    originalClasses.forEach((cls) => applyMixin(mixedClass, cls, visited));
    return mixedClass;
}
exports.Mixin = Mixin;
//# sourceMappingURL=mixin.js.map