"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WrapDecoratorBuilder = exports.WithLockKey = exports.WithKey = void 0;
const metadata_1 = require("./metadata");
const utility_1 = require("./utility/utility");
const lodash_1 = __importDefault(require("lodash"));
const WithKey = (factory = (param) => param) => metadata_1.Metadata.param('AragamiWithKey', factory);
exports.WithKey = WithKey;
const WithLockKey = (factory = (param, obj, key) => param) => metadata_1.Metadata.param('AragamiWithLockKey', factory);
exports.WithLockKey = WithLockKey;
class WrapDecoratorBuilder {
    constructor(aragamiFactory) {
        this.aragamiFactory = aragamiFactory;
    }
    build() {
        const { aragamiFactory } = this;
        return {
            UseLock: () => (obj, key, des) => {
                const oldFun = des.value;
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                des.value = async function (...args) {
                    const aragami = await aragamiFactory(this);
                    const lockKeyParams = metadata_1.reflector.getArray('AragamiWithLockKey', this, key);
                    const keys = (await Promise.all(lodash_1.default.compact(lockKeyParams.map(async (fun, i) => {
                        if (!fun)
                            return;
                        const keyResult = (await fun(args[i], this, key));
                        return (0, utility_1.makeArray)(keyResult);
                    })))).flat();
                    return aragami.lock(keys, () => oldFun.apply(this, args));
                };
            },
            UseCache: (cl) => (obj, key, des) => {
                const oldFun = des.value;
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                des.value = async function (...args) {
                    const aragami = await aragamiFactory(this);
                    const wrapped = aragami.useCache(cl, () => oldFun.apply(this, args), async () => {
                        const withKeyParameters = metadata_1.reflector.getArray('AragamiWithKey', this, key);
                        const firstIndex = withKeyParameters.findIndex((f) => f);
                        if (firstIndex === -1) {
                            return;
                        }
                        return withKeyParameters[firstIndex](args[firstIndex], this, key);
                    });
                    return wrapped();
                };
            },
        };
    }
}
exports.WrapDecoratorBuilder = WrapDecoratorBuilder;
//# sourceMappingURL=wrappers.js.map