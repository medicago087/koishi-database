import { MayBeArray } from './utility/utility';
import { Awaitable, ClassType, TypedMethodDecorator } from './def';
import { Aragami } from './aragami';
export declare const WithKey: (factory?: (param: any, obj: any, key: string) => Awaitable<any>) => ParameterDecorator;
export declare const WithLockKey: (factory?: (param: any, obj: any, key: string) => Awaitable<MayBeArray<any>>) => ParameterDecorator;
export declare class WrapDecoratorBuilder {
    private aragamiFactory;
    constructor(aragamiFactory: (obj: any) => Awaitable<Aragami>);
    build(): {
        UseLock: () => TypedMethodDecorator<(...args: any[]) => Promise<any>>;
        UseCache: <T>(cl: ClassType<T>) => TypedMethodDecorator<(...args: any[]) => Promise<T>>;
    };
}
