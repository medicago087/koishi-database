import { RedisOptions } from 'ioredis';
import { Settings } from '@nanahira/redlock';
export declare type RedisDriverOptions = RedisOptions & {
    uri?: string;
    lock?: Settings & {
        duration?: number;
        prefix?: string;
    };
};
export interface AragamiOptions {
    redis?: RedisDriverOptions;
    defaultTTL?: number;
}
export declare type TypedMethodDecorator<F extends Function> = <T extends F>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;
export declare type AnyClass = new (...args: any[]) => any;
export declare type ClassType<T> = new (...args: any[]) => T;
export declare type Awaitable<T> = T | Promise<T>;
