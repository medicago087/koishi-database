"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisDriver = void 0;
const base_driver_1 = require("../base-driver");
const ioredis_1 = __importDefault(require("ioredis"));
const redlock_1 = __importDefault(require("@nanahira/redlock"));
class RedisDriver extends base_driver_1.BaseDriver {
    constructor(options) {
        super();
        this.options = options;
        if (options.uri) {
            this.redis = new ioredis_1.default(options.uri);
        }
        else {
            this.redis = new ioredis_1.default(options);
        }
        this.redlock = new redlock_1.default([this.redis], options.lock);
    }
    async get(baseKey, key) {
        return this.redis.getBuffer(this.usingKey(baseKey, key));
    }
    async set(baseKey, key, value, ttl) {
        const redisKey = this.usingKey(baseKey, key);
        if (ttl) {
            await this.redis.set(redisKey, value, 'PX', ttl);
        }
        else {
            await this.redis.set(redisKey, value);
        }
    }
    async del(baseKey, key) {
        return !!this.redis.del(this.usingKey(baseKey, key));
    }
    originalKeys(baseKey, prefix = '') {
        return this.redis.keys(this.usingKey(baseKey, `${prefix}*`));
    }
    async keys(baseKey, prefix) {
        const keys = await this.originalKeys(baseKey, prefix ?? '');
        return keys.map((key) => key.slice(baseKey.length + 1));
    }
    async clear(baseKey, prefix) {
        const keys = await this.originalKeys(baseKey, prefix);
        if (!keys.length) {
            return;
        }
        await this.redis.del(keys);
    }
    lock(keys, cb) {
        return this.redlock.using(keys.map((key) => `${this.options.lock?.prefix || '_lock'}:${key}`), this.options.lock?.duration || 5000, cb);
    }
    async destroy() {
        await this.redis.quit();
    }
}
exports.RedisDriver = RedisDriver;
//# sourceMappingURL=redis.js.map