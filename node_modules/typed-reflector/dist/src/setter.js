"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataSetter = void 0;
require("reflect-metadata");
const utility_1 = require("./utility/utility");
class MetadataSetter {
    getMetadataInDecorator(metaKey, target, key) {
        if (key) {
            return Reflect.getMetadata(metaKey, target, key);
        }
        else {
            return Reflect.getMetadata(metaKey, target);
        }
    }
    setMetadataInDecorator(metaKey, value, target, key) {
        if (key) {
            return Reflect.defineMetadata(metaKey, value, target, key);
        }
        else {
            return Reflect.defineMetadata(metaKey, value, target);
        }
    }
    transform(metadataKey, metadataValueFun, keysIndexMeta) {
        return (target, key) => {
            const targetClass = (0, utility_1.getClass)(target);
            const oldValue = this.getMetadataInDecorator(metadataKey, targetClass, key);
            const newValue = metadataValueFun(oldValue);
            this.setMetadataInDecorator(metadataKey, newValue, targetClass, key);
            if (keysIndexMeta) {
                const keysDec = this.appendUnique(keysIndexMeta, key);
                keysDec(targetClass);
            }
        };
    }
    set(metadataKey, metadataValue, keysIndexMeta) {
        return this.transform(metadataKey, () => metadataValue, keysIndexMeta);
    }
    append(metadataKey, metadataValue, keysIndexMeta) {
        return this.transform(metadataKey, (arr) => {
            const newArr = arr || [];
            newArr.push(metadataValue);
            return newArr;
        }, keysIndexMeta);
    }
    appendUnique(metadataKey, metadataValue, keysIndexMeta) {
        return this.transform(metadataKey, (arr) => {
            const newArr = arr || [];
            if (newArr.includes(metadataValue)) {
                return newArr;
            }
            newArr.push(metadataValue);
            return newArr;
        }, keysIndexMeta);
    }
    concat(metadataKey, metadataValue, keysIndexMeta) {
        return this.transform(metadataKey, (arr) => (arr || []).concat(metadataValue), keysIndexMeta);
    }
    param(metadataKey, metadataValue, keysIndexMeta) {
        return (obj, key, i) => {
            const dec = this.transform(metadataKey, (arr) => {
                const newArr = arr || [];
                newArr[i] = metadataValue;
                return newArr;
            }, keysIndexMeta);
            dec(obj, key);
        };
    }
}
exports.MetadataSetter = MetadataSetter;
//# sourceMappingURL=setter.js.map