import { Bot, Context, Schema } from '@satorijs/satori';
import { HttpServer } from '../http';
import { WsClient, WsServer } from '../ws';
import { QQGuildBot } from './qqguild';
import { BaseBot } from './base';
export * from './cqcode';
export * from './base';
export * from './qqguild';
export declare class OneBotBot<T extends OneBotBot.Config = OneBotBot.Config> extends BaseBot<T> {
    guildBot: QQGuildBot;
    constructor(ctx: Context, config: T);
    stop(): Promise<void>;
    initialize(): Promise<void>;
    setupGuildService(): Promise<void>;
    getChannel(channelId: string): Promise<import("@satorijs/core").Universal.Channel>;
    getGuild(guildId: string): Promise<import("@satorijs/core").Universal.Guild>;
    getGuildList(): Promise<import("@satorijs/core").Universal.Guild[]>;
    getGuildMember(guildId: string, userId: string): Promise<import("@satorijs/core").Universal.GuildMember>;
    getGuildMemberList(guildId: string): Promise<import("@satorijs/core").Universal.GuildMember[]>;
    kickGuildMember(guildId: string, userId: string, permanent?: boolean): Promise<void>;
    muteGuildMember(guildId: string, userId: string, duration: number): Promise<void>;
    muteChannel(channelId: string, guildId?: string, enable?: boolean): Promise<void>;
}
export declare namespace OneBotBot {
    interface QQGuildConfig extends Bot.Config {
    }
    interface BaseConfig extends Bot.Config {
        selfId: string;
        password?: string;
        token?: string;
        qqguild?: QQGuildConfig;
    }
    const QQGuildConfig: Schema<QQGuildConfig>;
    const BaseConfig: Schema<BaseConfig>;
    type Config = BaseConfig & (HttpServer.Config | WsServer.Config | WsClient.Config);
    const Config: Schema<Config>;
}
