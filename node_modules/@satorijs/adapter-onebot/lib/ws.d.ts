/// <reference types="ws" />
import { Adapter, Context, Quester, Schema, WebSocketLayer } from '@satorijs/satori';
import { OneBotBot } from './bot';
interface SharedConfig<T = 'ws' | 'ws-reverse'> {
    protocol: T;
    responseTimeout?: number;
}
export declare class WsClient extends Adapter.WsClient<OneBotBot> {
    protected accept: typeof accept;
    prepare(bot: OneBotBot<OneBotBot.BaseConfig & WsClient.Config>): import("ws").WebSocket;
}
export declare namespace WsClient {
    interface Config extends SharedConfig<'ws'>, Quester.Config, Adapter.WsClient.Config {
    }
    const Config: Schema<Config>;
}
export declare class WsServer extends Adapter.Server<OneBotBot<OneBotBot.BaseConfig & WsServer.Config>> {
    wsServer?: WebSocketLayer;
    constructor(ctx: Context, bot: OneBotBot);
    stop(bot: OneBotBot): Promise<void>;
}
export declare namespace WsServer {
    interface Config extends SharedConfig<'ws-reverse'> {
        path?: string;
    }
    const Config: Schema<Config>;
}
export declare function accept(bot: OneBotBot<OneBotBot.BaseConfig & SharedConfig>): void;
export {};
