{
  "version": 3,
  "sources": ["../src/index.ts", "../src/bot/index.ts", "../src/http.ts", "../src/utils.ts", "../src/types.ts", "../src/ws.ts", "../src/bot/base.ts", "../src/bot/message.ts", "../src/bot/qqguild.ts", "../src/bot/cqcode.ts"],
  "sourcesContent": ["import { OneBotBot } from './bot'\nimport * as OneBot from './utils'\n\nexport { OneBot }\n\nexport * from './bot'\nexport * from './http'\nexport * from './ws'\n\nexport default OneBotBot\n\ndeclare global {\n  namespace Satori {\n    interface Session {\n      onebot?: OneBot.Payload & OneBot.Internal\n    }\n\n    interface Events {\n      'onebot/message-reactions-updated': {}\n      'onebot/channel-updated': {}\n      'onebot/channel-created': {}\n      'onebot/channel-destroyed': {}\n    }\n  }\n}\n", "import { Bot, Context, noop, Schema } from '@satorijs/satori'\nimport { HttpServer } from '../http'\nimport { WsClient, WsServer } from '../ws'\nimport { QQGuildBot } from './qqguild'\nimport { BaseBot } from './base'\nimport * as OneBot from '../utils'\n\nexport * from './base'\nexport * from './cqcode'\nexport * from './message'\nexport * from './qqguild'\n\nexport class OneBotBot<T extends OneBotBot.Config = OneBotBot.Config> extends BaseBot<T> {\n  public guildBot: QQGuildBot\n\n  constructor(ctx: Context, config: T) {\n    super(ctx, config)\n    this.selfId = config.selfId\n    this.internal = new OneBot.Internal()\n    this.avatar = `http://q.qlogo.cn/headimg_dl?dst_uin=${config.selfId}&spec=640`\n\n    if (config.protocol === 'http') {\n      ctx.plugin(HttpServer, this)\n    } else if (config.protocol === 'ws') {\n      ctx.plugin(WsClient, this)\n    } else if (config.protocol === 'ws-reverse') {\n      ctx.plugin(WsServer, this)\n    }\n  }\n\n  async stop() {\n    if (this.guildBot) {\n      // QQGuild stub bot should also be removed\n      delete this.ctx.bots[this.guildBot.sid]\n    }\n    await super.stop()\n  }\n\n  async initialize() {\n    await Promise.all([\n      this.getSelf().then(data => Object.assign(this, data)),\n      this.setupGuildService().catch(noop),\n    ]).then(() => this.online(), error => this.offline(error))\n  }\n\n  async setupGuildService() {\n    const profile = await this.internal.getGuildServiceProfile()\n    // guild service is not supported in this account\n    if (!profile?.tiny_id || profile.tiny_id === '0') return\n    this.ctx.plugin(QQGuildBot, {\n      ...this.config.qqguild,\n      profile,\n      parent: this,\n      advanced: this.config.advanced,\n    })\n  }\n\n  async getChannel(channelId: string) {\n    const data = await this.internal.getGroupInfo(channelId)\n    return OneBot.adaptChannel(data)\n  }\n\n  async getGuild(guildId: string) {\n    const data = await this.internal.getGroupInfo(guildId)\n    return OneBot.adaptGuild(data)\n  }\n\n  async getGuildList() {\n    const data = await this.internal.getGroupList()\n    return data.map(OneBot.adaptGuild)\n  }\n\n  async getGuildMember(guildId: string, userId: string) {\n    const data = await this.internal.getGroupMemberInfo(guildId, userId)\n    return OneBot.adaptGuildMember(data)\n  }\n\n  async getGuildMemberList(guildId: string) {\n    const data = await this.internal.getGroupMemberList(guildId)\n    return data.map(OneBot.adaptGuildMember)\n  }\n\n  async kickGuildMember(guildId: string, userId: string, permanent?: boolean) {\n    return this.internal.setGroupKick(guildId, userId, permanent)\n  }\n\n  async muteGuildMember(guildId: string, userId: string, duration: number) {\n    return this.internal.setGroupBan(guildId, userId, duration / 1000)\n  }\n\n  async muteChannel(channelId: string, guildId?: string, enable?: boolean) {\n    return this.internal.setGroupWholeBan(channelId, enable)\n  }\n}\n\nOneBotBot.prototype.platform = 'onebot'\n\nexport namespace OneBotBot {\n  export interface QQGuildConfig extends Bot.Config {}\n\n  export const QQGuildConfig: Schema<QQGuildConfig> = Schema.object({\n    platform: Schema.string().default('qqguild').description('QQ 频道的平台名称'),\n  })\n\n  export interface BaseConfig extends BaseBot.Config {\n    selfId: string\n    password?: string\n    token?: string\n    qqguild?: QQGuildConfig\n  }\n\n  export const BaseConfig: Schema<BaseConfig> = Schema.object({\n    selfId: Schema.string().description('机器人的账号。').required(),\n    token: Schema.string().role('secret').description('发送信息时用于验证的字段，应与 OneBot 配置文件中的 `access_token` 保持一致。'),\n    protocol: Schema.union(['http', 'ws', 'ws-reverse']).description('选择要使用的协议。').default('ws-reverse'),\n    qqguild: QQGuildConfig.hidden(),\n  })\n\n  export type Config = BaseConfig & (HttpServer.Config | WsServer.Config | WsClient.Config)\n\n  export const Config: Schema<Config> = Schema.intersect([\n    BaseConfig,\n    Schema.union([\n      HttpServer.Config,\n      WsClient.Config,\n      WsServer.Config,\n    ]),\n    Schema.object({\n      advanced: BaseBot.AdvancedConfig,\n    }),\n  ])\n}\n", "import { Adapter, Context, Logger, Quester, Schema } from '@satorijs/satori'\nimport { OneBotBot } from './bot'\nimport { dispatchSession } from './utils'\nimport { createHmac } from 'crypto'\n\nconst logger = new Logger('onebot')\n\nexport class HttpServer extends Adapter.Server<OneBotBot> {\n  public bots: OneBotBot[]\n\n  async fork(ctx: Context, bot: OneBotBot<OneBotBot.Config & HttpServer.Config>) {\n    const config = bot.config\n    const { endpoint, token } = config\n    if (!endpoint) return\n\n    const http = ctx.http.extend(config).extend({\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Token ${token}`,\n      },\n    })\n\n    bot.internal._request = async (action, params) => {\n      return http.post('/' + action, params)\n    }\n\n    return bot.initialize()\n  }\n\n  async start(bot: OneBotBot<OneBotBot.Config & HttpServer.Config>) {\n    const { secret, path = '/onebot' } = bot.config\n    bot.ctx.router.post(path, (ctx) => {\n      if (secret) {\n        // no signature\n        const signature = ctx.headers['x-signature']\n        if (!signature) return ctx.status = 401\n\n        // invalid signature\n        const sig = createHmac('sha1', secret).update(ctx.request.rawBody).digest('hex')\n        if (signature !== `sha1=${sig}`) return ctx.status = 403\n      }\n\n      const selfId = ctx.headers['x-self-id'].toString()\n      const bot = this.bots.find(bot => bot.selfId === selfId)\n      if (!bot) return ctx.status = 403\n\n      logger.debug('receive %o', ctx.request.body)\n      dispatchSession(bot, ctx.request.body)\n    })\n  }\n\n  async stop() {\n    logger.debug('http server closing')\n  }\n}\n\nexport namespace HttpServer {\n  export interface Config extends Quester.Config {\n    protocol: 'http'\n    path?: string\n    secret?: string\n  }\n\n  export const Config: Schema<Config> = Schema.intersect([\n    Schema.object({\n      protocol: Schema.const('http' as const),\n      path: Schema.string().description('服务器监听的路径。').default('/onebot'),\n      secret: Schema.string().description('接收事件推送时用于验证的字段，应该与 OneBot 的 secret 配置保持一致。').role('secret'),\n    }).description('连接设置'),\n    Quester.createConfig(true),\n  ])\n}\n", "import { defineProperty, hyphenate, Logger, segment, Universal } from '@satorijs/satori'\nimport * as qface from 'qface'\nimport { CQCode, BaseBot } from './bot'\nimport * as OneBot from './types'\n\nexport * from './types'\n\nconst logger = new Logger('onebot')\n\nexport const adaptUser = (user: OneBot.AccountInfo): Universal.User => ({\n  userId: user.tiny_id || user.user_id.toString(),\n  avatar: user.user_id ? `http://q.qlogo.cn/headimg_dl?dst_uin=${user.user_id}&spec=640` : undefined,\n  username: user.nickname,\n})\n\nexport const adaptGuildMember = (user: OneBot.SenderInfo): Universal.GuildMember => ({\n  ...adaptUser(user),\n  nickname: user.card,\n  roles: [user.role],\n})\n\nexport const adaptQQGuildMemberInfo = (user: OneBot.GuildMemberInfo): Universal.GuildMember => ({\n  userId: user.tiny_id,\n  username: user.nickname,\n  nickname: user.nickname,\n  roles: user.role_name ? [user.role_name] : [],\n  isBot: user.role_name === '机器人',\n})\n\nexport const adaptQQGuildMemberProfile = (user: OneBot.GuildMemberProfile): Universal.GuildMember => ({\n  userId: user.tiny_id,\n  username: user.nickname,\n  nickname: user.nickname,\n  roles: user.roles?.map(r => r.role_name) || [],\n  isBot: user.roles?.some(r => r.role_name === '机器人'),\n})\n\nexport const adaptAuthor = (user: OneBot.SenderInfo, anonymous?: OneBot.AnonymousInfo): Universal.Author => ({\n  ...adaptUser(user),\n  nickname: anonymous?.name || user.card,\n  anonymous: anonymous?.flag,\n  roles: [user.role],\n})\n\nexport async function adaptMessage(bot: BaseBot, message: OneBot.Message, result: Universal.Message = {}) {\n  // basic properties\n  result.author = adaptAuthor(message.sender, message.anonymous)\n  result.userId = result.author.userId\n  result.messageId = message.message_id.toString()\n  result.timestamp = message.time * 1000\n  if (message.guild_id) {\n    result.guildId = message.guild_id\n    result.channelId = message.channel_id\n  } else if (message.group_id) {\n    result.guildId = result.channelId = message.group_id.toString()\n  } else {\n    result.channelId = 'private:' + result.author.userId\n  }\n\n  // message content\n  const chain = CQCode.parse(message.message)\n  if (bot.config.advanced.splitMixedContent) {\n    chain.forEach((item, index) => {\n      if (item.type !== 'image') return\n      const left = chain[index - 1]\n      if (left && left.type === 'text' && left.attrs.content.trimEnd() === left.attrs.content) {\n        left.attrs.content += ' '\n      }\n      const right = chain[index + 1]\n      if (right && right.type === 'text' && right.attrs.content.trimStart() === right.attrs.content) {\n        right.attrs.content = ' ' + right.attrs.content\n      }\n    })\n  }\n\n  result.elements = segment.transform(chain, {\n    at({ qq }) {\n      if (qq !== 'all') return segment.at(qq)\n      return segment('at', { type: 'all' })\n    },\n    face({ id }) {\n      return segment('face', { id, platform: bot.platform }, [\n        segment.image(qface.getUrl(id)),\n      ])\n    },\n  })\n  if (result.elements[0]?.type === 'reply') {\n    const reply = result.elements.shift()\n    result.quote = await bot.getMessage(result.channelId, reply.attrs.id).catch((error) => {\n      logger.warn(error)\n      return undefined\n    })\n  }\n\n  result.content = result.elements.join('')\n  return result\n}\n\nexport const adaptGuild = (info: OneBot.GroupInfo | OneBot.GuildBaseInfo): Universal.Guild => {\n  if ((info as OneBot.GuildBaseInfo).guild_id) {\n    const guild = info as OneBot.GuildBaseInfo\n    return {\n      guildId: guild.guild_id,\n      guildName: guild.guild_name,\n    }\n  } else {\n    const group = info as OneBot.GroupInfo\n    return {\n      guildId: group.group_id.toString(),\n      guildName: group.group_name,\n    }\n  }\n}\n\nexport const adaptChannel = (info: OneBot.GroupInfo | OneBot.ChannelInfo): Universal.Channel => {\n  if ((info as OneBot.ChannelInfo).channel_id) {\n    const channel = info as OneBot.ChannelInfo\n    return {\n      channelId: channel.channel_id.toString(),\n      channelName: channel.channel_name,\n    }\n  } else {\n    const group = info as OneBot.GroupInfo\n    return {\n      channelId: group.group_id.toString(),\n      channelName: group.group_name,\n    }\n  }\n}\n\nexport async function dispatchSession(bot: BaseBot, data: OneBot.Payload) {\n  if (data.self_tiny_id) {\n    // don't dispatch any guild message without guild initialization\n    bot = bot['guildBot']\n    if (!bot) return\n  }\n\n  const session = await adaptSession(bot, data)\n  if (!session) return\n  defineProperty(session, 'onebot', Object.create(bot.internal))\n  Object.assign(session.onebot, data)\n  bot.dispatch(session)\n}\n\nexport async function adaptSession(bot: BaseBot, data: OneBot.Payload) {\n  const session = bot.session()\n  session.selfId = data.self_tiny_id ? data.self_tiny_id : '' + data.self_id\n  session.type = data.post_type\n\n  if (data.post_type === 'message' || data.post_type === 'message_sent') {\n    await adaptMessage(bot, data, session)\n    if (data.post_type === 'message_sent' && !session.guildId) {\n      session.channelId = 'private:' + data.target_id\n    }\n    session.type = 'message'\n    session.subtype = data.message_type === 'guild' ? 'group' : data.message_type\n    session.subsubtype = data.message_type\n    return session\n  }\n\n  session.subtype = data.sub_type\n  if (data.user_id) session.userId = '' + data.user_id\n  if (data.group_id) session.guildId = session.channelId = '' + data.group_id\n  if (data.guild_id) session.guildId = '' + data.guild_id\n  if (data.channel_id) session.channelId = '' + data.channel_id\n  if (data.target_id) session.targetId = '' + data.target_id\n  if (data.operator_id) session.operatorId = '' + data.operator_id\n  if (data.message_id) session.messageId = '' + data.message_id\n\n  if (data.post_type === 'request') {\n    session.content = data.comment\n    session.messageId = data.flag\n    if (data.request_type === 'friend') {\n      session.type = 'friend-request'\n      session.channelId = `private:${session.userId}`\n    } else if (data.sub_type === 'add') {\n      session.type = 'guild-member-request'\n    } else {\n      session.type = 'guild-request'\n    }\n  } else if (data.post_type === 'notice') {\n    switch (data.notice_type) {\n      case 'group_recall':\n        session.type = 'message-deleted'\n        session.subtype = 'group'\n        session.subsubtype = 'group'\n        break\n      case 'friend_recall':\n        session.type = 'message-deleted'\n        session.subtype = 'private'\n        session.channelId = `private:${session.userId}`\n        session.subsubtype = 'private'\n        break\n      // from go-cqhttp source code, but not mentioned in official docs\n      case 'guild_channel_recall':\n        session.type = 'message-deleted'\n        session.subtype = 'guild'\n        session.subsubtype = 'guild'\n        break\n      case 'friend_add':\n        session.type = 'friend-added'\n        break\n      case 'group_upload':\n        session.type = 'guild-file-added'\n        break\n      case 'group_admin':\n        session.type = 'guild-member'\n        session.subtype = 'role'\n        break\n      case 'group_ban':\n        session.type = 'guild-member'\n        session.subtype = 'ban'\n        break\n      case 'group_decrease':\n        session.type = session.userId === session.selfId ? 'guild-deleted' : 'guild-member-deleted'\n        session.subtype = session.userId === session.operatorId ? 'active' : 'passive'\n        break\n      case 'group_increase':\n        session.type = session.userId === session.selfId ? 'guild-added' : 'guild-member-added'\n        session.subtype = session.userId === session.operatorId ? 'active' : 'passive'\n        break\n      case 'group_card':\n        session.type = 'guild-member'\n        session.subtype = 'nickname'\n        break\n      case 'notify':\n        session.type = 'notice'\n        session.subtype = hyphenate(data.sub_type) as any\n        if (session.subtype === 'poke') {\n          session.channelId ||= `private:${session.userId}`\n        } else if (session.subtype === 'honor') {\n          session.subsubtype = hyphenate(data.honor_type) as any\n        }\n        break\n      case 'message_reactions_updated':\n        session.type = 'onebot'\n        session.subtype = 'message-reactions-updated'\n        break\n      case 'channel_created':\n        session.type = 'onebot'\n        session.subtype = 'channel-created'\n        break\n      case 'channel_updated':\n        session.type = 'onebot'\n        session.subtype = 'channel-updated'\n        break\n      case 'channel_destroyed':\n        session.type = 'onebot'\n        session.subtype = 'channel-destroyed'\n        break\n      default: return\n    }\n  } else return\n\n  return session\n}\n", "import { camelize, Dict, Logger } from '@satorijs/satori'\nimport { CQCode } from './bot'\n\nexport interface Response {\n  status: string\n  retcode: number\n  data: any\n  echo?: number\n}\n\nexport interface MessageId {\n  message_id: number\n}\n\nexport interface AccountInfo {\n  user_id: number\n  tiny_id?: string\n  nickname: string\n}\n\nexport interface QidianAccountInfo {\n  master_id: number\n  ext_name: string\n  create_time: number\n}\n\nexport interface StrangerInfo extends AccountInfo {\n  sex: 'male' | 'female' | 'unknown'\n  age: number\n}\n\nexport interface TalkativeMemberInfo extends AccountInfo {\n  avatar: string\n  day_count: number\n}\n\nexport type GroupRole = 'member' | 'admin' | 'owner'\nexport type HonorType = 'talkative' | 'performer' | 'legend' | 'strong_newbie' | 'emotion'\n\nexport interface HonoredMemberInfo {\n  avatar: string\n  description: string\n}\n\nexport interface HonorInfo {\n  current_talkative: TalkativeMemberInfo\n  talkative_list: HonoredMemberInfo[]\n  performer_list: HonoredMemberInfo[]\n  legend_list: HonoredMemberInfo[]\n  strong_newbie_list: HonoredMemberInfo[]\n  emotion_list: HonoredMemberInfo[]\n}\n\nexport interface SenderInfo extends StrangerInfo {\n  area?: string\n  level?: string\n  title?: string\n  role?: GroupRole\n  card?: string\n}\n\nexport interface Message extends MessageId {\n  real_id?: number\n  time: number\n  message_seq: number\n  message_type: 'private' | 'group' | 'guild'\n  sender: SenderInfo\n  group_id?: number\n  guild_id?: string\n  channel_id?: string\n  message: string | CQCode[]\n  anonymous?: AnonymousInfo\n}\n\nexport interface AnonymousInfo {\n  id: number\n  name: string\n  flag: string\n}\n\nexport type RecordFormat = 'mp3' | 'amr' | 'wma' | 'm4a' | 'spx' | 'ogg' | 'wav' | 'flac'\nexport type DataDirectory = 'image' | 'record' | 'show' | 'bface'\n\nexport interface FriendInfo extends AccountInfo {\n  remark: string\n}\n\nexport interface UnidirectionalFriendInfo extends AccountInfo {\n  source: string\n}\n\nexport interface GroupBase {\n  group_id: number\n  group_name: string\n}\n\nexport interface GroupInfo extends GroupBase {\n  member_count: number\n  max_member_count: number\n}\n\nexport interface GroupMemberInfo extends SenderInfo {\n  card_changeable: boolean\n  group_id: number\n  join_time: number\n  last_sent_time: number\n  title_expire_time: number\n  unfriendly: boolean\n}\n\nexport interface Credentials {\n  cookies: string\n  csrf_token: number\n}\n\nexport interface ImageInfo {\n  file: string\n}\n\nexport interface RecordInfo {\n  file: string\n}\n\nexport interface VersionInfo {\n  app_name?: string\n  app_version?: string\n  app_full_name?: string\n  protocol_version?: string\n  coolq_edition?: 'air' | 'pro'\n  coolq_directory?: string\n  plugin_version?: string\n  plugin_build_number?: number\n  plugin_build_configuration?: 'debug' | 'release'\n  version?: string\n  go_cqhttp?: boolean\n  runtime_version?: string\n  runtime_os?: string\n  protocol?: string\n}\n\nexport interface ImageInfo {\n  size?: number\n  filename?: string\n  url?: string\n}\n\nexport interface ForwardMessage {\n  sender: AccountInfo\n  time: number\n  content: string\n}\n\nexport interface EssenceMessage extends MessageId {\n  sender_id: number\n  sender_nick: string\n  sender_time: number\n  operator_id: number\n  operator_nick: string\n  operator_time: number\n}\n\nexport interface VipInfo extends AccountInfo {\n  level: number\n  level_speed: number\n  vip_level: number\n  vip_growth_speed: number\n  vip_growth_total: string\n}\n\nexport interface GroupNotice {\n  notice_id: string\n  sender_id: number\n  publish_time: number\n  message: {\n    text: string\n    images: GroupNoticeImage[]\n  }\n}\n\nexport interface GroupNoticeImage {\n  height: string\n  width: string\n  id: string\n}\n\nexport interface Statistics {\n  packet_received: number\n  packet_sent: number\n  packet_lost: number\n  message_received: number\n  message_sent: number\n  disconnect_times: number\n  lost_times: number\n}\n\nexport interface StatusInfo {\n  app_initialized: boolean\n  app_enabled: boolean\n  plugins_good: boolean\n  app_good: boolean\n  online: boolean\n  good: boolean\n  stat: Statistics\n}\n\nexport interface TextDetection {\n  text: string\n  confidence: string\n  coordinates: any\n}\n\nexport interface OcrResult {\n  language: string\n  texts: TextDetection[]\n}\n\nexport interface GroupRequest extends GroupBase {\n  request_id: number\n  invitor_uin: number\n  invitor_nick: string\n  checked: boolean\n  actor: number\n}\n\nexport interface InvitedRequest extends GroupRequest { }\n\nexport interface JoinRequest extends GroupRequest {\n  message: string\n}\n\nexport interface GroupSystemMessageInfo {\n  invited_qequests: InvitedRequest[]\n  join_requests: JoinRequest[]\n}\n\nexport interface GroupFileSystemInfo {\n  file_count: number\n  limit_count: number\n  used_space: number\n  total_space: number\n}\n\nexport interface GroupFile {\n  file_id: string\n  file_name: string\n  busid: number\n  file_size: number\n  upload_time: number\n  dead_time: number\n  modify_time: number\n  download_time: number\n  uploader: number\n  uploader_name: string\n}\n\nexport interface GroupFolder {\n  folder_id: string\n  folder_name: string\n  create_time: number\n  creator: number\n  creator_name: string\n  total_file_count: number\n}\n\nexport interface GroupFileList {\n  files: GroupFile[]\n  folders: GroupFolder[]\n}\n\nexport interface AtAllRemain {\n  can_at_all: boolean\n  remain_at_all_count_for_group: number\n  remain_at_all_count_for_uin: number\n}\n\nexport interface Device {\n  app_id: number\n  device_name: string\n  device_kind: string\n}\n\nexport interface ModelVariant {\n  model_show: string\n  need_pay: boolean\n}\n\nexport enum SafetyLevel {\n  safe,\n  unknown,\n  danger,\n}\n\nexport interface GuildServiceProfile {\n  nickname: string\n  tiny_id: string\n  avatar_url: string\n}\n\nexport interface GuildBaseInfo {\n  guild_id: string\n  guild_name: string\n}\n\nexport interface GuildInfo extends GuildBaseInfo {\n  guild_display_id: string\n}\n\nexport interface GuildMeta extends GuildBaseInfo {\n  guild_profile: string\n  create_time: number\n  max_member_count: number\n  max_robot_count: number\n  max_admin_count: number\n  member_count: number\n  owner_id: string\n}\n\nexport interface ChannelInfo {\n  owner_guild_id: string\n  channel_id: string\n  channel_type: number\n  channel_name: string\n  create_time: number\n  creator_id: string\n  creator_tiny_id: string\n  talk_permission: number\n  visible_type: number\n  current_slow_mode: number\n  slow_modes: SlowModeInfo[]\n}\n\nexport interface SlowModeInfo {\n  slow_mode_key: number\n  slow_mode_text: string\n  speak_frequency: number\n  slow_mode_circle: number\n}\n\nexport interface GuildMemberListData {\n  members: GuildMemberInfo[]\n  finished: boolean\n  next_token: string\n}\n\nexport interface GuildMemberRole {\n  role_id: string\n  role_name: string\n}\n\nexport interface GuildMemberInfo extends GuildMemberRole {\n  tiny_id: string\n  title: string\n  nickname: string\n  role: number\n}\n\nexport interface GuildMemberProfile {\n  tiny_id: string\n  nickname: string\n  avatar_url: string\n  join_time: number\n  roles: GuildMemberRole[]\n}\n\nexport interface ReactionInfo {\n  emoji_id: string\n  emoji_index: number\n  emoji_type: number\n  emoji_name: string\n  count: number\n  clicked: boolean\n}\n\nexport interface Payload extends Message {\n  time: number\n  self_id: number\n  self_tiny_id?: string\n  post_type: string\n  request_type: string\n  notice_type: string\n  meta_event_type: string\n  honor_type: string\n  sub_type: string\n  message_id: number\n  user_id: number\n  target_id: number\n  operator_id: number\n  raw_message: string\n  font: number\n  comment: string\n  flag: string\n  old_info: ChannelInfo\n  new_info: ChannelInfo\n  channel_info: ChannelInfo\n  current_reactions: ReactionInfo[]\n}\n\ntype id = string | number\n\nexport interface Internal {\n  sendPrivateMsg(user_id: id, message: string | readonly CQCode[], auto_escape?: boolean): Promise<number>\n  sendPrivateMsgAsync(user_id: id, message: string | readonly CQCode[], auto_escape?: boolean): Promise<void>\n  sendGroupMsg(group_id: id, message: string | readonly CQCode[], auto_escape?: boolean): Promise<number>\n  sendGroupMsgAsync(group_id: id, message: string | readonly CQCode[], auto_escape?: boolean): Promise<void>\n  sendGroupForwardMsg(group_id: id, messages: readonly CQCode[]): Promise<number>\n  sendGroupForwardMsgAsync(group_id: id, messages: readonly CQCode[]): Promise<void>\n  sendPrivateForwardMsg(user_id: id, messages: readonly CQCode[]): Promise<number>\n  sendPrivateForwardMsgAsync(user_id: id, messages: readonly CQCode[]): Promise<void>\n  deleteMsg(message_id: id): Promise<void>\n  deleteMsgAsync(message_id: id): Promise<void>\n  setEssenceMsg(message_id: id): Promise<void>\n  setEssenceMsgAsync(message_id: id): Promise<void>\n  deleteEssenceMsg(message_id: id): Promise<void>\n  deleteEssenceMsgAsync(message_id: id): Promise<void>\n  markMsgAsRead(message_id: id): Promise<void>\n  sendLike(user_id: id, times?: number): Promise<void>\n  sendLikeAsync(user_id: id, times?: number): Promise<void>\n  sendGroupSign(group_id: id): Promise<void>\n  sendGroupSignAsync(group_id: id): Promise<void>\n  getMsg(message_id: id): Promise<Message>\n  getForwardMsg(message_id: id): Promise<ForwardMessage[]>\n  getEssenceMsgList(group_id: id): Promise<EssenceMessage[]>\n  getWordSlices(content: string): Promise<string[]>\n  ocrImage(image: string): Promise<OcrResult>\n  getGroupMsgHistory(group_id: id, message_seq?: number): Promise<{ messages: Message[] }>\n  deleteFriend(user_id: id): Promise<void>\n  deleteFriendAsync(user_id: id): Promise<void>\n  deleteUnidirectionalFriend(user_id: id): Promise<void>\n  deleteUnidirectionalFriendAsync(user_id: id): Promise<void>\n  setFriendAddRequest(flag: string, approve: boolean, remark?: string): Promise<void>\n  setFriendAddRequestAsync(flag: string, approve: boolean, remark?: string): Promise<void>\n  setGroupAddRequest(flag: string, subType: 'add' | 'invite', approve: boolean, reason?: string): Promise<void>\n  setGroupAddRequestAsync(flag: string, subType: 'add' | 'invite', approve: boolean, reason?: string): Promise<void>\n\n  setGroupKick(group_id: id, user_id: id, reject_add_request?: boolean): Promise<void>\n  setGroupKickAsync(group_id: id, user_id: id, reject_add_request?: boolean): Promise<void>\n  setGroupBan(group_id: id, user_id: id, duration?: number): Promise<void>\n  setGroupBanAsync(group_id: id, user_id: id, duration?: number): Promise<void>\n  setGroupWholeBan(group_id: id, enable?: boolean): Promise<void>\n  setGroupWholeBanAsync(group_id: id, enable?: boolean): Promise<void>\n  setGroupAdmin(group_id: id, user_id: id, enable?: boolean): Promise<void>\n  setGroupAdminAsync(group_id: id, user_id: id, enable?: boolean): Promise<void>\n  setGroupAnonymous(group_id: id, enable?: boolean): Promise<void>\n  setGroupAnonymousAsync(group_id: id, enable?: boolean): Promise<void>\n  setGroupCard(group_id: id, user_id: id, card?: string): Promise<void>\n  setGroupCardAsync(group_id: id, user_id: id, card?: string): Promise<void>\n  setGroupLeave(group_id: id, is_dismiss?: boolean): Promise<void>\n  setGroupLeaveAsync(group_id: id, is_dismiss?: boolean): Promise<void>\n  setGroupSpecialTitle(group_id: id, user_id: id, special_title?: string, duration?: number): Promise<void>\n  setGroupSpecialTitleAsync(group_id: id, user_id: id, special_title?: string, duration?: number): Promise<void>\n  setGroupName(group_id: id, name: string): Promise<void>\n  setGroupNameAsync(group_id: id, name: string): Promise<void>\n  setGroupPortrait(group_id: id, file: string, cache?: boolean): Promise<void>\n  setGroupPortraitAsync(group_id: id, file: string, cache?: boolean): Promise<void>\n  getGroupAtAllRemain(group_id: id): Promise<AtAllRemain>\n  sendGroupNotice(group_id: id, content: string): Promise<void>\n  sendGroupNoticeAsync(group_id: id, content: string): Promise<void>\n  getGroupNotice(group_id: id): Promise<GroupNotice[]>\n  delGroupNotice(group_id: id, notice_id: id): Promise<void>\n\n  getLoginInfo(): Promise<AccountInfo>\n  qidianGetLoginInfo(): Promise<QidianAccountInfo>\n  setQqProfile(nickname: string, company: string, email: string, college: string, personal_note: string): Promise<void>\n  setQqProfileAsync(nickname: string, company: string, email: string, college: string, personal_note: string): Promise<void>\n  getVipInfo(): Promise<VipInfo>\n  getStrangerInfo(user_id: id, no_cache?: boolean): Promise<StrangerInfo>\n  getFriendList(): Promise<FriendInfo[]>\n  getUnidirectionalFriendList(): Promise<UnidirectionalFriendInfo[]>\n  getGroupInfo(group_id: id, no_cache?: boolean): Promise<GroupInfo>\n  getGroupList(): Promise<GroupInfo[]>\n  getGroupMemberInfo(group_id: id, user_id: id, no_cache?: boolean): Promise<GroupMemberInfo>\n  getGroupMemberList(group_id: id, no_cache?: boolean): Promise<GroupMemberInfo[]>\n  getGroupHonorInfo(group_id: id, type: HonorType): Promise<HonorInfo>\n  getGroupSystemMsg(): Promise<GroupSystemMessageInfo>\n\n  // files\n  getGroupFileSystemInfo(group_id: id): Promise<GroupFileSystemInfo>\n  getGroupRootFiles(group_id: id): Promise<GroupFileList>\n  getGroupFilesByFolder(group_id: id, folder_id: string): Promise<GroupFileList>\n  getGroupFileUrl(group_id: id, file_id: string, busid: number): Promise<string>\n  downloadFile(url: string, headers?: string | readonly string[], thread_count?: number): Promise<string>\n  uploadPrivateFile(user_id: id, file: string, name: string): Promise<void>\n  uploadGroupFile(group_id: id, file: string, name: string, folder?: string): Promise<void>\n  createGroupFileFolder(group_id: id, folder_id: string, name: string): Promise<void>\n  deleteGroupFolder(group_id: id, folder_id: string): Promise<void>\n  deleteGroupFile(group_id: id, folder_id: string, file_id: string, busid: number): Promise<void>\n\n  getOnlineClients(no_cache?: boolean): Promise<Device[]>\n  checkUrlSafely(url: string): Promise<SafetyLevel>\n  getModelShow(model: string): Promise<ModelVariant[]>\n  setModelShow(model: string, model_show: string): Promise<void>\n\n  getCookies(domain?: string): Promise<string>\n  getCsrfToken(): Promise<number>\n  getCredentials(domain?: string): Promise<Credentials>\n  getRecord(file: string, out_format: RecordFormat, full_path?: boolean): Promise<RecordInfo>\n  getImage(file: string): Promise<ImageInfo>\n  canSendImage(): Promise<boolean>\n  canSendRecord(): Promise<boolean>\n  getStatus(): Promise<StatusInfo>\n  getVersionInfo(): Promise<VersionInfo>\n  setRestart(delay?: number): Promise<void>\n  reloadEventFilter(): Promise<void>\n\n  getGuildServiceProfile(): Promise<GuildServiceProfile>\n  getGuildList(): Promise<GuildInfo[]>\n  getGuildMetaByGuest(guild_id: id): Promise<GuildMeta>\n  getGuildChannelList(guild_id: id, no_cache: boolean): Promise<ChannelInfo[]>\n  getGuildMemberList(guild_id: id, next_token?: string): Promise<GuildMemberListData>\n  getGuildMemberProfile(guild_id: id, user_id: id): Promise<GuildMemberProfile>\n  sendGuildChannelMsg(guild_id: id, channel_id: id, message: string | readonly CQCode[]): Promise<number>\n}\n\nexport class TimeoutError extends Error {\n  constructor(args: Dict, url: string) {\n    super(`Timeout with request ${url}, args: ${JSON.stringify(args)}`)\n    Object.defineProperties(this, {\n      args: { value: args },\n      url: { value: url },\n    })\n  }\n}\n\nclass SenderError extends Error {\n  constructor(args: Dict, url: string, retcode: number) {\n    super(`Error with request ${url}, args: ${JSON.stringify(args)}, retcode: ${retcode}`)\n    Object.defineProperties(this, {\n      code: { value: retcode },\n      args: { value: args },\n      url: { value: url },\n    })\n  }\n}\n\nconst logger = new Logger('onebot')\n\nexport class Internal {\n  _request?(action: string, params: Dict): Promise<Response>\n\n  private async _get<T = any>(action: string, params = {}): Promise<T> {\n    logger.debug('[request] %s %o', action, params)\n    const response = await this._request(action, params)\n    logger.debug('[response] %o', response)\n    const { data, retcode } = response\n    if (retcode === 0) return data\n    throw new SenderError(params, action, retcode)\n  }\n\n  async setGroupAnonymousBan(group_id: string, meta: string | object, duration?: number) {\n    const args = { group_id, duration } as any\n    args[typeof meta === 'string' ? 'flag' : 'anonymous'] = meta\n    await this._get('set_group_anonymous_ban', args)\n  }\n\n  async setGroupAnonymousBanAsync(group_id: string, meta: string | object, duration?: number) {\n    const args = { group_id, duration } as any\n    args[typeof meta === 'string' ? 'flag' : 'anonymous'] = meta\n    await this._get('set_group_anonymous_ban_async', args)\n  }\n\n  private static asyncPrefixes = ['set', 'send', 'delete', 'create', 'upload']\n\n  private static prepareMethod(name: string) {\n    const prop = camelize(name.replace(/^[_.]/, ''))\n    const isAsync = Internal.asyncPrefixes.some(prefix => prop.startsWith(prefix))\n    return [prop, isAsync] as const\n  }\n\n  static define(name: string, ...params: string[]) {\n    const [prop, isAsync] = Internal.prepareMethod(name)\n    Internal.prototype[prop] = async function (this: Internal, ...args: any[]) {\n      const data = await this._get(name, Object.fromEntries(params.map((name, index) => [name, args[index]])))\n      if (!isAsync) return data\n    }\n    isAsync && (Internal.prototype[prop + 'Async'] = async function (this: Internal, ...args: any[]) {\n      await this._get(name + '_async', Object.fromEntries(params.map((name, index) => [name, args[index]])))\n    })\n  }\n\n  static defineExtract(name: string, key: string, ...params: string[]) {\n    const [prop, isAsync] = Internal.prepareMethod(name)\n    Internal.prototype[prop] = async function (this: Internal, ...args: any[]) {\n      const data = await this._get(name, Object.fromEntries(params.map((name, index) => [name, args[index]])))\n      return data[key]\n    }\n    isAsync && (Internal.prototype[prop + 'Async'] = async function (this: Internal, ...args: any[]) {\n      await this._get(name + '_async', Object.fromEntries(params.map((name, index) => [name, args[index]])))\n    })\n  }\n}\n\n// messages\nInternal.defineExtract('send_private_msg', 'message_id', 'user_id', 'message', 'auto_escape')\nInternal.defineExtract('send_group_msg', 'message_id', 'group_id', 'message', 'auto_escape')\nInternal.defineExtract('send_group_forward_msg', 'message_id', 'group_id', 'messages')\nInternal.defineExtract('send_private_forward_msg', 'message_id', 'user_id', 'messages')\nInternal.define('delete_msg', 'message_id')\nInternal.define('mark_msg_as_read', 'message_id')\nInternal.define('set_essence_msg', 'message_id')\nInternal.define('delete_essence_msg', 'message_id')\nInternal.define('send_group_sign', 'group_id')\nInternal.define('send_like', 'user_id', 'times')\nInternal.define('get_msg', 'message_id')\nInternal.define('get_essence_msg_list', 'group_id')\nInternal.define('ocr_image', 'image')\nInternal.defineExtract('get_forward_msg', 'messages', 'message_id')\nInternal.defineExtract('.get_word_slices', 'slices', 'content')\nInternal.define('get_group_msg_history', 'group_id', 'message_seq')\nInternal.define('set_friend_add_request', 'flag', 'approve', 'remark')\nInternal.define('set_group_add_request', 'flag', 'sub_type', 'approve', 'reason')\nInternal.defineExtract('_get_model_show', 'variants', 'model')\nInternal.define('_set_model_show', 'model', 'model_show')\n\n// group operations\nInternal.define('set_group_kick', 'group_id', 'user_id', 'reject_add_request')\nInternal.define('set_group_ban', 'group_id', 'user_id', 'duration')\nInternal.define('set_group_whole_ban', 'group_id', 'enable')\nInternal.define('set_group_admin', 'group_id', 'user_id', 'enable')\nInternal.define('set_group_anonymous', 'group_id', 'enable')\nInternal.define('set_group_card', 'group_id', 'user_id', 'card')\nInternal.define('set_group_leave', 'group_id', 'is_dismiss')\nInternal.define('set_group_special_title', 'group_id', 'user_id', 'special_title', 'duration')\nInternal.define('set_group_name', 'group_id', 'group_name')\nInternal.define('set_group_portrait', 'group_id', 'file', 'cache')\nInternal.define('_send_group_notice', 'group_id', 'content')\nInternal.define('_get_group_notice', 'group_id')\nInternal.define('_del_group_notice', 'group_id', 'notice_id')\nInternal.define('get_group_at_all_remain', 'group_id')\n\n// accounts\nInternal.define('get_login_info')\nInternal.define('qidian_get_login_info')\nInternal.define('set_qq_profile', 'nickname', 'company', 'email', 'college', 'personal_note')\nInternal.define('get_stranger_info', 'user_id', 'no_cache')\nInternal.define('_get_vip_info', 'user_id')\nInternal.define('get_friend_list')\nInternal.define('get_unidirectional_friend_list')\nInternal.define('delete_friend', 'user_id')\nInternal.define('delete_unidirectional_friend', 'user_id')\n\nInternal.define('get_group_info', 'group_id', 'no_cache')\nInternal.define('get_group_list')\nInternal.define('get_group_member_info', 'group_id', 'user_id', 'no_cache')\nInternal.define('get_group_member_list', 'group_id')\nInternal.define('get_group_honor_info', 'group_id', 'type')\nInternal.define('get_group_system_msg')\nInternal.define('get_group_file_system_info', 'group_id')\nInternal.define('get_group_root_files', 'group_id')\nInternal.define('get_group_files_by_folder', 'group_id', 'folder_id')\nInternal.define('upload_private_file', 'user_id', 'file', 'name')\nInternal.define('upload_group_file', 'group_id', 'file', 'name', 'folder')\nInternal.define('create_group_file_folder', 'group_id', 'folder_id', 'name')\nInternal.define('delete_group_folder', 'group_id', 'folder_id')\nInternal.define('delete_group_file', 'group_id', 'folder_id', 'file_id', 'busid')\nInternal.defineExtract('get_group_file_url', 'url', 'group_id', 'file_id', 'busid')\nInternal.defineExtract('download_file', 'file', 'url', 'headers', 'thread_count')\nInternal.defineExtract('get_online_clients', 'clients', 'no_cache')\nInternal.defineExtract('check_url_safely', 'level', 'url')\n\nInternal.defineExtract('get_cookies', 'cookies', 'domain')\nInternal.defineExtract('get_csrf_token', 'token')\nInternal.define('get_credentials', 'domain')\nInternal.define('get_record', 'file', 'out_format', 'full_path')\nInternal.define('get_image', 'file')\nInternal.defineExtract('can_send_image', 'yes')\nInternal.defineExtract('can_send_record', 'yes')\nInternal.define('get_status')\nInternal.define('get_version_info')\nInternal.define('set_restart', 'delay')\nInternal.define('reload_event_filter')\n\nInternal.define('get_guild_service_profile')\nInternal.define('get_guild_list')\nInternal.define('get_guild_meta_by_guest', 'guild_id')\nInternal.define('get_guild_channel_list', 'guild_id', 'no_cache')\nInternal.define('get_guild_member_list', 'guild_id', 'next_token')\nInternal.define('get_guild_member_profile', 'guild_id', 'user_id')\nInternal.defineExtract('send_guild_channel_msg', 'message_id', 'guild_id', 'channel_id', 'message')\n", "import { Adapter, Context, Logger, Quester, Schema, Time, WebSocketLayer } from '@satorijs/satori'\nimport { OneBotBot } from './bot'\nimport { dispatchSession, Response, TimeoutError } from './utils'\n\nconst logger = new Logger('onebot')\n\ninterface SharedConfig<T = 'ws' | 'ws-reverse'> {\n  protocol: T\n  responseTimeout?: number\n}\n\nexport class WsClient extends Adapter.WsClient<OneBotBot> {\n  protected accept = accept\n\n  prepare(bot: OneBotBot<OneBotBot.BaseConfig & WsClient.Config>) {\n    const { token, endpoint } = bot.config\n    const http = this.ctx.http.extend(bot.config)\n    if (token) http.config.headers.Authorization = `Bearer ${token}`\n    return http.ws(endpoint)\n  }\n}\n\nexport namespace WsClient {\n  export interface Config extends SharedConfig<'ws'>, Quester.Config, Adapter.WsClient.Config {}\n\n  export const Config: Schema<Config> = Schema.intersect([\n    Schema.object({\n      protocol: Schema.const('ws' as const),\n      responseTimeout: Schema.natural().role('time').default(Time.minute).description('等待响应的时间 (单位为毫秒)。'),\n    }).description('连接设置'),\n    Quester.createConfig(true),\n    Adapter.WsClient.Config,\n  ])\n}\n\nexport class WsServer extends Adapter.Server<OneBotBot<OneBotBot.BaseConfig & WsServer.Config>> {\n  public wsServer?: WebSocketLayer\n\n  constructor(ctx: Context, bot: OneBotBot) {\n    super()\n\n    const { path = '/onebot' } = bot.config as WsServer.Config\n    this.wsServer = ctx.router.ws(path, (socket, { headers }) => {\n      logger.debug('connected with', headers)\n      if (headers['x-client-role'] !== 'Universal') {\n        return socket.close(1008, 'invalid x-client-role')\n      }\n      const selfId = headers['x-self-id'].toString()\n      const bot = this.bots.find(bot => bot.selfId === selfId)\n      if (!bot) return socket.close(1008, 'invalid x-self-id')\n\n      bot.socket = socket\n      accept(bot)\n    })\n\n    ctx.on('dispose', () => {\n      logger.debug('ws server closing')\n      this.wsServer.close()\n    })\n  }\n\n  async stop(bot: OneBotBot) {\n    bot.socket?.close()\n    bot.socket = null\n  }\n}\n\nexport namespace WsServer {\n  export interface Config extends SharedConfig<'ws-reverse'> {\n    path?: string\n  }\n\n  export const Config: Schema<Config> = Schema.object({\n    protocol: Schema.const('ws-reverse' as const),\n    path: Schema.string().description('服务器监听的路径。').default('/onebot'),\n    responseTimeout: Schema.natural().role('time').default(Time.minute).description('等待响应的时间 (单位为毫秒)。'),\n  }).description('连接设置')\n}\n\nlet counter = 0\nconst listeners: Record<number, (response: Response) => void> = {}\n\nexport function accept(bot: OneBotBot<OneBotBot.BaseConfig & SharedConfig>) {\n  bot.socket.on('message', (data) => {\n    let parsed: any\n    try {\n      parsed = JSON.parse(data.toString())\n    } catch (error) {\n      return logger.warn('cannot parse message', data)\n    }\n\n    if ('post_type' in parsed) {\n      logger.debug('receive %o', parsed)\n      dispatchSession(bot, parsed)\n    } else if (parsed.echo in listeners) {\n      listeners[parsed.echo](parsed)\n      delete listeners[parsed.echo]\n    }\n  })\n\n  bot.socket.on('close', () => {\n    delete bot.internal._request\n  })\n\n  bot.internal._request = (action, params) => {\n    const data = { action, params, echo: ++counter }\n    data.echo = ++counter\n    return new Promise((resolve, reject) => {\n      listeners[data.echo] = resolve\n      setTimeout(() => {\n        delete listeners[data.echo]\n        reject(new TimeoutError(params, action))\n      }, bot.config.responseTimeout)\n      bot.socket.send(JSON.stringify(data), (error) => {\n        if (error) reject(error)\n      })\n    })\n  }\n\n  bot.initialize()\n}\n", "import { Bot, Fragment, Schema } from '@satorijs/satori'\nimport * as OneBot from '../utils'\nimport { OneBotMessenger } from './message'\n\nexport class BaseBot<T extends BaseBot.Config = BaseBot.Config> extends Bot<T> {\n  public parent?: BaseBot\n  public internal: OneBot.Internal\n\n  sendMessage(channelId: string, fragment: Fragment, guildId?: string) {\n    if (!this.parent && !channelId.startsWith('private:')) {\n      guildId = channelId\n    }\n    return new OneBotMessenger(this, channelId, guildId).send(fragment)\n  }\n\n  sendPrivateMessage(userId: string, fragment: Fragment) {\n    return this.sendMessage('private:' + userId, fragment)\n  }\n\n  async getMessage(channelId: string, messageId: string) {\n    const data = await this.internal.getMsg(messageId)\n    return await OneBot.adaptMessage(this, data)\n  }\n\n  async deleteMessage(channelId: string, messageId: string) {\n    await this.internal.deleteMsg(messageId)\n  }\n\n  async getSelf() {\n    const data = await this.internal.getLoginInfo()\n    return OneBot.adaptUser(data)\n  }\n\n  async getUser(userId: string) {\n    const data = await this.internal.getStrangerInfo(userId)\n    return OneBot.adaptUser(data)\n  }\n\n  async getFriendList() {\n    const data = await this.internal.getFriendList()\n    return data.map(OneBot.adaptUser)\n  }\n\n  async handleFriendRequest(messageId: string, approve: boolean, comment?: string) {\n    await this.internal.setFriendAddRequest(messageId, approve, comment)\n  }\n\n  async handleGuildRequest(messageId: string, approve: boolean, comment?: string) {\n    await this.internal.setGroupAddRequest(messageId, 'invite', approve, comment)\n  }\n\n  async handleGuildMemberRequest(messageId: string, approve: boolean, comment?: string) {\n    await this.internal.setGroupAddRequest(messageId, 'add', approve, comment)\n  }\n\n  async deleteFriend(userId: string) {\n    await this.internal.deleteFriend(userId)\n  }\n\n  async getMessageList(channelId: string, before?: string) {\n    // include `before` message\n    let list: OneBot.Message[]\n    if (before) {\n      const msg = await this.internal.getMsg(before)\n      if (msg?.message_seq) {\n        list = (await this.internal.getGroupMsgHistory(Number(channelId), msg.message_seq)).messages\n      }\n    } else {\n      list = (await this.internal.getGroupMsgHistory(Number(channelId))).messages\n    }\n\n    // 从旧到新\n    return await Promise.all(list.map(item => OneBot.adaptMessage(this, item)))\n  }\n}\n\nexport namespace BaseBot {\n  export interface Config extends Bot.Config {\n    advanced?: AdvancedConfig\n  }\n\n  export interface AdvancedConfig {\n    splitMixedContent?: boolean\n  }\n\n  export const AdvancedConfig: Schema<AdvancedConfig> = Schema.object({\n    splitMixedContent: Schema.boolean().description('是否自动在混合内容间插入空格。').default(true),\n  }).description('高级设置')\n}\n", "import { Messenger, pick, segment, Universal } from '@satorijs/satori'\nimport { BaseBot } from './base'\nimport { CQCode } from './cqcode'\n\nclass State {\n  author: Partial<Universal.Author> = {}\n  children: CQCode[] = []\n\n  constructor(public type: 'message' | 'forward' | 'reply') {}\n}\n\nexport class OneBotMessenger extends Messenger<BaseBot> {\n  stack: State[] = [new State('message')]\n  children: CQCode[] = []\n\n  async forward() {\n    if (!this.stack[0].children.length) return\n    const session = this.bot.session(this.session)\n    session.messageId = this.guildId\n      ? '' + await this.bot.internal.sendGroupForwardMsg(this.guildId, this.stack[0].children)\n      : '' + await this.bot.internal.sendPrivateForwardMsg(this.channelId.slice(8), this.stack[0].children)\n    session.app.emit(session, 'send', session)\n    this.results.push(session)\n  }\n\n  async flush() {\n    // trim start\n    while (true) {\n      const first = this.children[0]\n      if (first?.type !== 'text') break\n      first.data.text = first.data.text.trimStart()\n      if (first.data.text) break\n      this.children.shift()\n    }\n\n    // trim end\n    while (true) {\n      const last = this.children[this.children.length - 1]\n      if (last?.type !== 'text') break\n      last.data.text = last.data.text.trimEnd()\n      if (last.data.text) break\n      this.children.pop()\n    }\n\n    // flush\n    if (!this.children.length) return\n    const { type, author } = this.stack[0]\n    if (type === 'forward') {\n      this.stack[1].children.push({\n        type: 'node',\n        data: {\n          name: author.nickname || author.username || this.bot.nickname || this.bot.username,\n          uin: author.userId || this.bot.userId,\n          content: this.children as any,\n        },\n      })\n      this.children = []\n      return\n    }\n\n    const session = this.bot.session(this.session)\n    session.messageId = this.bot.parent\n      ? '' + await this.bot.internal.sendGuildChannelMsg(this.guildId, this.channelId, this.children)\n      : this.guildId\n        ? '' + await this.bot.internal.sendGroupMsg(this.guildId, this.children)\n        : '' + await this.bot.internal.sendPrivateMsg(this.channelId.slice(8), this.children)\n    session.app.emit(session, 'send', session)\n    this.results.push(session)\n    this.children = []\n  }\n\n  private text(text: string) {\n    this.children.push({ type: 'text', data: { text } })\n  }\n\n  async visit(element: segment) {\n    let { type, attrs, children } = element\n    if (type === 'text') {\n      this.text(attrs.content)\n    } else if (type === 'p') {\n      await this.render(children)\n      this.text('\\n')\n    } else if (type === 'at') {\n      if (attrs.type === 'all') {\n        this.children.push({ type: 'at', data: { qq: 'all' } })\n      } else {\n        this.children.push({ type: 'at', data: { qq: attrs.id, name: attrs.name } })\n      }\n    } else if (type === 'sharp') {\n      if (attrs.id) this.text(attrs.id)\n    } else if (type === 'face') {\n      if (attrs.platform && attrs.platform !== this.bot.platform) {\n        await this.render(children)\n      } else {\n        this.children.push({ type: 'face', data: { id: attrs.id } })\n      }\n    } else if (type === 'a') {\n      await this.render(children)\n      if (attrs.href) this.text(` (${attrs.href}) `)\n    } else if (['video', 'audio', 'image'].includes(type)) {\n      if (type === 'audio') type = 'record'\n      attrs = { ...attrs }\n      attrs.file = attrs.url\n      delete attrs.url\n      const cap = /^data:([\\w/-]+);base64,/.exec(attrs.file)\n      if (cap) attrs.file = 'base64://' + attrs.file.slice(cap[0].length)\n      this.children.push({ type, data: attrs })\n    } else if (type === 'onebot:music') {\n      await this.flush()\n      this.children.push({ type: 'music', data: attrs })\n    } else if (type === 'onebot:tts') {\n      await this.flush()\n      this.children.push({ type: 'tts', data: attrs })\n    } else if (type === 'onebot:poke') {\n      await this.flush()\n      this.children.push({ type: 'poke', data: attrs })\n    } else if (type === 'onebot:gift') {\n      await this.flush()\n      this.children.push({ type: 'gift', data: attrs })\n    } else if (type === 'author') {\n      Object.assign(this.stack[0].author, attrs)\n    } else if (type === 'figure' && !this.bot.parent) {\n      await this.flush()\n      this.stack.unshift(new State('forward'))\n      await this.render(children)\n      await this.flush()\n      this.stack.shift()\n      await this.forward()\n    } else if (type === 'figure') {\n      await this.render(children)\n      await this.flush()\n    } else if (type === 'quote') {\n      await this.flush()\n      this.children.push({ type: 'reply', data: attrs })\n    } else if (type === 'message') {\n      await this.flush()\n      // qqguild does not support forward messages\n      if ('forward' in attrs && !this.bot.parent) {\n        this.stack.unshift(new State('forward'))\n        await this.render(children)\n        await this.flush()\n        this.stack.shift()\n        await this.forward()\n      } else {\n        Object.assign(this.stack[0].author, pick(attrs, ['userId', 'username', 'nickname', 'avatar']))\n        await this.render(children)\n        await this.flush()\n      }\n    } else {\n      await this.render(children)\n    }\n  }\n}\n", "import { Bot, Context, Universal } from '@satorijs/satori'\nimport { BaseBot } from './base'\nimport { OneBotBot } from '.'\nimport * as OneBot from '../utils'\n\nexport namespace QQGuildBot {\n  export interface Config extends Bot.Config {\n    parent: OneBotBot\n    profile: OneBot.GuildServiceProfile\n  }\n}\n\nexport class QQGuildBot extends BaseBot {\n  parent: OneBotBot\n  hidden = true\n\n  constructor(ctx: Context, config: QQGuildBot.Config) {\n    super(ctx, config)\n    this.parent = config.parent\n    this.internal = config.parent.internal\n    this.selfId = config.profile.tiny_id\n    this.avatar = config.profile.avatar_url\n    this.username = config.profile.nickname\n    this.parent.guildBot = this\n  }\n\n  get status() {\n    return this.parent.status\n  }\n\n  set status(status) {\n    this.parent.status = status\n  }\n\n  async start() {\n    await this.ctx.parallel('bot-connect', this)\n  }\n\n  async stop() {\n    // Don't stop this bot twice\n    if (!this.parent) return\n    // prevent circular reference and use this as already disposed\n    this.parent = undefined\n    await this.ctx.parallel('bot-disconnect', this)\n  }\n\n  async getChannel(channelId: string, guildId?: string) {\n    const channels = await this.getChannelList(guildId)\n    return channels.find((channel) => channel.channelId === channelId)\n  }\n\n  async getChannelList(guildId: string) {\n    const data = await this.internal.getGuildChannelList(guildId, false)\n    return (data || []).map(OneBot.adaptChannel)\n  }\n\n  async getGuild(guildId: string) {\n    const data = await this.internal.getGuildMetaByGuest(guildId)\n    return OneBot.adaptGuild(data)\n  }\n\n  async getGuildList() {\n    const data = await this.internal.getGuildList()\n    return data.map(OneBot.adaptGuild)\n  }\n\n  async getGuildMember(guildId: string, userId: string) {\n    const profile = await this.internal.getGuildMemberProfile(guildId, userId)\n    return OneBot.adaptQQGuildMemberProfile(profile)\n  }\n\n  async getGuildMemberList(guildId: string) {\n    let nextToken: string | undefined\n    let list: Universal.GuildMember[] = []\n    while (true) {\n      const data = await this.internal.getGuildMemberList(guildId, nextToken)\n      if (!data.members?.length) break\n      list = list.concat(data.members.map(OneBot.adaptQQGuildMemberInfo))\n      if (data.finished) break\n      nextToken = data.next_token\n    }\n    return list\n  }\n}\n", "import { Dict, segment } from '@satorijs/satori'\n\nexport function CQCode(type: string, attrs: Dict<string>) {\n  if (type === 'text') return attrs.content\n  let output = '[CQ:' + type\n  for (const key in attrs) {\n    if (attrs[key]) output += `,${key}=${segment.escape(attrs[key], true)}`\n  }\n  return output + ']'\n}\n\nexport interface CQCode {\n  type: string\n  data: Dict<string>\n  capture?: RegExpExecArray\n}\n\nexport namespace CQCode {\n  export function escape(source: any, inline = false) {\n    const result = String(source)\n      .replace(/&/g, '&amp;')\n      .replace(/\\[/g, '&#91;')\n      .replace(/\\]/g, '&#93;')\n    return inline\n      ? result.replace(/,/g, '&#44;').replace(/(\\ud83c[\\udf00-\\udfff])|(\\ud83d[\\udc00-\\ude4f\\ude80-\\udeff])|[\\u2600-\\u2B55]/g, ' ')\n      : result\n  }\n\n  export function unescape(source: string) {\n    return String(source)\n      .replace(/&#91;/g, '[')\n      .replace(/&#93;/g, ']')\n      .replace(/&#44;/g, ',')\n      .replace(/&amp;/g, '&')\n  }\n\n  const pattern = /\\[CQ:(\\w+)((,\\w+=[^,\\]]*)*)\\]/\n\n  export function from(source: string): CQCode {\n    const capture = pattern.exec(source)\n    if (!capture) return null\n    const [, type, attrs] = capture\n    const data: Dict<string> = {}\n    attrs && attrs.slice(1).split(',').forEach((str) => {\n      const index = str.indexOf('=')\n      data[str.slice(0, index)] = unescape(str.slice(index + 1))\n    })\n    return { type, data, capture }\n  }\n\n  export function parse(source: string | CQCode[]) {\n    if (typeof source !== 'string') {\n      return source.map(({ type, data }) => segment(type, data))\n    }\n    const elements: segment[] = []\n    let result: ReturnType<typeof from>\n    while ((result = from(source))) {\n      const { type, data, capture } = result\n      if (capture.index) {\n        elements.push(segment('text', { content: unescape(source.slice(0, capture.index)) }))\n      }\n      elements.push(segment(type, data))\n      source = source.slice(capture.index + capture[0].length)\n    }\n    if (source) elements.push(segment('text', { content: unescape(source) }))\n    return elements\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,iBAAAA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAC,iBAA2C;;;ACA3C,IAAAC,iBAA0D;;;ACA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAC,iBAAsE;AACtE,YAAuB;;;ACDvB,oBAAuC;AA8RhC,IAAK,cAAL,kBAAKC,iBAAL;AACL,EAAAA,0BAAA;AACA,EAAAA,0BAAA;AACA,EAAAA,0BAAA;AAHU,SAAAA;AAAA,GAAA;AAmOL,IAAM,eAAN,cAA2B,MAAM;AAAA,EACtC,YAAY,MAAY,KAAa;AACnC,UAAM,wBAAwB,cAAc,KAAK,UAAU,IAAI,GAAG;AAClE,WAAO,iBAAiB,MAAM;AAAA,MAC5B,MAAM,EAAE,OAAO,KAAK;AAAA,MACpB,KAAK,EAAE,OAAO,IAAI;AAAA,IACpB,CAAC;AAAA,EACH;AACF;AARa;AAUb,IAAM,cAAN,cAA0B,MAAM;AAAA,EAC9B,YAAY,MAAY,KAAa,SAAiB;AACpD,UAAM,sBAAsB,cAAc,KAAK,UAAU,IAAI,eAAe,SAAS;AACrF,WAAO,iBAAiB,MAAM;AAAA,MAC5B,MAAM,EAAE,OAAO,QAAQ;AAAA,MACvB,MAAM,EAAE,OAAO,KAAK;AAAA,MACpB,KAAK,EAAE,OAAO,IAAI;AAAA,IACpB,CAAC;AAAA,EACH;AACF;AATM;AAWN,IAAM,SAAS,IAAI,qBAAO,QAAQ;AAE3B,IAAM,YAAN,MAAe;AAAA,EAGpB,MAAc,KAAc,QAAgB,SAAS,CAAC,GAAe;AACnE,WAAO,MAAM,mBAAmB,QAAQ,MAAM;AAC9C,UAAM,WAAW,MAAM,KAAK,SAAS,QAAQ,MAAM;AACnD,WAAO,MAAM,iBAAiB,QAAQ;AACtC,UAAM,EAAE,MAAM,QAAQ,IAAI;AAC1B,QAAI,YAAY;AAAG,aAAO;AAC1B,UAAM,IAAI,YAAY,QAAQ,QAAQ,OAAO;AAAA,EAC/C;AAAA,EAEA,MAAM,qBAAqB,UAAkB,MAAuB,UAAmB;AACrF,UAAM,OAAO,EAAE,UAAU,SAAS;AAClC,SAAK,OAAO,SAAS,WAAW,SAAS,eAAe;AACxD,UAAM,KAAK,KAAK,2BAA2B,IAAI;AAAA,EACjD;AAAA,EAEA,MAAM,0BAA0B,UAAkB,MAAuB,UAAmB;AAC1F,UAAM,OAAO,EAAE,UAAU,SAAS;AAClC,SAAK,OAAO,SAAS,WAAW,SAAS,eAAe;AACxD,UAAM,KAAK,KAAK,iCAAiC,IAAI;AAAA,EACvD;AAAA,EAIA,OAAe,cAAc,MAAc;AACzC,UAAM,WAAO,wBAAS,KAAK,QAAQ,SAAS,EAAE,CAAC;AAC/C,UAAM,UAAU,UAAS,cAAc,KAAK,YAAU,KAAK,WAAW,MAAM,CAAC;AAC7E,WAAO,CAAC,MAAM,OAAO;AAAA,EACvB;AAAA,EAEA,OAAO,OAAO,SAAiB,QAAkB;AAC/C,UAAM,CAAC,MAAM,OAAO,IAAI,UAAS,cAAc,IAAI;AACnD,cAAS,UAAU,QAAQ,kBAAmC,MAAa;AACzE,YAAM,OAAO,MAAM,KAAK,KAAK,MAAM,OAAO,YAAY,OAAO,IAAI,CAACC,OAAM,UAAU,CAACA,OAAM,KAAK,MAAM,CAAC,CAAC,CAAC;AACvG,UAAI,CAAC;AAAS,eAAO;AAAA,IACvB;AACA,gBAAY,UAAS,UAAU,OAAO,WAAW,kBAAmC,MAAa;AAC/F,YAAM,KAAK,KAAK,OAAO,UAAU,OAAO,YAAY,OAAO,IAAI,CAACA,OAAM,UAAU,CAACA,OAAM,KAAK,MAAM,CAAC,CAAC,CAAC;AAAA,IACvG;AAAA,EACF;AAAA,EAEA,OAAO,cAAc,MAAc,QAAgB,QAAkB;AACnE,UAAM,CAAC,MAAM,OAAO,IAAI,UAAS,cAAc,IAAI;AACnD,cAAS,UAAU,QAAQ,kBAAmC,MAAa;AACzE,YAAM,OAAO,MAAM,KAAK,KAAK,MAAM,OAAO,YAAY,OAAO,IAAI,CAACA,OAAM,UAAU,CAACA,OAAM,KAAK,MAAM,CAAC,CAAC,CAAC;AACvG,aAAO,KAAK;AAAA,IACd;AACA,gBAAY,UAAS,UAAU,OAAO,WAAW,kBAAmC,MAAa;AAC/F,YAAM,KAAK,KAAK,OAAO,UAAU,OAAO,YAAY,OAAO,IAAI,CAACA,OAAM,UAAU,CAACA,OAAM,KAAK,MAAM,CAAC,CAAC,CAAC;AAAA,IACvG;AAAA,EACF;AACF;AArDO,IAAM,WAAN;AAAM;AAAA,SAwBI,gBAAgB,CAAC,OAAO,QAAQ,UAAU,UAAU,QAAQ;AAgC7E,SAAS,cAAc,oBAAoB,cAAc,WAAW,WAAW,aAAa;AAC5F,SAAS,cAAc,kBAAkB,cAAc,YAAY,WAAW,aAAa;AAC3F,SAAS,cAAc,0BAA0B,cAAc,YAAY,UAAU;AACrF,SAAS,cAAc,4BAA4B,cAAc,WAAW,UAAU;AACtF,SAAS,OAAO,cAAc,YAAY;AAC1C,SAAS,OAAO,oBAAoB,YAAY;AAChD,SAAS,OAAO,mBAAmB,YAAY;AAC/C,SAAS,OAAO,sBAAsB,YAAY;AAClD,SAAS,OAAO,mBAAmB,UAAU;AAC7C,SAAS,OAAO,aAAa,WAAW,OAAO;AAC/C,SAAS,OAAO,WAAW,YAAY;AACvC,SAAS,OAAO,wBAAwB,UAAU;AAClD,SAAS,OAAO,aAAa,OAAO;AACpC,SAAS,cAAc,mBAAmB,YAAY,YAAY;AAClE,SAAS,cAAc,oBAAoB,UAAU,SAAS;AAC9D,SAAS,OAAO,yBAAyB,YAAY,aAAa;AAClE,SAAS,OAAO,0BAA0B,QAAQ,WAAW,QAAQ;AACrE,SAAS,OAAO,yBAAyB,QAAQ,YAAY,WAAW,QAAQ;AAChF,SAAS,cAAc,mBAAmB,YAAY,OAAO;AAC7D,SAAS,OAAO,mBAAmB,SAAS,YAAY;AAGxD,SAAS,OAAO,kBAAkB,YAAY,WAAW,oBAAoB;AAC7E,SAAS,OAAO,iBAAiB,YAAY,WAAW,UAAU;AAClE,SAAS,OAAO,uBAAuB,YAAY,QAAQ;AAC3D,SAAS,OAAO,mBAAmB,YAAY,WAAW,QAAQ;AAClE,SAAS,OAAO,uBAAuB,YAAY,QAAQ;AAC3D,SAAS,OAAO,kBAAkB,YAAY,WAAW,MAAM;AAC/D,SAAS,OAAO,mBAAmB,YAAY,YAAY;AAC3D,SAAS,OAAO,2BAA2B,YAAY,WAAW,iBAAiB,UAAU;AAC7F,SAAS,OAAO,kBAAkB,YAAY,YAAY;AAC1D,SAAS,OAAO,sBAAsB,YAAY,QAAQ,OAAO;AACjE,SAAS,OAAO,sBAAsB,YAAY,SAAS;AAC3D,SAAS,OAAO,qBAAqB,UAAU;AAC/C,SAAS,OAAO,qBAAqB,YAAY,WAAW;AAC5D,SAAS,OAAO,2BAA2B,UAAU;AAGrD,SAAS,OAAO,gBAAgB;AAChC,SAAS,OAAO,uBAAuB;AACvC,SAAS,OAAO,kBAAkB,YAAY,WAAW,SAAS,WAAW,eAAe;AAC5F,SAAS,OAAO,qBAAqB,WAAW,UAAU;AAC1D,SAAS,OAAO,iBAAiB,SAAS;AAC1C,SAAS,OAAO,iBAAiB;AACjC,SAAS,OAAO,gCAAgC;AAChD,SAAS,OAAO,iBAAiB,SAAS;AAC1C,SAAS,OAAO,gCAAgC,SAAS;AAEzD,SAAS,OAAO,kBAAkB,YAAY,UAAU;AACxD,SAAS,OAAO,gBAAgB;AAChC,SAAS,OAAO,yBAAyB,YAAY,WAAW,UAAU;AAC1E,SAAS,OAAO,yBAAyB,UAAU;AACnD,SAAS,OAAO,wBAAwB,YAAY,MAAM;AAC1D,SAAS,OAAO,sBAAsB;AACtC,SAAS,OAAO,8BAA8B,UAAU;AACxD,SAAS,OAAO,wBAAwB,UAAU;AAClD,SAAS,OAAO,6BAA6B,YAAY,WAAW;AACpE,SAAS,OAAO,uBAAuB,WAAW,QAAQ,MAAM;AAChE,SAAS,OAAO,qBAAqB,YAAY,QAAQ,QAAQ,QAAQ;AACzE,SAAS,OAAO,4BAA4B,YAAY,aAAa,MAAM;AAC3E,SAAS,OAAO,uBAAuB,YAAY,WAAW;AAC9D,SAAS,OAAO,qBAAqB,YAAY,aAAa,WAAW,OAAO;AAChF,SAAS,cAAc,sBAAsB,OAAO,YAAY,WAAW,OAAO;AAClF,SAAS,cAAc,iBAAiB,QAAQ,OAAO,WAAW,cAAc;AAChF,SAAS,cAAc,sBAAsB,WAAW,UAAU;AAClE,SAAS,cAAc,oBAAoB,SAAS,KAAK;AAEzD,SAAS,cAAc,eAAe,WAAW,QAAQ;AACzD,SAAS,cAAc,kBAAkB,OAAO;AAChD,SAAS,OAAO,mBAAmB,QAAQ;AAC3C,SAAS,OAAO,cAAc,QAAQ,cAAc,WAAW;AAC/D,SAAS,OAAO,aAAa,MAAM;AACnC,SAAS,cAAc,kBAAkB,KAAK;AAC9C,SAAS,cAAc,mBAAmB,KAAK;AAC/C,SAAS,OAAO,YAAY;AAC5B,SAAS,OAAO,kBAAkB;AAClC,SAAS,OAAO,eAAe,OAAO;AACtC,SAAS,OAAO,qBAAqB;AAErC,SAAS,OAAO,2BAA2B;AAC3C,SAAS,OAAO,gBAAgB;AAChC,SAAS,OAAO,2BAA2B,UAAU;AACrD,SAAS,OAAO,0BAA0B,YAAY,UAAU;AAChE,SAAS,OAAO,yBAAyB,YAAY,YAAY;AACjE,SAAS,OAAO,4BAA4B,YAAY,SAAS;AACjE,SAAS,cAAc,0BAA0B,cAAc,YAAY,cAAc,SAAS;;;AD9pBlG,IAAMC,UAAS,IAAI,sBAAO,QAAQ;AAE3B,IAAM,YAAY,wBAAC,UAA8C;AAAA,EACtE,QAAQ,KAAK,WAAW,KAAK,QAAQ,SAAS;AAAA,EAC9C,QAAQ,KAAK,UAAU,wCAAwC,KAAK,qBAAqB;AAAA,EACzF,UAAU,KAAK;AACjB,IAJyB;AAMlB,IAAM,mBAAmB,wBAAC,UAAoD;AAAA,EACnF,GAAG,UAAU,IAAI;AAAA,EACjB,UAAU,KAAK;AAAA,EACf,OAAO,CAAC,KAAK,IAAI;AACnB,IAJgC;AAMzB,IAAM,yBAAyB,wBAAC,UAAyD;AAAA,EAC9F,QAAQ,KAAK;AAAA,EACb,UAAU,KAAK;AAAA,EACf,UAAU,KAAK;AAAA,EACf,OAAO,KAAK,YAAY,CAAC,KAAK,SAAS,IAAI,CAAC;AAAA,EAC5C,OAAO,KAAK,cAAc;AAC5B,IANsC;AAQ/B,IAAM,4BAA4B,wBAAC,SAAwD;AA7BlG;AA6BsG;AAAA,IACpG,QAAQ,KAAK;AAAA,IACb,UAAU,KAAK;AAAA,IACf,UAAU,KAAK;AAAA,IACf,SAAO,UAAK,UAAL,mBAAY,IAAI,OAAK,EAAE,eAAc,CAAC;AAAA,IAC7C,QAAO,UAAK,UAAL,mBAAY,KAAK,OAAK,EAAE,cAAc;AAAA,EAC/C;AAAA,GANyC;AAQlC,IAAM,cAAc,wBAAC,MAAyB,eAAwD;AAAA,EAC3G,GAAG,UAAU,IAAI;AAAA,EACjB,WAAU,uCAAW,SAAQ,KAAK;AAAA,EAClC,WAAW,uCAAW;AAAA,EACtB,OAAO,CAAC,KAAK,IAAI;AACnB,IAL2B;AAO3B,eAAsB,aAAa,KAAc,SAAyB,SAA4B,CAAC,GAAG;AA5C1G;AA8CE,SAAO,SAAS,YAAY,QAAQ,QAAQ,QAAQ,SAAS;AAC7D,SAAO,SAAS,OAAO,OAAO;AAC9B,SAAO,YAAY,QAAQ,WAAW,SAAS;AAC/C,SAAO,YAAY,QAAQ,OAAO;AAClC,MAAI,QAAQ,UAAU;AACpB,WAAO,UAAU,QAAQ;AACzB,WAAO,YAAY,QAAQ;AAAA,EAC7B,WAAW,QAAQ,UAAU;AAC3B,WAAO,UAAU,OAAO,YAAY,QAAQ,SAAS,SAAS;AAAA,EAChE,OAAO;AACL,WAAO,YAAY,aAAa,OAAO,OAAO;AAAA,EAChD;AAGA,QAAM,QAAQ,OAAO,MAAM,QAAQ,OAAO;AAC1C,MAAI,IAAI,OAAO,SAAS,mBAAmB;AACzC,UAAM,QAAQ,CAAC,MAAM,UAAU;AAC7B,UAAI,KAAK,SAAS;AAAS;AAC3B,YAAM,OAAO,MAAM,QAAQ;AAC3B,UAAI,QAAQ,KAAK,SAAS,UAAU,KAAK,MAAM,QAAQ,QAAQ,MAAM,KAAK,MAAM,SAAS;AACvF,aAAK,MAAM,WAAW;AAAA,MACxB;AACA,YAAM,QAAQ,MAAM,QAAQ;AAC5B,UAAI,SAAS,MAAM,SAAS,UAAU,MAAM,MAAM,QAAQ,UAAU,MAAM,MAAM,MAAM,SAAS;AAC7F,cAAM,MAAM,UAAU,MAAM,MAAM,MAAM;AAAA,MAC1C;AAAA,IACF,CAAC;AAAA,EACH;AAEA,SAAO,WAAW,uBAAQ,UAAU,OAAO;AAAA,IACzC,GAAG,EAAE,GAAG,GAAG;AACT,UAAI,OAAO;AAAO,eAAO,uBAAQ,GAAG,EAAE;AACtC,iBAAO,wBAAQ,MAAM,EAAE,MAAM,MAAM,CAAC;AAAA,IACtC;AAAA,IACA,KAAK,EAAE,GAAG,GAAG;AACX,iBAAO,wBAAQ,QAAQ,EAAE,IAAI,UAAU,IAAI,SAAS,GAAG;AAAA,QACrD,uBAAQ,MAAY,aAAO,EAAE,CAAC;AAAA,MAChC,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACD,QAAI,YAAO,SAAS,OAAhB,mBAAoB,UAAS,SAAS;AACxC,UAAM,QAAQ,OAAO,SAAS,MAAM;AACpC,WAAO,QAAQ,MAAM,IAAI,WAAW,OAAO,WAAW,MAAM,MAAM,EAAE,EAAE,MAAM,CAAC,UAAU;AACrF,MAAAA,QAAO,KAAK,KAAK;AACjB,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAEA,SAAO,UAAU,OAAO,SAAS,KAAK,EAAE;AACxC,SAAO;AACT;AApDsB;AAsDf,IAAM,aAAa,wBAAC,SAAmE;AAC5F,MAAK,KAA8B,UAAU;AAC3C,UAAM,QAAQ;AACd,WAAO;AAAA,MACL,SAAS,MAAM;AAAA,MACf,WAAW,MAAM;AAAA,IACnB;AAAA,EACF,OAAO;AACL,UAAM,QAAQ;AACd,WAAO;AAAA,MACL,SAAS,MAAM,SAAS,SAAS;AAAA,MACjC,WAAW,MAAM;AAAA,IACnB;AAAA,EACF;AACF,GAd0B;AAgBnB,IAAM,eAAe,wBAAC,SAAmE;AAC9F,MAAK,KAA4B,YAAY;AAC3C,UAAM,UAAU;AAChB,WAAO;AAAA,MACL,WAAW,QAAQ,WAAW,SAAS;AAAA,MACvC,aAAa,QAAQ;AAAA,IACvB;AAAA,EACF,OAAO;AACL,UAAM,QAAQ;AACd,WAAO;AAAA,MACL,WAAW,MAAM,SAAS,SAAS;AAAA,MACnC,aAAa,MAAM;AAAA,IACrB;AAAA,EACF;AACF,GAd4B;AAgB5B,eAAsB,gBAAgB,KAAc,MAAsB;AACxE,MAAI,KAAK,cAAc;AAErB,UAAM,IAAI;AACV,QAAI,CAAC;AAAK;AAAA,EACZ;AAEA,QAAM,UAAU,MAAM,aAAa,KAAK,IAAI;AAC5C,MAAI,CAAC;AAAS;AACd,qCAAe,SAAS,UAAU,OAAO,OAAO,IAAI,QAAQ,CAAC;AAC7D,SAAO,OAAO,QAAQ,QAAQ,IAAI;AAClC,MAAI,SAAS,OAAO;AACtB;AAZsB;AActB,eAAsB,aAAa,KAAc,MAAsB;AACrE,QAAM,UAAU,IAAI,QAAQ;AAC5B,UAAQ,SAAS,KAAK,eAAe,KAAK,eAAe,KAAK,KAAK;AACnE,UAAQ,OAAO,KAAK;AAEpB,MAAI,KAAK,cAAc,aAAa,KAAK,cAAc,gBAAgB;AACrE,UAAM,aAAa,KAAK,MAAM,OAAO;AACrC,QAAI,KAAK,cAAc,kBAAkB,CAAC,QAAQ,SAAS;AACzD,cAAQ,YAAY,aAAa,KAAK;AAAA,IACxC;AACA,YAAQ,OAAO;AACf,YAAQ,UAAU,KAAK,iBAAiB,UAAU,UAAU,KAAK;AACjE,YAAQ,aAAa,KAAK;AAC1B,WAAO;AAAA,EACT;AAEA,UAAQ,UAAU,KAAK;AACvB,MAAI,KAAK;AAAS,YAAQ,SAAS,KAAK,KAAK;AAC7C,MAAI,KAAK;AAAU,YAAQ,UAAU,QAAQ,YAAY,KAAK,KAAK;AACnE,MAAI,KAAK;AAAU,YAAQ,UAAU,KAAK,KAAK;AAC/C,MAAI,KAAK;AAAY,YAAQ,YAAY,KAAK,KAAK;AACnD,MAAI,KAAK;AAAW,YAAQ,WAAW,KAAK,KAAK;AACjD,MAAI,KAAK;AAAa,YAAQ,aAAa,KAAK,KAAK;AACrD,MAAI,KAAK;AAAY,YAAQ,YAAY,KAAK,KAAK;AAEnD,MAAI,KAAK,cAAc,WAAW;AAChC,YAAQ,UAAU,KAAK;AACvB,YAAQ,YAAY,KAAK;AACzB,QAAI,KAAK,iBAAiB,UAAU;AAClC,cAAQ,OAAO;AACf,cAAQ,YAAY,WAAW,QAAQ;AAAA,IACzC,WAAW,KAAK,aAAa,OAAO;AAClC,cAAQ,OAAO;AAAA,IACjB,OAAO;AACL,cAAQ,OAAO;AAAA,IACjB;AAAA,EACF,WAAW,KAAK,cAAc,UAAU;AACtC,YAAQ,KAAK;AAAA,WACN;AACH,gBAAQ,OAAO;AACf,gBAAQ,UAAU;AAClB,gBAAQ,aAAa;AACrB;AAAA,WACG;AACH,gBAAQ,OAAO;AACf,gBAAQ,UAAU;AAClB,gBAAQ,YAAY,WAAW,QAAQ;AACvC,gBAAQ,aAAa;AACrB;AAAA,WAEG;AACH,gBAAQ,OAAO;AACf,gBAAQ,UAAU;AAClB,gBAAQ,aAAa;AACrB;AAAA,WACG;AACH,gBAAQ,OAAO;AACf;AAAA,WACG;AACH,gBAAQ,OAAO;AACf;AAAA,WACG;AACH,gBAAQ,OAAO;AACf,gBAAQ,UAAU;AAClB;AAAA,WACG;AACH,gBAAQ,OAAO;AACf,gBAAQ,UAAU;AAClB;AAAA,WACG;AACH,gBAAQ,OAAO,QAAQ,WAAW,QAAQ,SAAS,kBAAkB;AACrE,gBAAQ,UAAU,QAAQ,WAAW,QAAQ,aAAa,WAAW;AACrE;AAAA,WACG;AACH,gBAAQ,OAAO,QAAQ,WAAW,QAAQ,SAAS,gBAAgB;AACnE,gBAAQ,UAAU,QAAQ,WAAW,QAAQ,aAAa,WAAW;AACrE;AAAA,WACG;AACH,gBAAQ,OAAO;AACf,gBAAQ,UAAU;AAClB;AAAA,WACG;AACH,gBAAQ,OAAO;AACf,gBAAQ,cAAU,0BAAU,KAAK,QAAQ;AACzC,YAAI,QAAQ,YAAY,QAAQ;AAC9B,kBAAQ,cAAR,QAAQ,YAAc,WAAW,QAAQ;AAAA,QAC3C,WAAW,QAAQ,YAAY,SAAS;AACtC,kBAAQ,iBAAa,0BAAU,KAAK,UAAU;AAAA,QAChD;AACA;AAAA,WACG;AACH,gBAAQ,OAAO;AACf,gBAAQ,UAAU;AAClB;AAAA,WACG;AACH,gBAAQ,OAAO;AACf,gBAAQ,UAAU;AAClB;AAAA,WACG;AACH,gBAAQ,OAAO;AACf,gBAAQ,UAAU;AAClB;AAAA,WACG;AACH,gBAAQ,OAAO;AACf,gBAAQ,UAAU;AAClB;AAAA;AACO;AAAA;AAAA,EAEb;AAAO;AAEP,SAAO;AACT;AA/GsB;;;AD7ItB,oBAA2B;AAE3B,IAAMC,UAAS,IAAI,sBAAO,QAAQ;AAE3B,IAAM,aAAN,cAAyB,uBAAQ,OAAkB;AAAA,EAGxD,MAAM,KAAK,KAAc,KAAsD;AAC7E,UAAM,SAAS,IAAI;AACnB,UAAM,EAAE,UAAU,MAAM,IAAI;AAC5B,QAAI,CAAC;AAAU;AAEf,UAAM,OAAO,IAAI,KAAK,OAAO,MAAM,EAAE,OAAO;AAAA,MAC1C,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,iBAAiB,SAAS;AAAA,MAC5B;AAAA,IACF,CAAC;AAED,QAAI,SAAS,WAAW,OAAO,QAAQ,WAAW;AAChD,aAAO,KAAK,KAAK,MAAM,QAAQ,MAAM;AAAA,IACvC;AAEA,WAAO,IAAI,WAAW;AAAA,EACxB;AAAA,EAEA,MAAM,MAAM,KAAsD;AAChE,UAAM,EAAE,QAAQ,OAAO,UAAU,IAAI,IAAI;AACzC,QAAI,IAAI,OAAO,KAAK,MAAM,CAAC,QAAQ;AACjC,UAAI,QAAQ;AAEV,cAAM,YAAY,IAAI,QAAQ;AAC9B,YAAI,CAAC;AAAW,iBAAO,IAAI,SAAS;AAGpC,cAAM,UAAM,0BAAW,QAAQ,MAAM,EAAE,OAAO,IAAI,QAAQ,OAAO,EAAE,OAAO,KAAK;AAC/E,YAAI,cAAc,QAAQ;AAAO,iBAAO,IAAI,SAAS;AAAA,MACvD;AAEA,YAAM,SAAS,IAAI,QAAQ,aAAa,SAAS;AACjD,YAAMC,OAAM,KAAK,KAAK,KAAK,CAAAA,SAAOA,KAAI,WAAW,MAAM;AACvD,UAAI,CAACA;AAAK,eAAO,IAAI,SAAS;AAE9B,MAAAD,QAAO,MAAM,cAAc,IAAI,QAAQ,IAAI;AAC3C,sBAAgBC,MAAK,IAAI,QAAQ,IAAI;AAAA,IACvC,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,OAAO;AACX,IAAAD,QAAO,MAAM,qBAAqB;AAAA,EACpC;AACF;AA/Ca;AAAA,CAiDN,CAAUE,gBAAV;AAOE,EAAMA,YAAA,SAAyB,sBAAO,UAAU;AAAA,IACrD,sBAAO,OAAO;AAAA,MACZ,UAAU,sBAAO,MAAM,MAAe;AAAA,MACtC,MAAM,sBAAO,OAAO,EAAE,YAAY,WAAW,EAAE,QAAQ,SAAS;AAAA,MAChE,QAAQ,sBAAO,OAAO,EAAE,YAAY,4CAA4C,EAAE,KAAK,QAAQ;AAAA,IACjG,CAAC,EAAE,YAAY,MAAM;AAAA,IACrB,uBAAQ,aAAa,IAAI;AAAA,EAC3B,CAAC;AAAA,GAdc;;;AGxDjB,IAAAC,iBAAgF;AAIhF,IAAMC,UAAS,IAAI,sBAAO,QAAQ;AAO3B,IAAM,WAAN,cAAuB,uBAAQ,SAAoB;AAAA,EAAnD;AAAA;AACL,SAAU,SAAS;AAAA;AAAA,EAEnB,QAAQ,KAAwD;AAC9D,UAAM,EAAE,OAAO,SAAS,IAAI,IAAI;AAChC,UAAM,OAAO,KAAK,IAAI,KAAK,OAAO,IAAI,MAAM;AAC5C,QAAI;AAAO,WAAK,OAAO,QAAQ,gBAAgB,UAAU;AACzD,WAAO,KAAK,GAAG,QAAQ;AAAA,EACzB;AACF;AATa;AAAA,CAWN,CAAUC,cAAV;AAGE,EAAMA,UAAA,SAAyB,sBAAO,UAAU;AAAA,IACrD,sBAAO,OAAO;AAAA,MACZ,UAAU,sBAAO,MAAM,IAAa;AAAA,MACpC,iBAAiB,sBAAO,QAAQ,EAAE,KAAK,MAAM,EAAE,QAAQ,oBAAK,MAAM,EAAE,YAAY,kBAAkB;AAAA,IACpG,CAAC,EAAE,YAAY,MAAM;AAAA,IACrB,uBAAQ,aAAa,IAAI;AAAA,IACzB,uBAAQ,SAAS;AAAA,EACnB,CAAC;AAAA,GAVc;AAaV,IAAM,WAAN,cAAuB,uBAAQ,OAA0D;AAAA,EAG9F,YAAY,KAAc,KAAgB;AACxC,UAAM;AAEN,UAAM,EAAE,OAAO,UAAU,IAAI,IAAI;AACjC,SAAK,WAAW,IAAI,OAAO,GAAG,MAAM,CAAC,QAAQ,EAAE,QAAQ,MAAM;AAC3D,MAAAD,QAAO,MAAM,kBAAkB,OAAO;AACtC,UAAI,QAAQ,qBAAqB,aAAa;AAC5C,eAAO,OAAO,MAAM,MAAM,uBAAuB;AAAA,MACnD;AACA,YAAM,SAAS,QAAQ,aAAa,SAAS;AAC7C,YAAME,OAAM,KAAK,KAAK,KAAK,CAAAA,SAAOA,KAAI,WAAW,MAAM;AACvD,UAAI,CAACA;AAAK,eAAO,OAAO,MAAM,MAAM,mBAAmB;AAEvD,MAAAA,KAAI,SAAS;AACb,aAAOA,IAAG;AAAA,IACZ,CAAC;AAED,QAAI,GAAG,WAAW,MAAM;AACtB,MAAAF,QAAO,MAAM,mBAAmB;AAChC,WAAK,SAAS,MAAM;AAAA,IACtB,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,KAAK,KAAgB;AA7D7B;AA8DI,cAAI,WAAJ,mBAAY;AACZ,QAAI,SAAS;AAAA,EACf;AACF;AA9Ba;AAAA,CAgCN,CAAUG,cAAV;AAKE,EAAMA,UAAA,SAAyB,sBAAO,OAAO;AAAA,IAClD,UAAU,sBAAO,MAAM,YAAqB;AAAA,IAC5C,MAAM,sBAAO,OAAO,EAAE,YAAY,WAAW,EAAE,QAAQ,SAAS;AAAA,IAChE,iBAAiB,sBAAO,QAAQ,EAAE,KAAK,MAAM,EAAE,QAAQ,oBAAK,MAAM,EAAE,YAAY,kBAAkB;AAAA,EACpG,CAAC,EAAE,YAAY,MAAM;AAAA,GATN;AAYjB,IAAI,UAAU;AACd,IAAM,YAA0D,CAAC;AAE1D,SAAS,OAAO,KAAqD;AAC1E,MAAI,OAAO,GAAG,WAAW,CAAC,SAAS;AACjC,QAAI;AACJ,QAAI;AACF,eAAS,KAAK,MAAM,KAAK,SAAS,CAAC;AAAA,IACrC,SAAS,OAAP;AACA,aAAOH,QAAO,KAAK,wBAAwB,IAAI;AAAA,IACjD;AAEA,QAAI,eAAe,QAAQ;AACzB,MAAAA,QAAO,MAAM,cAAc,MAAM;AACjC,sBAAgB,KAAK,MAAM;AAAA,IAC7B,WAAW,OAAO,QAAQ,WAAW;AACnC,gBAAU,OAAO,MAAM,MAAM;AAC7B,aAAO,UAAU,OAAO;AAAA,IAC1B;AAAA,EACF,CAAC;AAED,MAAI,OAAO,GAAG,SAAS,MAAM;AAC3B,WAAO,IAAI,SAAS;AAAA,EACtB,CAAC;AAED,MAAI,SAAS,WAAW,CAAC,QAAQ,WAAW;AAC1C,UAAM,OAAO,EAAE,QAAQ,QAAQ,MAAM,EAAE,QAAQ;AAC/C,SAAK,OAAO,EAAE;AACd,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,gBAAU,KAAK,QAAQ;AACvB,iBAAW,MAAM;AACf,eAAO,UAAU,KAAK;AACtB,eAAO,IAAI,aAAa,QAAQ,MAAM,CAAC;AAAA,MACzC,GAAG,IAAI,OAAO,eAAe;AAC7B,UAAI,OAAO,KAAK,KAAK,UAAU,IAAI,GAAG,CAAC,UAAU;AAC/C,YAAI;AAAO,iBAAO,KAAK;AAAA,MACzB,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAEA,MAAI,WAAW;AACjB;AAtCgB;;;AClFhB,IAAAI,iBAAsC;;;ACAtC,IAAAC,iBAAoD;AAIpD,IAAM,QAAN,MAAY;AAAA,EAIV,YAAmB,MAAuC;AAAvC;AAHnB,kBAAoC,CAAC;AACrC,oBAAqB,CAAC;AAAA,EAEqC;AAC7D;AALM;AAOC,IAAM,kBAAN,cAA8B,yBAAmB;AAAA,EAAjD;AAAA;AACL,iBAAiB,CAAC,IAAI,MAAM,SAAS,CAAC;AACtC,oBAAqB,CAAC;AAAA;AAAA,EAEtB,MAAM,UAAU;AACd,QAAI,CAAC,KAAK,MAAM,GAAG,SAAS;AAAQ;AACpC,UAAM,UAAU,KAAK,IAAI,QAAQ,KAAK,OAAO;AAC7C,YAAQ,YAAY,KAAK,UACrB,KAAK,MAAM,KAAK,IAAI,SAAS,oBAAoB,KAAK,SAAS,KAAK,MAAM,GAAG,QAAQ,IACrF,KAAK,MAAM,KAAK,IAAI,SAAS,sBAAsB,KAAK,UAAU,MAAM,CAAC,GAAG,KAAK,MAAM,GAAG,QAAQ;AACtG,YAAQ,IAAI,KAAK,SAAS,QAAQ,OAAO;AACzC,SAAK,QAAQ,KAAK,OAAO;AAAA,EAC3B;AAAA,EAEA,MAAM,QAAQ;AAEZ,WAAO,MAAM;AACX,YAAM,QAAQ,KAAK,SAAS;AAC5B,WAAI,+BAAO,UAAS;AAAQ;AAC5B,YAAM,KAAK,OAAO,MAAM,KAAK,KAAK,UAAU;AAC5C,UAAI,MAAM,KAAK;AAAM;AACrB,WAAK,SAAS,MAAM;AAAA,IACtB;AAGA,WAAO,MAAM;AACX,YAAM,OAAO,KAAK,SAAS,KAAK,SAAS,SAAS;AAClD,WAAI,6BAAM,UAAS;AAAQ;AAC3B,WAAK,KAAK,OAAO,KAAK,KAAK,KAAK,QAAQ;AACxC,UAAI,KAAK,KAAK;AAAM;AACpB,WAAK,SAAS,IAAI;AAAA,IACpB;AAGA,QAAI,CAAC,KAAK,SAAS;AAAQ;AAC3B,UAAM,EAAE,MAAM,OAAO,IAAI,KAAK,MAAM;AACpC,QAAI,SAAS,WAAW;AACtB,WAAK,MAAM,GAAG,SAAS,KAAK;AAAA,QAC1B,MAAM;AAAA,QACN,MAAM;AAAA,UACJ,MAAM,OAAO,YAAY,OAAO,YAAY,KAAK,IAAI,YAAY,KAAK,IAAI;AAAA,UAC1E,KAAK,OAAO,UAAU,KAAK,IAAI;AAAA,UAC/B,SAAS,KAAK;AAAA,QAChB;AAAA,MACF,CAAC;AACD,WAAK,WAAW,CAAC;AACjB;AAAA,IACF;AAEA,UAAM,UAAU,KAAK,IAAI,QAAQ,KAAK,OAAO;AAC7C,YAAQ,YAAY,KAAK,IAAI,SACzB,KAAK,MAAM,KAAK,IAAI,SAAS,oBAAoB,KAAK,SAAS,KAAK,WAAW,KAAK,QAAQ,IAC5F,KAAK,UACH,KAAK,MAAM,KAAK,IAAI,SAAS,aAAa,KAAK,SAAS,KAAK,QAAQ,IACrE,KAAK,MAAM,KAAK,IAAI,SAAS,eAAe,KAAK,UAAU,MAAM,CAAC,GAAG,KAAK,QAAQ;AACxF,YAAQ,IAAI,KAAK,SAAS,QAAQ,OAAO;AACzC,SAAK,QAAQ,KAAK,OAAO;AACzB,SAAK,WAAW,CAAC;AAAA,EACnB;AAAA,EAEQ,KAAK,MAAc;AACzB,SAAK,SAAS,KAAK,EAAE,MAAM,QAAQ,MAAM,EAAE,KAAK,EAAE,CAAC;AAAA,EACrD;AAAA,EAEA,MAAM,MAAM,SAAkB;AAC5B,QAAI,EAAE,MAAM,OAAO,SAAS,IAAI;AAChC,QAAI,SAAS,QAAQ;AACnB,WAAK,KAAK,MAAM,OAAO;AAAA,IACzB,WAAW,SAAS,KAAK;AACvB,YAAM,KAAK,OAAO,QAAQ;AAC1B,WAAK,KAAK,IAAI;AAAA,IAChB,WAAW,SAAS,MAAM;AACxB,UAAI,MAAM,SAAS,OAAO;AACxB,aAAK,SAAS,KAAK,EAAE,MAAM,MAAM,MAAM,EAAE,IAAI,MAAM,EAAE,CAAC;AAAA,MACxD,OAAO;AACL,aAAK,SAAS,KAAK,EAAE,MAAM,MAAM,MAAM,EAAE,IAAI,MAAM,IAAI,MAAM,MAAM,KAAK,EAAE,CAAC;AAAA,MAC7E;AAAA,IACF,WAAW,SAAS,SAAS;AAC3B,UAAI,MAAM;AAAI,aAAK,KAAK,MAAM,EAAE;AAAA,IAClC,WAAW,SAAS,QAAQ;AAC1B,UAAI,MAAM,YAAY,MAAM,aAAa,KAAK,IAAI,UAAU;AAC1D,cAAM,KAAK,OAAO,QAAQ;AAAA,MAC5B,OAAO;AACL,aAAK,SAAS,KAAK,EAAE,MAAM,QAAQ,MAAM,EAAE,IAAI,MAAM,GAAG,EAAE,CAAC;AAAA,MAC7D;AAAA,IACF,WAAW,SAAS,KAAK;AACvB,YAAM,KAAK,OAAO,QAAQ;AAC1B,UAAI,MAAM;AAAM,aAAK,KAAK,KAAK,MAAM,QAAQ;AAAA,IAC/C,WAAW,CAAC,SAAS,SAAS,OAAO,EAAE,SAAS,IAAI,GAAG;AACrD,UAAI,SAAS;AAAS,eAAO;AAC7B,cAAQ,EAAE,GAAG,MAAM;AACnB,YAAM,OAAO,MAAM;AACnB,aAAO,MAAM;AACb,YAAM,MAAM,0BAA0B,KAAK,MAAM,IAAI;AACrD,UAAI;AAAK,cAAM,OAAO,cAAc,MAAM,KAAK,MAAM,IAAI,GAAG,MAAM;AAClE,WAAK,SAAS,KAAK,EAAE,MAAM,MAAM,MAAM,CAAC;AAAA,IAC1C,WAAW,SAAS,gBAAgB;AAClC,YAAM,KAAK,MAAM;AACjB,WAAK,SAAS,KAAK,EAAE,MAAM,SAAS,MAAM,MAAM,CAAC;AAAA,IACnD,WAAW,SAAS,cAAc;AAChC,YAAM,KAAK,MAAM;AACjB,WAAK,SAAS,KAAK,EAAE,MAAM,OAAO,MAAM,MAAM,CAAC;AAAA,IACjD,WAAW,SAAS,eAAe;AACjC,YAAM,KAAK,MAAM;AACjB,WAAK,SAAS,KAAK,EAAE,MAAM,QAAQ,MAAM,MAAM,CAAC;AAAA,IAClD,WAAW,SAAS,eAAe;AACjC,YAAM,KAAK,MAAM;AACjB,WAAK,SAAS,KAAK,EAAE,MAAM,QAAQ,MAAM,MAAM,CAAC;AAAA,IAClD,WAAW,SAAS,UAAU;AAC5B,aAAO,OAAO,KAAK,MAAM,GAAG,QAAQ,KAAK;AAAA,IAC3C,WAAW,SAAS,YAAY,CAAC,KAAK,IAAI,QAAQ;AAChD,YAAM,KAAK,MAAM;AACjB,WAAK,MAAM,QAAQ,IAAI,MAAM,SAAS,CAAC;AACvC,YAAM,KAAK,OAAO,QAAQ;AAC1B,YAAM,KAAK,MAAM;AACjB,WAAK,MAAM,MAAM;AACjB,YAAM,KAAK,QAAQ;AAAA,IACrB,WAAW,SAAS,UAAU;AAC5B,YAAM,KAAK,OAAO,QAAQ;AAC1B,YAAM,KAAK,MAAM;AAAA,IACnB,WAAW,SAAS,SAAS;AAC3B,YAAM,KAAK,MAAM;AACjB,WAAK,SAAS,KAAK,EAAE,MAAM,SAAS,MAAM,MAAM,CAAC;AAAA,IACnD,WAAW,SAAS,WAAW;AAC7B,YAAM,KAAK,MAAM;AAEjB,UAAI,aAAa,SAAS,CAAC,KAAK,IAAI,QAAQ;AAC1C,aAAK,MAAM,QAAQ,IAAI,MAAM,SAAS,CAAC;AACvC,cAAM,KAAK,OAAO,QAAQ;AAC1B,cAAM,KAAK,MAAM;AACjB,aAAK,MAAM,MAAM;AACjB,cAAM,KAAK,QAAQ;AAAA,MACrB,OAAO;AACL,eAAO,OAAO,KAAK,MAAM,GAAG,YAAQ,qBAAK,OAAO,CAAC,UAAU,YAAY,YAAY,QAAQ,CAAC,CAAC;AAC7F,cAAM,KAAK,OAAO,QAAQ;AAC1B,cAAM,KAAK,MAAM;AAAA,MACnB;AAAA,IACF,OAAO;AACL,YAAM,KAAK,OAAO,QAAQ;AAAA,IAC5B;AAAA,EACF;AACF;AA7Ia;;;ADPN,IAAMC,WAAN,cAAiE,mBAAO;AAAA,EAI7E,YAAY,WAAmB,UAAoB,SAAkB;AACnE,QAAI,CAAC,KAAK,UAAU,CAAC,UAAU,WAAW,UAAU,GAAG;AACrD,gBAAU;AAAA,IACZ;AACA,WAAO,IAAI,gBAAgB,MAAM,WAAW,OAAO,EAAE,KAAK,QAAQ;AAAA,EACpE;AAAA,EAEA,mBAAmB,QAAgB,UAAoB;AACrD,WAAO,KAAK,YAAY,aAAa,QAAQ,QAAQ;AAAA,EACvD;AAAA,EAEA,MAAM,WAAW,WAAmB,WAAmB;AACrD,UAAM,OAAO,MAAM,KAAK,SAAS,OAAO,SAAS;AACjD,WAAO,MAAa,aAAa,MAAM,IAAI;AAAA,EAC7C;AAAA,EAEA,MAAM,cAAc,WAAmB,WAAmB;AACxD,UAAM,KAAK,SAAS,UAAU,SAAS;AAAA,EACzC;AAAA,EAEA,MAAM,UAAU;AACd,UAAM,OAAO,MAAM,KAAK,SAAS,aAAa;AAC9C,WAAc,UAAU,IAAI;AAAA,EAC9B;AAAA,EAEA,MAAM,QAAQ,QAAgB;AAC5B,UAAM,OAAO,MAAM,KAAK,SAAS,gBAAgB,MAAM;AACvD,WAAc,UAAU,IAAI;AAAA,EAC9B;AAAA,EAEA,MAAM,gBAAgB;AACpB,UAAM,OAAO,MAAM,KAAK,SAAS,cAAc;AAC/C,WAAO,KAAK,IAAW,SAAS;AAAA,EAClC;AAAA,EAEA,MAAM,oBAAoB,WAAmB,SAAkB,SAAkB;AAC/E,UAAM,KAAK,SAAS,oBAAoB,WAAW,SAAS,OAAO;AAAA,EACrE;AAAA,EAEA,MAAM,mBAAmB,WAAmB,SAAkB,SAAkB;AAC9E,UAAM,KAAK,SAAS,mBAAmB,WAAW,UAAU,SAAS,OAAO;AAAA,EAC9E;AAAA,EAEA,MAAM,yBAAyB,WAAmB,SAAkB,SAAkB;AACpF,UAAM,KAAK,SAAS,mBAAmB,WAAW,OAAO,SAAS,OAAO;AAAA,EAC3E;AAAA,EAEA,MAAM,aAAa,QAAgB;AACjC,UAAM,KAAK,SAAS,aAAa,MAAM;AAAA,EACzC;AAAA,EAEA,MAAM,eAAe,WAAmB,QAAiB;AAEvD,QAAI;AACJ,QAAI,QAAQ;AACV,YAAM,MAAM,MAAM,KAAK,SAAS,OAAO,MAAM;AAC7C,UAAI,2BAAK,aAAa;AACpB,gBAAQ,MAAM,KAAK,SAAS,mBAAmB,OAAO,SAAS,GAAG,IAAI,WAAW,GAAG;AAAA,MACtF;AAAA,IACF,OAAO;AACL,cAAQ,MAAM,KAAK,SAAS,mBAAmB,OAAO,SAAS,CAAC,GAAG;AAAA,IACrE;AAGA,WAAO,MAAM,QAAQ,IAAI,KAAK,IAAI,UAAe,aAAa,MAAM,IAAI,CAAC,CAAC;AAAA,EAC5E;AACF;AAtEa,OAAAA,UAAA;AAAA,CAwEN,CAAUA,aAAV;AASE,EAAMA,SAAA,iBAAyC,sBAAO,OAAO;AAAA,IAClE,mBAAmB,sBAAO,QAAQ,EAAE,YAAY,iBAAiB,EAAE,QAAQ,IAAI;AAAA,EACjF,CAAC,EAAE,YAAY,MAAM;AAAA,GAXNA,wBAAA;;;AEhEV,IAAM,aAAN,cAAyBC,SAAQ;AAAA,EAItC,YAAY,KAAc,QAA2B;AACnD,UAAM,KAAK,MAAM;AAHnB,kBAAS;AAIP,SAAK,SAAS,OAAO;AACrB,SAAK,WAAW,OAAO,OAAO;AAC9B,SAAK,SAAS,OAAO,QAAQ;AAC7B,SAAK,SAAS,OAAO,QAAQ;AAC7B,SAAK,WAAW,OAAO,QAAQ;AAC/B,SAAK,OAAO,WAAW;AAAA,EACzB;AAAA,EAEA,IAAI,SAAS;AACX,WAAO,KAAK,OAAO;AAAA,EACrB;AAAA,EAEA,IAAI,OAAO,QAAQ;AACjB,SAAK,OAAO,SAAS;AAAA,EACvB;AAAA,EAEA,MAAM,QAAQ;AACZ,UAAM,KAAK,IAAI,SAAS,eAAe,IAAI;AAAA,EAC7C;AAAA,EAEA,MAAM,OAAO;AAEX,QAAI,CAAC,KAAK;AAAQ;AAElB,SAAK,SAAS;AACd,UAAM,KAAK,IAAI,SAAS,kBAAkB,IAAI;AAAA,EAChD;AAAA,EAEA,MAAM,WAAW,WAAmB,SAAkB;AACpD,UAAM,WAAW,MAAM,KAAK,eAAe,OAAO;AAClD,WAAO,SAAS,KAAK,CAAC,YAAY,QAAQ,cAAc,SAAS;AAAA,EACnE;AAAA,EAEA,MAAM,eAAe,SAAiB;AACpC,UAAM,OAAO,MAAM,KAAK,SAAS,oBAAoB,SAAS,KAAK;AACnE,YAAQ,QAAQ,CAAC,GAAG,IAAW,YAAY;AAAA,EAC7C;AAAA,EAEA,MAAM,SAAS,SAAiB;AAC9B,UAAM,OAAO,MAAM,KAAK,SAAS,oBAAoB,OAAO;AAC5D,WAAc,WAAW,IAAI;AAAA,EAC/B;AAAA,EAEA,MAAM,eAAe;AACnB,UAAM,OAAO,MAAM,KAAK,SAAS,aAAa;AAC9C,WAAO,KAAK,IAAW,UAAU;AAAA,EACnC;AAAA,EAEA,MAAM,eAAe,SAAiB,QAAgB;AACpD,UAAM,UAAU,MAAM,KAAK,SAAS,sBAAsB,SAAS,MAAM;AACzE,WAAc,0BAA0B,OAAO;AAAA,EACjD;AAAA,EAEA,MAAM,mBAAmB,SAAiB;AAvE5C;AAwEI,QAAI;AACJ,QAAI,OAAgC,CAAC;AACrC,WAAO,MAAM;AACX,YAAM,OAAO,MAAM,KAAK,SAAS,mBAAmB,SAAS,SAAS;AACtE,UAAI,GAAC,UAAK,YAAL,mBAAc;AAAQ;AAC3B,aAAO,KAAK,OAAO,KAAK,QAAQ,IAAW,sBAAsB,CAAC;AAClE,UAAI,KAAK;AAAU;AACnB,kBAAY,KAAK;AAAA,IACnB;AACA,WAAO;AAAA,EACT;AACF;AAvEa;;;ACZb,IAAAC,iBAA8B;AAEvB,SAAS,OAAO,MAAc,OAAqB;AACxD,MAAI,SAAS;AAAQ,WAAO,MAAM;AAClC,MAAI,SAAS,SAAS;AACtB,aAAW,OAAO,OAAO;AACvB,QAAI,MAAM;AAAM,gBAAU,IAAI,OAAO,uBAAQ,OAAO,MAAM,MAAM,IAAI;AAAA,EACtE;AACA,SAAO,SAAS;AAClB;AAPgB;AAAA,CAeT,CAAUC,YAAV;AACE,WAAS,OAAO,QAAa,SAAS,OAAO;AAClD,UAAM,SAAS,OAAO,MAAM,EACzB,QAAQ,MAAM,OAAO,EACrB,QAAQ,OAAO,OAAO,EACtB,QAAQ,OAAO,OAAO;AACzB,WAAO,SACH,OAAO,QAAQ,MAAM,OAAO,EAAE,QAAQ,iFAAiF,GAAG,IAC1H;AAAA,EACN;AARO,EAAAA,QAAS;AAAA;AAUT,WAAS,SAAS,QAAgB;AACvC,WAAO,OAAO,MAAM,EACjB,QAAQ,UAAU,GAAG,EACrB,QAAQ,UAAU,GAAG,EACrB,QAAQ,UAAU,GAAG,EACrB,QAAQ,UAAU,GAAG;AAAA,EAC1B;AANO,EAAAA,QAAS;AAAA;AAQhB,QAAM,UAAU;AAET,WAAS,KAAK,QAAwB;AAC3C,UAAM,UAAU,QAAQ,KAAK,MAAM;AACnC,QAAI,CAAC;AAAS,aAAO;AACrB,UAAM,CAAC,EAAE,MAAM,KAAK,IAAI;AACxB,UAAM,OAAqB,CAAC;AAC5B,aAAS,MAAM,MAAM,CAAC,EAAE,MAAM,GAAG,EAAE,QAAQ,CAAC,QAAQ;AAClD,YAAM,QAAQ,IAAI,QAAQ,GAAG;AAC7B,WAAK,IAAI,MAAM,GAAG,KAAK,KAAK,SAAS,IAAI,MAAM,QAAQ,CAAC,CAAC;AAAA,IAC3D,CAAC;AACD,WAAO,EAAE,MAAM,MAAM,QAAQ;AAAA,EAC/B;AAVO,EAAAA,QAAS;AAAA;AAYT,WAAS,MAAM,QAA2B;AAC/C,QAAI,OAAO,WAAW,UAAU;AAC9B,aAAO,OAAO,IAAI,CAAC,EAAE,MAAM,KAAK,UAAM,wBAAQ,MAAM,IAAI,CAAC;AAAA,IAC3D;AACA,UAAM,WAAsB,CAAC;AAC7B,QAAI;AACJ,WAAQ,SAAS,KAAK,MAAM,GAAI;AAC9B,YAAM,EAAE,MAAM,MAAM,QAAQ,IAAI;AAChC,UAAI,QAAQ,OAAO;AACjB,iBAAS,SAAK,wBAAQ,QAAQ,EAAE,SAAS,SAAS,OAAO,MAAM,GAAG,QAAQ,KAAK,CAAC,EAAE,CAAC,CAAC;AAAA,MACtF;AACA,eAAS,SAAK,wBAAQ,MAAM,IAAI,CAAC;AACjC,eAAS,OAAO,MAAM,QAAQ,QAAQ,QAAQ,GAAG,MAAM;AAAA,IACzD;AACA,QAAI;AAAQ,eAAS,SAAK,wBAAQ,QAAQ,EAAE,SAAS,SAAS,MAAM,EAAE,CAAC,CAAC;AACxE,WAAO;AAAA,EACT;AAhBO,EAAAA,QAAS;AAAA;AAAA,GAjCD;;;ARLV,IAAM,YAAN,cAAuEC,SAAW;AAAA,EAGvF,YAAY,KAAc,QAAW;AACnC,UAAM,KAAK,MAAM;AACjB,SAAK,SAAS,OAAO;AACrB,SAAK,WAAW,IAAW,SAAS;AACpC,SAAK,SAAS,wCAAwC,OAAO;AAE7D,QAAI,OAAO,aAAa,QAAQ;AAC9B,UAAI,OAAO,YAAY,IAAI;AAAA,IAC7B,WAAW,OAAO,aAAa,MAAM;AACnC,UAAI,OAAO,UAAU,IAAI;AAAA,IAC3B,WAAW,OAAO,aAAa,cAAc;AAC3C,UAAI,OAAO,UAAU,IAAI;AAAA,IAC3B;AAAA,EACF;AAAA,EAEA,MAAM,OAAO;AACX,QAAI,KAAK,UAAU;AAEjB,aAAO,KAAK,IAAI,KAAK,KAAK,SAAS;AAAA,IACrC;AACA,UAAM,MAAM,KAAK;AAAA,EACnB;AAAA,EAEA,MAAM,aAAa;AACjB,UAAM,QAAQ,IAAI;AAAA,MAChB,KAAK,QAAQ,EAAE,KAAK,UAAQ,OAAO,OAAO,MAAM,IAAI,CAAC;AAAA,MACrD,KAAK,kBAAkB,EAAE,MAAM,mBAAI;AAAA,IACrC,CAAC,EAAE,KAAK,MAAM,KAAK,OAAO,GAAG,WAAS,KAAK,QAAQ,KAAK,CAAC;AAAA,EAC3D;AAAA,EAEA,MAAM,oBAAoB;AACxB,UAAM,UAAU,MAAM,KAAK,SAAS,uBAAuB;AAE3D,QAAI,EAAC,mCAAS,YAAW,QAAQ,YAAY;AAAK;AAClD,SAAK,IAAI,OAAO,YAAY;AAAA,MAC1B,GAAG,KAAK,OAAO;AAAA,MACf;AAAA,MACA,QAAQ;AAAA,MACR,UAAU,KAAK,OAAO;AAAA,IACxB,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,WAAW,WAAmB;AAClC,UAAM,OAAO,MAAM,KAAK,SAAS,aAAa,SAAS;AACvD,WAAc,aAAa,IAAI;AAAA,EACjC;AAAA,EAEA,MAAM,SAAS,SAAiB;AAC9B,UAAM,OAAO,MAAM,KAAK,SAAS,aAAa,OAAO;AACrD,WAAc,WAAW,IAAI;AAAA,EAC/B;AAAA,EAEA,MAAM,eAAe;AACnB,UAAM,OAAO,MAAM,KAAK,SAAS,aAAa;AAC9C,WAAO,KAAK,IAAW,UAAU;AAAA,EACnC;AAAA,EAEA,MAAM,eAAe,SAAiB,QAAgB;AACpD,UAAM,OAAO,MAAM,KAAK,SAAS,mBAAmB,SAAS,MAAM;AACnE,WAAc,iBAAiB,IAAI;AAAA,EACrC;AAAA,EAEA,MAAM,mBAAmB,SAAiB;AACxC,UAAM,OAAO,MAAM,KAAK,SAAS,mBAAmB,OAAO;AAC3D,WAAO,KAAK,IAAW,gBAAgB;AAAA,EACzC;AAAA,EAEA,MAAM,gBAAgB,SAAiB,QAAgB,WAAqB;AAC1E,WAAO,KAAK,SAAS,aAAa,SAAS,QAAQ,SAAS;AAAA,EAC9D;AAAA,EAEA,MAAM,gBAAgB,SAAiB,QAAgB,UAAkB;AACvE,WAAO,KAAK,SAAS,YAAY,SAAS,QAAQ,WAAW,GAAI;AAAA,EACnE;AAAA,EAEA,MAAM,YAAY,WAAmB,SAAkB,QAAkB;AACvE,WAAO,KAAK,SAAS,iBAAiB,WAAW,MAAM;AAAA,EACzD;AACF;AAjFa;AAmFb,UAAU,UAAU,WAAW;AAAA,CAExB,CAAUC,eAAV;AAGE,EAAMA,WAAA,gBAAuC,sBAAO,OAAO;AAAA,IAChE,UAAU,sBAAO,OAAO,EAAE,QAAQ,SAAS,EAAE,YAAY,YAAY;AAAA,EACvE,CAAC;AASM,EAAMA,WAAA,aAAiC,sBAAO,OAAO;AAAA,IAC1D,QAAQ,sBAAO,OAAO,EAAE,YAAY,SAAS,EAAE,SAAS;AAAA,IACxD,OAAO,sBAAO,OAAO,EAAE,KAAK,QAAQ,EAAE,YAAY,oDAAoD;AAAA,IACtG,UAAU,sBAAO,MAAM,CAAC,QAAQ,MAAM,YAAY,CAAC,EAAE,YAAY,WAAW,EAAE,QAAQ,YAAY;AAAA,IAClG,SAASA,WAAA,cAAc,OAAO;AAAA,EAChC,CAAC;AAIM,EAAMA,WAAA,SAAyB,sBAAO,UAAU;AAAA,IACrDA,WAAA;AAAA,IACA,sBAAO,MAAM;AAAA,MACX,WAAW;AAAA,MACX,SAAS;AAAA,MACT,SAAS;AAAA,IACX,CAAC;AAAA,IACD,sBAAO,OAAO;AAAA,MACZ,UAAUD,SAAQ;AAAA,IACpB,CAAC;AAAA,EACH,CAAC;AAAA,GAjCc;;;ADxFjB,IAAO,cAAQ;",
  "names": ["BaseBot", "import_satori", "import_satori", "import_satori", "SafetyLevel", "name", "logger", "logger", "bot", "HttpServer", "import_satori", "logger", "WsClient", "bot", "WsServer", "import_satori", "import_satori", "BaseBot", "BaseBot", "import_satori", "CQCode", "BaseBot", "OneBotBot"]
}
