import { Bot, Context, Fragment, Quester, Schema, SendOptions } from '@satorijs/satori';
import { Method } from 'axios';
import * as Kook from './types';
import { WsClient } from './ws';
import { HttpServer } from './http';
import { KookMessenger } from './message';
export declare class KookBot<T extends KookBot.Config = KookBot.Config> extends Bot<T> {
    http: Quester;
    internal: Kook.Internal;
    constructor(ctx: Context, config: T);
    request<T = any>(method: Method, path: string, data?: {}, headers?: any): Promise<T>;
    sendMessage(channelId: string, content: Fragment, guildId?: string, options?: SendOptions): any;
    sendPrivateMessage(target_id: string, content: Fragment, options?: SendOptions): any;
    deleteMessage(channelId: string, msg_id: string): Promise<void>;
    editMessage(channelId: string, msg_id: string, content: Fragment): Promise<void>;
    getMessage(channelId: string, msg_id: string): Promise<Partial<import("@satorijs/core").Session>>;
    $createReaction(channelId: string, msg_id: string, emoji: string): Promise<void>;
    $deleteReaction(channelId: string, messageId: string, emoji: string, user_id?: string): Promise<void>;
    getSelf(): Promise<import("@satorijs/core").Universal.User>;
    getGuildList(): Promise<import("@satorijs/core").Universal.Guild[]>;
    getGuildMemberList(guild_id: string): Promise<import("@satorijs/core").Universal.Author[]>;
    setGroupNickname(guild_id: string, user_id: string, nickname: string): Promise<void>;
    leaveGroup(guild_id: string): Promise<void>;
    kickGroup(guild_id: string, user_id: string): Promise<void>;
}
export declare namespace KookBot {
    interface BaseConfig extends Bot.Config, Quester.Config, KookMessenger.Config {
    }
    type Config = BaseConfig & (HttpServer.Config | WsClient.Config);
    const Config: Schema<Config>;
}
