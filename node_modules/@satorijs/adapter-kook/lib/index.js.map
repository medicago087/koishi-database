{
  "version": 3,
  "sources": ["../src/index.ts", "../src/bot.ts", "../src/utils.ts", "../src/types.ts", "../src/ws.ts", "../src/http.ts", "../src/message.ts"],
  "sourcesContent": ["import { KookBot } from './bot'\nimport * as Kook from './types'\n\nexport { Kook }\n\nexport * from './bot'\nexport * from './message'\nexport * from './http'\nexport * from './ws'\nexport * from './utils'\n\nexport default KookBot\n", "import { Bot, Context, Fragment, Quester, Schema, segment } from '@satorijs/satori'\nimport { Method } from 'axios'\nimport { adaptAuthor, adaptGroup, adaptMessage, adaptUser } from './utils'\nimport * as Kook from './types'\nimport FormData from 'form-data'\nimport { WsClient } from './ws'\nimport { HttpServer } from './http'\nimport { KookMessenger } from './message'\n\nexport class KookBot<T extends KookBot.Config = KookBot.Config> extends Bot<T> {\n  http: Quester\n  internal: Kook.Internal\n\n  constructor(ctx: Context, config: T) {\n    super(ctx, config)\n    this.http = ctx.http.extend({\n      headers: {\n        'Authorization': `Bot ${config.token}`,\n        'Content-Type': 'application/json',\n      },\n    }).extend(config)\n    this.internal = new Kook.Internal(this.http)\n\n    if (config.protocol === 'http') {\n      ctx.plugin(HttpServer, this)\n    } else if (config.protocol === 'ws') {\n      ctx.plugin(WsClient, this)\n    }\n  }\n\n  async request<T = any>(method: Method, path: string, data = {}, headers: any = {}): Promise<T> {\n    if (method === 'GET') {\n      return (await this.http.get(path, { params: data, headers })).data\n    } else {\n      data = data instanceof FormData ? data : JSON.stringify(data)\n      return (await this.http(method, path, { data, headers })).data\n    }\n  }\n\n  async sendMessage(channelId: string, content: Fragment, guildId?: string) {\n    return new KookMessenger(this, channelId, guildId).send(content)\n  }\n\n  async sendPrivateMessage(target_id: string, content: Fragment) {\n    const { code } = await this.request('POST', '/user-chat/create', { target_id })\n    return this.sendMessage(code, content)\n  }\n\n  async deleteMessage(channelId: string, msg_id: string) {\n    if (channelId.length > 30) {\n      await this.request('POST', '/user-chat/delete-msg', { msg_id })\n    } else {\n      await this.request('POST', '/message/delete', { msg_id })\n    }\n  }\n\n  async editMessage(channelId: string, msg_id: string, content: Fragment) {\n    content = segment.normalize(content).join('')\n    if (channelId.length > 30) {\n      await this.request('POST', '/user-chat/update-msg', { msg_id, content })\n    } else {\n      await this.request('POST', '/message/update', { msg_id, content })\n    }\n  }\n\n  async getMessage(channelId: string, msg_id: string) {\n    if (channelId.length > 30) {\n      return adaptMessage(await this.request('POST', '/user-chat/view', { msg_id }))\n    } else {\n      return adaptMessage(await this.request('POST', '/message/view', { msg_id }))\n    }\n  }\n\n  async $createReaction(channelId: string, msg_id: string, emoji: string) {\n    if (channelId.length > 30) {\n      await this.request('POST', '/direct-message/add-reaction', { msg_id, emoji })\n    } else {\n      await this.request('POST', '/message/add-reaction', { msg_id, emoji })\n    }\n  }\n\n  async $deleteReaction(channelId: string, messageId: string, emoji: string, user_id?: string) {\n    if (channelId.length > 30) {\n      await this.request('POST', '/direct-message/delete-reaction', { msg_id: messageId, emoji })\n    } else {\n      await this.request('POST', '/message/delete-reaction', { msg_id: messageId, emoji, user_id })\n    }\n  }\n\n  async getSelf() {\n    const data = adaptUser(await this.request<Kook.Self>('GET', '/user/me'))\n    data['selfId'] = data.userId\n    delete data.userId\n    return data\n  }\n\n  async getGuildList() {\n    const { items } = await this.request<Kook.GuildList>('GET', '/guild/list')\n    return items.map(adaptGroup)\n  }\n\n  async getGuildMemberList(guild_id: string) {\n    const { items } = await this.request<Kook.GuildMemberList>('GET', '/guild/user-list', { guild_id })\n    return items.map(adaptAuthor)\n  }\n\n  async setGroupNickname(guild_id: string, user_id: string, nickname: string) {\n    await this.request('POST', '/guild/nickname', { guild_id, user_id, nickname })\n  }\n\n  async leaveGroup(guild_id: string) {\n    await this.request('POST', '/guild/leave', { guild_id })\n  }\n\n  async kickGroup(guild_id: string, user_id: string) {\n    await this.request('POST', '/guild/kickout', { guild_id, user_id })\n  }\n}\n\nexport namespace KookBot {\n  export interface BaseConfig extends Bot.Config, Quester.Config, KookMessenger.Config {}\n\n  export type Config = BaseConfig & (HttpServer.Config | WsClient.Config)\n\n  export const Config: Schema<Config> = Schema.intersect([\n    Schema.object({\n      protocol: Schema.union(['http', 'ws']).description('选择要使用的协议。').required(),\n    }),\n    Schema.union([\n      WsClient.Config,\n      HttpServer.Config,\n    ]),\n    KookMessenger.Config,\n    Quester.createConfig('https://www.kookapp.cn/api/v3'),\n  ] as const)\n}\n\n// for backward compatibility\nKookBot.prototype.platform = 'kook'\n", "import { Bot, segment, Session, Universal } from '@satorijs/satori'\nimport * as Kook from './types'\n\nexport const adaptGroup = (data: Kook.Guild): Universal.Guild => ({\n  guildId: data.id,\n  guildName: data.name,\n})\n\nexport const adaptUser = (user: Kook.User): Universal.User => ({\n  userId: user.id,\n  avatar: user.avatar,\n  username: user.username,\n  discriminator: user.identify_num,\n})\n\nexport const adaptAuthor = (author: Kook.Author): Universal.Author => ({\n  ...adaptUser(author),\n  nickname: author.nickname,\n})\n\ninterface Rule {\n  pattern: RegExp\n  transform: (...args: string[]) => segment\n}\n\nconst rules: Rule[] = [{\n  pattern: /@(.+?)#(\\d+)/,\n  transform: (_, name, id) => segment('at', { id, name }),\n}, {\n  pattern: /@全体成员/,\n  transform: () => segment('at', { type: 'all' }),\n}, {\n  pattern: /@在线成员/,\n  transform: () => segment('at', { type: 'here' }),\n}, {\n  pattern: /@role:(\\d+);/,\n  transform: (_, role) => segment('at', { role }),\n}, {\n  pattern: /#channel:(\\d+);/,\n  transform: (_, id) => segment.sharp(id),\n}]\n\nfunction adaptMessageMeta(base: Kook.MessageBase, meta: Kook.MessageMeta, session: Universal.MessageBase = {}) {\n  if (meta.author) {\n    session.author = adaptAuthor(meta.author)\n    session.userId = meta.author.id\n  }\n  if (base.type === Kook.Type.text) {\n    session.content = base.content\n      .replace(/@(.+?)#(\\d+)/, (_, name, id) => segment('at', { id, name }).toString())\n      .replace(/@全体成员/, () => segment('at', { type: 'all' }).toString())\n      .replace(/@在线成员/, () => segment('at', { type: 'here' }).toString())\n      .replace(/@role:(\\d+);/, (_, role) => segment('at', { role }).toString())\n      .replace(/#channel:(\\d+);/, (_, id) => segment.sharp(id).toString())\n    session.elements = segment.parse(session.content)\n  } else if (base.type === Kook.Type.image) {\n    const element = segment('image', { url: base.content, file: meta.attachments?.name })\n    session.elements = [element]\n    session.content = element.toString()\n  } else if (base.type == Kook.Type.kmarkdown) {\n    session.content = base.content\n      .replace(/\\(met\\)all\\(met\\)/g, () => segment('at', { type: 'all' }).toString())\n      .replace(/\\(met\\)here\\(met\\)/g, () => segment('at', { type: 'here' }).toString())\n      .replace(/\\(chn\\)(\\d+)\\(chn\\)/g, (_, id) => segment.sharp(id).toString())\n    for (const mention of meta.kmarkdown.mention_part) {\n      session.content = session.content\n        .replace(`(met)${mention.id}(met)`, segment.at(mention.id, { name: mention.username }).toString())\n    }\n    for (const mention of meta.kmarkdown.mention_role_part) {\n      const element = segment('at', { role: mention.role_id, name: mention.name })\n      session.content = session.content.replace(`(rol)${mention.role_id}(rol)`, element.toString())\n    }\n    session.content = session.content\n      .replace(/\\\\\\*/g, () => '*')\n      .replace(/\\\\\\\\/g, () => '\\\\')\n      .replace(/\\\\\\(/g, () => '(')\n      .replace(/\\\\\\)/g, () => ')')\n    session.elements = segment.parse(session.content)\n  }\n  return session\n}\n\nexport function adaptMessage(message: Kook.Message, session: Partial<Session> = {}) {\n  adaptMessageMeta(message, message, session)\n  session.messageId = message.id\n  return session\n}\n\nfunction adaptMessageSession(data: Kook.Data, meta: Kook.MessageMeta, session: Partial<Session> = {}) {\n  adaptMessageMeta(data, meta, session)\n  session.messageId = data.msg_id\n  session.timestamp = data.msg_timestamp\n  const subtype = data.channel_type === 'GROUP' ? 'group' : 'private'\n  session.subtype = subtype\n  if (meta.quote) {\n    session.quote = adaptMessageMeta(meta.quote, meta.quote)\n    session.quote.messageId = meta.quote.id\n    session.quote.channelId = session.channelId\n    session.quote.subtype = subtype\n  }\n  return session\n}\n\nfunction adaptMessageCreate(data: Kook.Data, meta: Kook.MessageExtra, session: Partial<Session>) {\n  adaptMessageSession(data, meta, session)\n  session.guildId = meta.guild_id\n  session.channelName = meta.channel_name\n  if (data.channel_type === 'GROUP') {\n    session.subtype = 'group'\n    session.channelId = data.target_id\n  } else {\n    session.subtype = 'private'\n    session.channelId = meta.code\n  }\n}\n\nfunction adaptMessageModify(data: Kook.Data, meta: Kook.NoticeBody, session: Partial<Session>) {\n  adaptMessageSession(data, meta, session)\n  session.messageId = meta.msg_id\n  session.channelId = meta.channel_id\n}\n\nfunction adaptReaction(body: Kook.NoticeBody, session: Partial<Session>) {\n  session.channelId = body.channel_id\n  session.messageId = body.msg_id\n  session.userId = body.user_id\n  session['emoji'] = body.emoji.id\n}\n\nexport function adaptSession(bot: Bot, input: any) {\n  const session = bot.session()\n  if (input.type === Kook.Type.system) {\n    const { type, body } = input.extra as Kook.Notice\n    switch (type) {\n      case 'updated_message':\n      case 'updated_private_message':\n        session.type = 'message-updated'\n        adaptMessageModify(input, body, session)\n        break\n      case 'deleted_message':\n      case 'deleted_private_message':\n        session.type = 'message-deleted'\n        adaptMessageModify(input, body, session)\n        break\n      case 'added_reaction':\n      case 'private_added_reaction':\n        session.type = 'reaction-added'\n        adaptReaction(body, session)\n        break\n      case 'deleted_reaction':\n      case 'private_deleted_reaction':\n        session.type = 'reaction-deleted'\n        adaptReaction(body, session)\n        break\n      default: return\n    }\n  } else {\n    session.type = 'message'\n    adaptMessageCreate(input, input.extra as Kook.MessageExtra, session)\n    if (!session.content) return\n  }\n  return session\n}\n", "import { Quester } from '@satorijs/satori'\n\nexport enum Signal {\n  event,\n  hello,\n  ping,\n  pong,\n  reconnect,\n  resume,\n}\n\nexport interface Payload {\n  s: Signal\n  sn?: number\n  d: Data\n}\n\nexport enum Type {\n  text = 1,\n  image = 2,\n  video = 3,\n  file = 4,\n  unknown = 7,\n  audio = 8,\n  kmarkdown = 9,\n  card = 10,\n  system = 255,\n}\n\nexport interface MessageParams {\n  type: Type\n  msg_id: string\n  chat_code: string\n  target_id: string\n  content: any\n  quote: string\n  nonce: string\n}\n\nexport interface MessageBase {\n  type: Type\n  content: string\n  extra: MessageExtra | Notice\n}\n\nexport interface Data extends MessageBase {\n  channel_type: 'GROUP' | 'PERSON' | 'WEBHOOK_CHALLENGE'\n  challenge: string\n  verify_token: string\n  target_id: string\n  author_id: string\n  msg_id: string\n  msg_timestamp: number\n  nonce: string\n}\n\ntype AttachmentType = 'image' | 'video' | 'audio' | 'file'\ntype NoticeType =\n  | 'message_btn_click'\n  | 'added_reaction' | 'deleted_reaction'\n  | 'updated_message' | 'deleted_message'\n  | 'joined_guild' | 'exited_guild'\n  | 'updated_guild_member'\n  | 'added_channel' | 'updated_channel' | 'deleted_channel'\n  | 'updated_private_message' | 'deleted_private_message'\n  | 'private_added_reaction' | 'private_deleted_reaction'\n  | 'joined_channel' | 'exited_channel'\n  | 'guild_member_online' | 'guild_member_offline'\n\nexport interface MessageMeta {\n  mention: string[]\n  mention_all: boolean\n  mention_roles: string[]\n  mention_here: boolean\n  attachments: Attachment\n  quote: Message\n  author: Author\n  kmarkdown?: {\n    raw_content: string\n    mention_part: KmarkdownUserMeta[]\n    mention_role_part: KmarkdownRoleMeta[]\n  }\n}\n\nexport interface KmarkdownUserMeta {\n  id: string\n  username: string\n  full_name: string\n  avatar: string\n}\n\nexport interface KmarkdownRoleMeta {\n  role_id: number\n  name: string\n  color: number\n}\n\nexport interface MessageExtra extends MessageMeta {\n  type: Type\n  code: string\n  guild_id: string\n  channel_name: string\n}\n\nexport interface Message extends MessageBase, MessageMeta {\n  id: string\n  embeds: any[]\n  reactions: any[]\n  mention_info: object\n}\n\nexport interface Card {\n  type: 'card'\n  theme?: Card.Theme\n  size?: 'lg' | 'sm'\n  color?: string\n  modules: Card.Module[]\n}\n\nexport namespace Card {\n  export type Theme = 'primary' | 'secondary' | 'warning' | 'danger' | 'info'\n  export type Module = Section | ImageGroup | Header | Divider | File | Countdown | Context\n\n  export interface Text {\n    type: 'plain-text' | 'kmarkdown'\n    content: string\n    emoji?: boolean\n  }\n\n  export interface Paragraph {\n    type: 'paragraph'\n    content: string\n    cols: number\n    fields: Text[]\n  }\n\n  export interface Section {\n    type: 'section'\n    mode?: 'left' | 'right'\n    text: Text | Paragraph\n    accessory?: Image | Button\n  }\n\n  export interface Image {\n    type: 'image'\n    size?: 'lg' | 'sm'\n    src: string\n    alt?: string\n    circle?: boolean\n  }\n\n  export interface Button {\n    type: 'button'\n    theme?: Theme\n    value: string\n    text: Text\n    click?: string\n  }\n\n  export interface ImageGroup {\n    type: 'image-group'\n    elements: Image[]\n  }\n\n  export interface Header {\n    type: 'header'\n    text: Text\n  }\n\n  export interface Divider {\n    type: 'divider'\n  }\n\n  export interface ActionGroup {\n    type: 'action-group'\n    elements: Button[]\n  }\n\n  export interface Context {\n    type: 'context'\n    elements: (Text | Image)[]\n  }\n\n  export interface File {\n    type: 'file' | 'audio' | 'video'\n    src: string\n    title: string\n    cover?: string\n  }\n\n  export interface Countdown {\n    type: 'countdown'\n    end_time: string\n    start_time: string\n    mode: 'day' | 'hour' | 'second'\n  }\n}\n\nexport interface User {\n  id: string\n  username: string\n  identify_num: string\n  avatar: string\n  online: boolean\n  bot?: boolean\n}\n\nexport enum UserStatus {\n  normal = 0,\n  banned = 10,\n}\n\nexport interface Self extends User {\n  status: UserStatus\n  mobile_verified: boolean\n  system: boolean\n  mobile_prefix: string\n  mobile: string\n  invited_count: number\n}\n\nexport interface Author extends User {\n  roles: number[]\n  nickname?: string\n}\n\nexport interface Attachment {\n  type: AttachmentType\n  name: string\n  url: string\n  file_type: string\n  size: number\n  duration: number\n  width: number\n  height: number\n}\n\nexport interface Notice {\n  type: NoticeType\n  body: NoticeBody\n}\n\nexport interface Channel {\n  id: string\n  name: string\n  user_id: string\n  guild_id: string\n  isCategory: number\n  parentId: string\n  topic: string\n  type: number\n  level: number\n  slow_mode: number\n  permission_overwrites: Overwrite\n  permission_users: any\n  permission_sync: 0 | 1\n}\n\nexport interface NoticeBody extends Channel, MessageMeta {\n  value: string\n  msg_id: string\n  target_id: string\n  channel_id: string\n  emoji: Emoji\n  content: string\n  icon: string\n  notify_type: number\n  region: string\n  enable_open: number\n  openId: number\n  default_channel_id: string\n  welcome_channel_id: string\n  updated_at: number\n  joined_at: number\n  exited_at: number\n  deleted_at: number\n  nickname: string\n  chat_code: string\n  event_time: number\n  guilds: string[]\n}\n\nexport interface Emoji {\n  id: string\n  name: string\n}\n\nexport interface Overwrite {\n  role_id: number\n  allow: number\n  deny: number\n}\n\nexport interface ListMeta {\n  page: number\n  page_total: number\n  page_size: number\n  total: number\n}\n\nexport interface List<T> {\n  items: T[]\n  meta: ListMeta\n  sort: Partial<Record<keyof T, number>>\n}\n\nexport interface Guild {\n  id: string\n  name: string\n  topic: string\n  master_id: string\n  is_master: boolean\n  icon: string\n  invite_enabled: number\n  notify_type: number\n  region: string\n  enable_open: number\n  openId: string\n  default_channel_id: string\n  welcome_channel_id: string\n}\n\nexport interface GuildList extends List<Guild> {}\n\nexport interface GuildMember extends User {\n  joined_at: number\n  active_time: number\n  roles: number[]\n  is_master: boolean\n  abbr: string\n}\n\nexport interface GuildMemberList extends List<GuildMember> {\n  user_count: number\n  online_count: number\n  offline_count: number\n}\n\ninterface Pagination {\n  page?: number\n  page_size?: number\n  sort?: string[]\n}\n\nexport interface Internal {\n  getGuildList(param?: Pagination): Promise<List<Guild>>\n  getGuildView(param: { guild_id: string }): Promise<Guild>\n}\n\nexport class Internal {\n  constructor(private http: Quester) {}\n\n  static define(name: string, method: Quester.Method, path: string) {\n    Internal.prototype[name] = function (this: Internal, ...args: any[]) {\n      const config: Quester.AxiosRequestConfig = {}\n      if (method === 'GET' || method === 'DELETE') {\n        config.params = args[0]\n      } else {\n        config.data = args[0]\n      }\n      return this.http(method, path, config)\n    }\n  }\n}\n\nInternal.define('getGuildList', 'GET', '/guild/list')\nInternal.define('getGuildView', 'GET', '/guild/view')\nInternal.define('getGuildUserList', 'GET', '/guild/user-list')\nInternal.define('setGuildUserNickname', 'POST', '/guild/nickname')\nInternal.define('leaveGuild', 'POST', '/guild/leave')\nInternal.define('kickoutGuildUser', 'POST', '/guild/kickout')\nInternal.define('getGuildMuteList', 'GET', '/guild-mute/list')\nInternal.define('setGuildMute', 'POST', '/guild-mute/create')\nInternal.define('unsetGuildMute', 'POST', '/guild-mute/delete')\n", "import { Adapter, Logger, Schema, Time } from '@satorijs/satori'\nimport { KookBot } from './bot'\nimport { adaptSession } from './utils'\nimport { Payload, Signal } from './types'\nimport WebSocket from 'ws'\n\nconst logger = new Logger('kook')\n\nconst heartbeatIntervals = [6, 2, 4]\n\nexport class WsClient extends Adapter.WsClient<KookBot> {\n  _sn = 0\n  _ping: NodeJS.Timeout\n  _heartbeat: NodeJS.Timeout\n\n  async prepare(bot: KookBot) {\n    const { url } = await bot.request('GET', '/gateway/index?compress=0')\n    const headers = { Authorization: `Bot ${bot.config.token}` }\n    return new WebSocket(url, { headers })\n  }\n\n  heartbeat(bot: KookBot) {\n    if (!bot.socket || bot.status !== 'online') {\n      clearInterval(this._heartbeat)\n      return\n    }\n    let trials = 0\n    const send = () => {\n      if (!bot.socket) return\n      if (trials >= 2) {\n        return bot.socket.close(1013)\n      }\n      bot.socket.send(JSON.stringify({ s: Signal.ping, sn: this._sn }))\n      this._ping = setTimeout(send, heartbeatIntervals[trials++] * Time.second)\n    }\n    send()\n  }\n\n  async accept(bot: KookBot) {\n    this._sn = 0\n    clearInterval(this._heartbeat)\n\n    bot.socket.on('message', async (data) => {\n      let parsed: Payload\n      try {\n        parsed = JSON.parse(data.toString())\n      } catch (error) {\n        return logger.warn('cannot parse message', data)\n      }\n\n      if (parsed.s === Signal.event) {\n        this._sn = Math.max(this._sn, parsed.sn)\n        const session = adaptSession(bot, parsed.d)\n        if (session) bot.dispatch(session)\n      } else if (parsed.s === Signal.hello) {\n        this._heartbeat = setInterval(() => this.heartbeat(bot), Time.minute * 0.5)\n        Object.assign(bot, await bot.getSelf())\n        bot.online()\n      } else if (parsed.s === Signal.pong) {\n        clearTimeout(this._ping)\n      } else if (parsed.s === Signal.resume) {\n        bot.socket.close(1013)\n      }\n    })\n  }\n}\n\nexport namespace WsClient {\n  export interface Config extends Adapter.WsClient.Config {\n    protocol: 'ws'\n    token: string\n  }\n\n  export const Config: Schema<Config> = Schema.intersect([\n    Schema.object({\n      protocol: Schema.const('ws' as const).required(),\n      token: Schema.string().description('机器人的用户令牌。').role('secret').required(),\n    }),\n    Adapter.WsClient.Config,\n  ])\n}\n", "import { Adapter, Context, Logger, sanitize, Schema } from '@satorijs/satori'\nimport { KookBot } from './bot'\nimport { adaptSession } from './utils'\n\nconst logger = new Logger('kook')\n\nexport class HttpServer extends Adapter.Server<KookBot<KookBot.BaseConfig & HttpServer.Config>> {\n  constructor(ctx: Context, bot: KookBot) {\n    super()\n    let { path } = bot.config as HttpServer.Config\n    path = sanitize(path)\n    ctx.router.post(path, (ctx) => {\n      const { body } = ctx.request\n      logger.debug('receive %o', body)\n\n      const { challenge } = body.d\n      ctx.status = 200\n      if (challenge) {\n        ctx.body = { challenge }\n        return\n      }\n\n      const bot = this.bots.find(bot => bot.config.verifyToken === body.d.verify_token)\n      if (!bot) return\n\n      // dispatch events\n      const session = adaptSession(bot, body.d)\n      if (session) bot.dispatch(session)\n    })\n  }\n\n  async start(bot: KookBot) {\n    Object.assign(bot, await bot.getSelf())\n    bot.online()\n  }\n}\n\nexport namespace HttpServer {\n  export interface Config {\n    protocol: 'http'\n    path?: string\n    token: string\n    verifyToken: string\n  }\n\n  export const Config: Schema<Config> = Schema.object({\n    protocol: Schema.const('http' as const).required(),\n    path: Schema.string().description('服务器监听的路径。').default('/kook'),\n    token: Schema.string().description('机器人的用户令牌。').role('secret').required(),\n    verifyToken: Schema.string().description('机器人的验证令牌。').role('secret').required(),\n  })\n}\n", "import { Messenger, Schema, segment } from '@satorijs/satori'\nimport FormData from 'form-data'\nimport { KookBot } from './bot'\nimport { adaptMessage } from './utils'\nimport * as Kook from './types'\nimport internal from 'stream'\n\nconst attachmentTypes = ['image', 'video', 'audio', 'file']\n\nexport class KookMessenger extends Messenger<KookBot> {\n  private path: string\n  private params = {} as Partial<Kook.MessageParams>\n  private additional = {} as Partial<Kook.MessageParams>\n  private buffer: string = ''\n\n  constructor(bot: KookBot, channelId: string, guildId?: string) {\n    super(bot, channelId, guildId)\n    if (channelId.length > 30) {\n      this.params.chat_code = channelId\n      this.path = '/user-chat/create-msg'\n    } else {\n      this.params.target_id = channelId\n      this.path = '/message/create'\n    }\n  }\n\n  async post(type: Kook.Type, content: string) {\n    try {\n      const params = { ...this.params, ...this.additional, type, content }\n      const result = await this.bot.request('POST', this.path, params)\n      const session = this.bot.session()\n      adaptMessage(result, session)\n      this.results.push(session)\n      session.app.emit(session, 'send', session)\n    } catch (e) {\n      this.errors.push(e)\n    }\n  }\n\n  private async transformUrl({ type, attrs }: segment) {\n    if (['file:', 'base64:', 'data:'].some(protocol => attrs.url.startsWith(protocol))) {\n      const payload = new FormData()\n      const result = await this.bot.ctx.http.file(attrs.url)\n      payload.append('file', Buffer.from(result.data), {\n        filename: attrs.file || result.filename,\n      })\n      const { url } = await this.bot.request('POST', '/asset/create', payload, payload.getHeaders())\n      return url\n    } else if (!attrs.url.includes('kaiheila')) {\n      const res = await this.bot.ctx.http.get<internal.Readable>(attrs.url, {\n        headers: { accept: type + '/*' },\n        responseType: 'stream',\n      })\n      const payload = new FormData()\n      payload.append('file', res, {\n        filename: 'file',\n      })\n      const { url } = await this.bot.request('POST', '/asset/create', payload, payload.getHeaders())\n      return url\n    }\n  }\n\n  private async _sendCard(chain: segment[], useMarkdown: boolean) {\n    const type = useMarkdown ? 'kmarkdown' : 'plain-text'\n    let text: Kook.Card.Text = { type, content: '' }\n    let card: Kook.Card = { type: 'card', modules: [] }\n    const output: Kook.Card[] = []\n    const flushText = () => {\n      text.content = text.content.trim()\n      if (!text.content) return\n      card.modules.push({ type: 'section', text })\n      text = { type, content: '' }\n    }\n    const flushCard = () => {\n      flushText()\n      if (!card.modules.length) return\n      output.push(card)\n      card = { type: 'card', modules: [] }\n    }\n\n    for (const element of chain) {\n      const { type, attrs } = element\n      if (type === 'text') {\n        text.content += attrs.content\n      } else if (type === 'at') {\n        if (attrs.id) {\n          text.content += `@user#${attrs.id}`\n        } else if (attrs.type === 'all') {\n          text.content += '@全体成员'\n        } else if (attrs.type === 'here') {\n          text.content += '@在线成员'\n        } else if (attrs.role) {\n          text.content += `@role:${attrs.role};`\n        }\n      } else if (type === 'sharp') {\n        text.content += `#channel:${attrs.id};`\n      } else if (attachmentTypes.includes(type)) {\n        flushText()\n        await this.transformUrl(element)\n        if (type === 'image') {\n          card.modules.push({\n            type: 'image-group',\n            elements: [{\n              type: 'image',\n              src: attrs.url,\n            }],\n          })\n        } else {\n          card.modules.push({\n            type: type as never,\n            src: attrs.url,\n          })\n        }\n      } else if (type === 'card') {\n        flushCard()\n        output.push(JSON.parse(attrs.content))\n      }\n    }\n    flushCard()\n    await this.post(Kook.Type.card, JSON.stringify(output))\n  }\n\n  async flush() {\n    const content = this.buffer.trim()\n    if (!content) return\n    await this.post(Kook.Type.kmarkdown, content)\n    this.buffer = ''\n    this.additional = {}\n  }\n\n  async visit(element: segment) {\n    const { type, attrs, children } = element\n    if (type === 'text') {\n      // https://github.com/satorijs/satori/issues/51\n      this.buffer += attrs.content.replace(/[\\\\*`~()]/g, '\\\\$&')\n    } else if (type === 'b' || type === 'strong') {\n      this.buffer += '**'\n      await this.render(children)\n      this.buffer += '**'\n    } else if (type === 'i' || type === 'em') {\n      this.buffer += '*'\n      await this.render(children)\n      this.buffer += '*'\n    } else if (type === 'u' || type === 'ins') {\n      this.buffer += '(ins)'\n      await this.render(children)\n      this.buffer += '(ins)'\n    } else if (type === 's' || type === 'del') {\n      this.buffer += '~~'\n      await this.render(children)\n      this.buffer += '~~'\n    } else if (type === 'spl') {\n      this.buffer += '(spl)'\n      await this.render(children)\n      this.buffer += '(spl)'\n    } else if (type === 'code') {\n      this.buffer += '`'\n      await this.render(children)\n      this.buffer += '`'\n    } else if (type === 'a') {\n      this.buffer += `[`\n      await this.render(children)\n      this.buffer += `](${attrs.href})`\n    } else if (type === 'p') {\n      await this.render(children)\n      this.buffer += '\\n'\n    } else if (type === 'at') {\n      if (attrs.id) {\n        this.buffer += `(met)${attrs.id}(met)`\n      } else if (attrs.type === 'all') {\n        this.buffer += `(met)all(met)`\n      } else if (attrs.type === 'here') {\n        this.buffer += `(met)here(met)`\n      } else if (attrs.role) {\n        this.buffer += `(rol)${attrs.role}(rol)`\n      }\n    } else if (type === 'code') {\n      this.buffer += `\\`${element.toString(true)}\\``\n    } else if (type === 'sharp') {\n      this.buffer += `(chn)${attrs.id}(chn)`\n    } else if (['image', 'video', 'audio', 'file'].includes(type)) {\n      await this.flush()\n      const url = await this.transformUrl(element)\n      await this.post(Kook.Type[type], url)\n    } else if (type === 'quote') {\n      await this.flush()\n      this.additional.quote = attrs.id\n    } else if (type === 'message') {\n      await this.flush()\n      await this.render(children)\n      await this.flush()\n    } else {\n      await this.render(children)\n    }\n  }\n}\n\nexport namespace KookMessenger {\n  export type HandleMixedContent = 'card' | 'separate' | 'mixed'\n\n  export interface Config {\n    handleMixedContent?: HandleMixedContent\n  }\n\n  export const Config: Schema<KookMessenger.Config> = Schema.object({\n    handleMixedContent: Schema.union([\n      Schema.const('separate' as const).description('将每个不同形式的内容分开发送'),\n      Schema.const('card' as const).description('使用卡片发送内容'),\n      Schema.const('mixed' as const).description('使用混合模式发送内容'),\n    ]).role('radio').description('发送图文等混合内容时采用的方式。').default('separate'),\n  }).description('发送设置')\n}\n"],
  "mappings": "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",
  "names": ["import_satori", "Signal", "Type", "UserStatus", "import_form_data", "import_satori", "WebSocket", "WsClient", "import_satori", "logger", "ctx", "bot", "HttpServer", "import_satori", "FormData", "type", "KookMessenger", "FormData", "KookBot"]
}
