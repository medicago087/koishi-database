var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// adapters/discord/src/index.ts
var src_exports = {};
__export(src_exports, {
  Discord: () => types_exports,
  DiscordBot: () => DiscordBot,
  DiscordMessenger: () => DiscordMessenger,
  WsClient: () => WsClient,
  adaptAuthor: () => adaptAuthor,
  adaptChannel: () => adaptChannel,
  adaptGuild: () => adaptGuild,
  adaptMessage: () => adaptMessage,
  adaptSession: () => adaptSession,
  adaptUser: () => adaptUser,
  default: () => src_default,
  prepareMessage: () => prepareMessage
});
module.exports = __toCommonJS(src_exports);

// adapters/discord/src/bot.ts
var import_satori4 = require("@satorijs/satori");

// adapters/discord/src/utils.ts
var import_satori = require("@satorijs/satori");
var adaptUser = /* @__PURE__ */ __name((user) => ({
  userId: user.id,
  avatar: `https://cdn.discordapp.com/avatars/${user.id}/${user.avatar}.png`,
  username: user.username,
  discriminator: user.discriminator,
  isBot: user.bot || false
}), "adaptUser");
var adaptGuild = /* @__PURE__ */ __name((data) => ({
  guildId: data.id,
  guildName: data.name
}), "adaptGuild");
var adaptChannel = /* @__PURE__ */ __name((data) => ({
  channelId: data.id,
  channelName: data.name
}), "adaptChannel");
var adaptAuthor = /* @__PURE__ */ __name((author) => ({
  ...adaptUser(author),
  nickname: author.username
}), "adaptAuthor");
async function adaptMessage(bot, meta, session = {}) {
  var _a, _b, _c;
  prepareMessage(session, meta);
  session.messageId = meta.id;
  session.timestamp = new Date(meta.timestamp).valueOf() || Date.now();
  if (meta.author) {
    session.author = adaptAuthor(meta.author);
    session.userId = meta.author.id;
  }
  if ((_a = meta.member) == null ? void 0 : _a.nick) {
    session.author.nickname = (_b = meta.member) == null ? void 0 : _b.nick;
  }
  session.content = "";
  if (meta.content) {
    session.content = meta.content.replace(/<@[!&]?(.+?)>/g, (_, id) => {
      var _a2;
      if (meta.mention_roles.includes(id)) {
        return (0, import_satori.segment)("at", { role: id }).toString();
      } else {
        const user = (_a2 = meta.mentions) == null ? void 0 : _a2.find((u) => u.id === id || `${u.username}#${u.discriminator}` === id);
        return import_satori.segment.at(id, { name: user == null ? void 0 : user.username }).toString();
      }
    }).replace(/<:(.*):(.+?)>/g, (_, name, id) => (0, import_satori.segment)("face", { id, name }).toString()).replace(/<a:(.*):(.+?)>/g, (_, name, id) => (0, import_satori.segment)("face", { id, name, animated: true }).toString()).replace(/@everyone/g, () => (0, import_satori.segment)("at", { type: "all" }).toString()).replace(/@here/g, () => (0, import_satori.segment)("at", { type: "here" }).toString()).replace(/<#(.+?)>/g, (_, id) => {
      var _a2;
      const channel = (_a2 = meta.mention_channels) == null ? void 0 : _a2.find((c) => c.id === id);
      return import_satori.segment.sharp(id, { name: channel == null ? void 0 : channel.name }).toString();
    });
  }
  if ((_c = meta.attachments) == null ? void 0 : _c.length) {
    if (session.content)
      session.content += " ";
    session.content += meta.attachments.map((v) => {
      var _a2, _b2, _c2;
      if (v.height && v.width && ((_a2 = v.content_type) == null ? void 0 : _a2.startsWith("image/"))) {
        return (0, import_satori.segment)("image", {
          url: v.url,
          proxy_url: v.proxy_url,
          file: v.filename
        });
      } else if (v.height && v.width && ((_b2 = v.content_type) == null ? void 0 : _b2.startsWith("video/"))) {
        return (0, import_satori.segment)("video", {
          url: v.url,
          proxy_url: v.proxy_url,
          file: v.filename
        });
      } else if ((_c2 = v.content_type) == null ? void 0 : _c2.startsWith("audio/")) {
        return (0, import_satori.segment)("record", {
          url: v.url,
          proxy_url: v.proxy_url,
          file: v.filename
        });
      } else {
        return (0, import_satori.segment)("file", {
          url: v.url,
          proxy_url: v.proxy_url,
          file: v.filename
        });
      }
    }).join("");
  }
  for (const embed of meta.embeds) {
    if (embed.image) {
      session.content += (0, import_satori.segment)("image", { url: embed.image.url, proxy_url: embed.image.proxy_url });
    }
    if (embed.thumbnail) {
      session.content += (0, import_satori.segment)("image", { url: embed.thumbnail.url, proxy_url: embed.thumbnail.proxy_url });
    }
    if (embed.video) {
      session.content += (0, import_satori.segment)("video", { url: embed.video.url, proxy_url: embed.video.proxy_url });
    }
  }
  session.elements = import_satori.segment.parse(session.content);
  if (meta.message_reference) {
    const { message_id, channel_id } = meta.message_reference;
    session.quote = await bot.getMessage(channel_id, message_id);
  }
  return session;
}
__name(adaptMessage, "adaptMessage");
function prepareMessage(session, data) {
  session.guildId = data.guild_id;
  session.subtype = data.guild_id ? "group" : "private";
  session.channelId = data.channel_id;
}
__name(prepareMessage, "prepareMessage");
function prepareReactionSession(session, data) {
  session.userId = data.user_id;
  session.messageId = data.message_id;
  session.guildId = data.guild_id;
  session.channelId = data.channel_id;
  session.subtype = data.guild_id ? "group" : "private";
  if (!data.emoji)
    return;
  const { id, name } = data.emoji;
  session.content = id ? `${name}:${id}` : name;
}
__name(prepareReactionSession, "prepareReactionSession");
async function adaptSession(bot, input) {
  const session = bot.session();
  if (input.t === "MESSAGE_CREATE") {
    session.type = "message";
    await adaptMessage(bot, input.d, session);
  } else if (input.t === "MESSAGE_UPDATE") {
    session.type = "message-updated";
    const msg = await bot.internal.getChannelMessage(input.d.channel_id, input.d.id);
    await adaptMessage(bot, msg, session);
  } else if (input.t === "MESSAGE_DELETE") {
    session.type = "message-deleted";
    session.messageId = input.d.id;
    prepareMessage(session, input.d);
  } else if (input.t === "MESSAGE_REACTION_ADD") {
    session.type = "reaction-added";
    prepareReactionSession(session, input.d);
  } else if (input.t === "MESSAGE_REACTION_REMOVE") {
    session.type = "reaction-deleted";
    session.subtype = "one";
    prepareReactionSession(session, input.d);
  } else if (input.t === "MESSAGE_REACTION_REMOVE_ALL") {
    session.type = "reaction-deleted";
    session.subtype = "all";
    prepareReactionSession(session, input.d);
  } else if (input.t === "MESSAGE_REACTION_REMOVE_EMOJI") {
    session.type = "reaction-deleted";
    session.subtype = "emoji";
    prepareReactionSession(session, input.d);
  } else if (input.t === "CHANNEL_UPDATE") {
    session.type = "channel-updated";
    session.guildId = input.d.guild_id;
    session.subtype = input.d.guild_id ? "group" : "private";
    session.channelId = input.d.id;
  } else {
    return;
  }
  return session;
}
__name(adaptSession, "adaptSession");

// adapters/discord/src/message.ts
var import_satori2 = require("@satorijs/satori");
var import_file_type = require("file-type");
var import_form_data = __toESM(require("form-data"));
var DiscordMessenger = class extends import_satori2.Messenger {
  constructor() {
    super(...arguments);
    this.buffer = "";
    this.addition = {};
    this.figure = null;
    this.mode = "default";
  }
  async post(data, headers) {
    try {
      const result = await this.bot.http.post(`/channels/${this.channelId}/messages`, data, { headers });
      const session = this.bot.session();
      await adaptMessage(this.bot, result, session);
      session.app.emit(session, "send", session);
      this.results.push(session);
    } catch (e) {
      this.errors.push(e);
    }
  }
  async sendEmbed(fileBuffer, payload_json, filename) {
    const fd = new import_form_data.default();
    filename || (filename = "file." + (await (0, import_file_type.fromBuffer)(fileBuffer)).ext);
    fd.append("file", Buffer.from(fileBuffer), filename);
    fd.append("payload_json", JSON.stringify(payload_json));
    return this.post(fd, fd.getHeaders());
  }
  async sendContent(content, addition) {
    return this.post({ ...addition, content });
  }
  async sendAsset(type, data, addition) {
    const { handleMixedContent, handleExternalAsset } = this.bot.config;
    if (handleMixedContent === "separate" && addition.content) {
      await this.post(addition);
      addition.content = "";
    }
    if (["file:", "data:", "base64:"].some((prefix) => data.url.startsWith(prefix))) {
      const result = await this.bot.ctx.http.file(data.url);
      return await this.sendEmbed(result.data, addition, data.file || result.filename);
    }
    const sendDirect = /* @__PURE__ */ __name(async () => {
      if (addition.content) {
        await this.post(addition);
      }
      return this.post({ ...addition, content: data.url });
    }, "sendDirect");
    const sendDownload = /* @__PURE__ */ __name(async () => {
      const buffer = await this.bot.ctx.http.get(data.url, {
        headers: { accept: type + "/*" },
        responseType: "arraybuffer"
      });
      return this.sendEmbed(buffer, addition, data.file);
    }, "sendDownload");
    const mode = data.mode || handleExternalAsset;
    if (mode === "download" || handleMixedContent === "attach" && addition.content || type === "file") {
      return sendDownload();
    } else if (mode === "direct") {
      return sendDirect();
    }
    return await this.bot.ctx.http.head(data.url, {
      headers: { accept: type + "/*" }
    }).then((headers) => {
      if (headers["content-type"].startsWith(type)) {
        return sendDirect();
      } else {
        return sendDownload();
      }
    }, sendDownload);
  }
  async flush() {
    const content = this.buffer.trim();
    if (!content)
      return;
    await this.post({ ...this.addition, content });
    this.buffer = "";
    this.addition = {};
  }
  async visit(element) {
    const { type, attrs, children } = element;
    if (type === "text") {
      this.buffer += attrs.content.replace(/[\\*_`~|()]/g, "\\$&");
    } else if (type === "b" || type === "strong") {
      this.buffer += "**";
      await this.render(children);
      this.buffer += "**";
    } else if (type === "i" || type === "em") {
      this.buffer += "*";
      await this.render(children);
      this.buffer += "*";
    } else if (type === "u" || type === "ins") {
      this.buffer += "__";
      await this.render(children);
      this.buffer += "__";
    } else if (type === "s" || type === "del") {
      this.buffer += "~~";
      await this.render(children);
      this.buffer += "~~";
    } else if (type === "spl") {
      this.buffer += "||";
      await this.render(children);
      this.buffer += "||";
    } else if (type === "code") {
      this.buffer += "`";
      await this.render(children);
      this.buffer += "`";
    } else if (type === "a") {
      await this.render(children);
      this.buffer += ` (${attrs.href}) `;
    } else if (type === "p") {
      await this.render(children);
      this.buffer += "\n";
    } else if (type === "at") {
      if (attrs.id) {
        this.buffer += `<@${attrs.id}>`;
      } else if (attrs.type === "all") {
        this.buffer += `@everyone`;
      } else if (attrs.type === "here") {
        this.buffer += `@here`;
      }
    } else if (type === "sharp" && attrs.id) {
      this.buffer += `<#${attrs.id}>`;
    } else if (type === "face" && attrs.name && attrs.id) {
      this.buffer += `<:${attrs.name}:${attrs.id}>`;
    } else if ((type === "image" || type === "video") && attrs.url) {
      if (this.mode === "figure") {
        this.figure = element;
      } else {
        await this.sendAsset(type, attrs, {
          ...this.addition,
          content: this.buffer.trim()
        });
        this.buffer = "";
      }
    } else if (type === "share") {
      await this.flush();
      await this.post({
        ...this.addition,
        embeds: [{ ...attrs }]
      });
    } else if (type === "record") {
      await this.sendAsset("file", attrs, {
        ...this.addition,
        content: this.buffer.trim()
      });
      this.buffer = "";
    } else if (type === "figure") {
      await this.flush();
      this.mode = "figure";
      await this.render(children);
      await this.sendAsset(this.figure.type, this.figure.attrs, {
        ...this.addition,
        content: this.buffer.trim()
      });
      this.buffer = "";
      this.mode = "default";
    } else if (type === "quote") {
      await this.flush();
      this.addition.message_reference = {
        message_id: attrs.id
      };
    } else if (type === "message") {
      if (this.mode === "figure") {
        await this.render(children);
        this.buffer += "\n";
      } else {
        await this.flush();
        await this.render(children, true);
      }
    } else {
      await this.render(children);
    }
  }
};
__name(DiscordMessenger, "DiscordMessenger");
((DiscordMessenger2) => {
  DiscordMessenger2.Config = import_satori2.Schema.object({
    handleExternalAsset: import_satori2.Schema.union([
      import_satori2.Schema.const("download").description("先下载后发送"),
      import_satori2.Schema.const("direct").description("直接发送链接"),
      import_satori2.Schema.const("auto").description("发送一个 HEAD 请求，根据返回的 Content-Type 决定发送方式")
    ]).role("radio").description("发送外链资源时采用的方式。").default("auto"),
    handleMixedContent: import_satori2.Schema.union([
      import_satori2.Schema.const("separate").description("将每个不同形式的内容分开发送"),
      import_satori2.Schema.const("attach").description("图片前如果有文本内容，则将文本作为图片的附带信息进行发送"),
      import_satori2.Schema.const("auto").description("如果图片本身采用直接发送则与前面的文本分开，否则将文本作为图片的附带信息发送")
    ]).role("radio").description("发送图文等混合内容时采用的方式。").default("auto")
  }).description("发送设置");
})(DiscordMessenger || (DiscordMessenger = {}));

// adapters/discord/src/types/index.ts
var types_exports = {};
__export(types_exports, {
  ActivityFlag: () => ActivityFlag,
  ActivityType: () => ActivityType,
  AllowedMentionType: () => AllowedMentionType,
  ApplicationCommand: () => ApplicationCommand,
  ApplicationFlag: () => ApplicationFlag,
  AuditLog: () => AuditLog,
  AutoModerationAction: () => AutoModerationAction,
  AutoModerationRule: () => AutoModerationRule,
  Channel: () => Channel2,
  ComponentType: () => ComponentType,
  DeviceType: () => DeviceType,
  GatewayIntent: () => GatewayIntent,
  GatewayOpcode: () => GatewayOpcode,
  Guild: () => Guild3,
  GuildFeature: () => GuildFeature,
  GuildScheduledEvent: () => GuildScheduledEvent,
  IntegrationExpireBehavior: () => IntegrationExpireBehavior,
  InteractionCallbackDataFlag: () => InteractionCallbackDataFlag,
  InteractionCallbackType: () => InteractionCallbackType,
  InteractionType: () => InteractionType,
  Internal: () => Internal,
  Invite: () => Invite,
  MembershipState: () => MembershipState,
  Message: () => Message2,
  Permission: () => Permission,
  StatusType: () => StatusType2,
  Sticker: () => Sticker3,
  SystemChannelFlag: () => SystemChannelFlag,
  TextInputStyles: () => TextInputStyles,
  UserFlag: () => UserFlag,
  VisibilityType: () => VisibilityType,
  Webhook: () => Webhook2
});

// adapters/discord/src/types/internal.ts
var import_cosmokit = require("cosmokit");
var Internal = class {
  constructor(http) {
    this.http = http;
  }
  static define(routes) {
    for (const path in routes) {
      for (const key in routes[path]) {
        const method = key;
        for (const name of (0, import_cosmokit.makeArray)(routes[path][method])) {
          Internal.prototype[name] = function(...args) {
            const raw = args.join(", ");
            const url = path.replace(/\{([^}]+)\}/g, () => {
              if (!args.length)
                throw new Error(`too few arguments for ${path}, received ${raw}`);
              return args.shift();
            });
            const config = {};
            if (args.length === 1) {
              if (method === "GET" || method === "DELETE") {
                config.params = args[0];
              } else {
                config.data = args[0];
              }
            } else if (args.length === 2 && method !== "GET" && method !== "DELETE") {
              config.data = args[0];
              config.params = args[1];
            } else if (args.length > 1) {
              throw new Error(`too many arguments for ${path}, received ${raw}`);
            }
            return this.http(method, url, config);
          };
        }
      }
    }
  }
};
__name(Internal, "Internal");

// adapters/discord/src/types/application.ts
var ApplicationFlag = /* @__PURE__ */ ((ApplicationFlag2) => {
  ApplicationFlag2[ApplicationFlag2["GATEWAY_PRESENCE"] = 4096] = "GATEWAY_PRESENCE";
  ApplicationFlag2[ApplicationFlag2["GATEWAY_PRESENCE_LIMITED"] = 8192] = "GATEWAY_PRESENCE_LIMITED";
  ApplicationFlag2[ApplicationFlag2["GATEWAY_GUILD_MEMBERS"] = 16384] = "GATEWAY_GUILD_MEMBERS";
  ApplicationFlag2[ApplicationFlag2["GATEWAY_GUILD_MEMBERS_LIMITED"] = 32768] = "GATEWAY_GUILD_MEMBERS_LIMITED";
  ApplicationFlag2[ApplicationFlag2["VERIFICATION_PENDING_GUILD_LIMIT"] = 65536] = "VERIFICATION_PENDING_GUILD_LIMIT";
  ApplicationFlag2[ApplicationFlag2["EMBEDDED"] = 131072] = "EMBEDDED";
  return ApplicationFlag2;
})(ApplicationFlag || {});
Internal.define({
  "/oauth2/applications/@me": {
    GET: "getCurrentBotApplicationInformation"
  },
  "/oauth2/@me": {
    GET: "getCurrentAuthorizationInformation"
  }
});

// adapters/discord/src/types/audit-log.ts
var AuditLog;
((AuditLog2) => {
  let Type;
  ((Type2) => {
    Type2[Type2["GUILD_UPDATE"] = 1] = "GUILD_UPDATE";
    Type2[Type2["CHANNEL_CREATE"] = 10] = "CHANNEL_CREATE";
    Type2[Type2["CHANNEL_UPDATE"] = 11] = "CHANNEL_UPDATE";
    Type2[Type2["CHANNEL_DELETE"] = 12] = "CHANNEL_DELETE";
    Type2[Type2["CHANNEL_OVERWRITE_CREATE"] = 13] = "CHANNEL_OVERWRITE_CREATE";
    Type2[Type2["CHANNEL_OVERWRITE_UPDATE"] = 14] = "CHANNEL_OVERWRITE_UPDATE";
    Type2[Type2["CHANNEL_OVERWRITE_DELETE"] = 15] = "CHANNEL_OVERWRITE_DELETE";
    Type2[Type2["MEMBER_KICK"] = 20] = "MEMBER_KICK";
    Type2[Type2["MEMBER_PRUNE"] = 21] = "MEMBER_PRUNE";
    Type2[Type2["MEMBER_BAN_ADD"] = 22] = "MEMBER_BAN_ADD";
    Type2[Type2["MEMBER_BAN_REMOVE"] = 23] = "MEMBER_BAN_REMOVE";
    Type2[Type2["MEMBER_UPDATE"] = 24] = "MEMBER_UPDATE";
    Type2[Type2["MEMBER_ROLE_UPDATE"] = 25] = "MEMBER_ROLE_UPDATE";
    Type2[Type2["MEMBER_MOVE"] = 26] = "MEMBER_MOVE";
    Type2[Type2["MEMBER_DISCONNECT"] = 27] = "MEMBER_DISCONNECT";
    Type2[Type2["BOT_ADD"] = 28] = "BOT_ADD";
    Type2[Type2["ROLE_CREATE"] = 30] = "ROLE_CREATE";
    Type2[Type2["ROLE_UPDATE"] = 31] = "ROLE_UPDATE";
    Type2[Type2["ROLE_DELETE"] = 32] = "ROLE_DELETE";
    Type2[Type2["INVITE_CREATE"] = 40] = "INVITE_CREATE";
    Type2[Type2["INVITE_UPDATE"] = 41] = "INVITE_UPDATE";
    Type2[Type2["INVITE_DELETE"] = 42] = "INVITE_DELETE";
    Type2[Type2["WEBHOOK_CREATE"] = 50] = "WEBHOOK_CREATE";
    Type2[Type2["WEBHOOK_UPDATE"] = 51] = "WEBHOOK_UPDATE";
    Type2[Type2["WEBHOOK_DELETE"] = 52] = "WEBHOOK_DELETE";
    Type2[Type2["EMOJI_CREATE"] = 60] = "EMOJI_CREATE";
    Type2[Type2["EMOJI_UPDATE"] = 61] = "EMOJI_UPDATE";
    Type2[Type2["EMOJI_DELETE"] = 62] = "EMOJI_DELETE";
    Type2[Type2["MESSAGE_DELETE"] = 72] = "MESSAGE_DELETE";
    Type2[Type2["MESSAGE_BULK_DELETE"] = 73] = "MESSAGE_BULK_DELETE";
    Type2[Type2["MESSAGE_PIN"] = 74] = "MESSAGE_PIN";
    Type2[Type2["MESSAGE_UNPIN"] = 75] = "MESSAGE_UNPIN";
    Type2[Type2["INTEGRATION_CREATE"] = 80] = "INTEGRATION_CREATE";
    Type2[Type2["INTEGRATION_UPDATE"] = 81] = "INTEGRATION_UPDATE";
    Type2[Type2["INTEGRATION_DELETE"] = 82] = "INTEGRATION_DELETE";
    Type2[Type2["STAGE_INSTANCE_CREATE"] = 83] = "STAGE_INSTANCE_CREATE";
    Type2[Type2["STAGE_INSTANCE_UPDATE"] = 84] = "STAGE_INSTANCE_UPDATE";
    Type2[Type2["STAGE_INSTANCE_DELETE"] = 85] = "STAGE_INSTANCE_DELETE";
    Type2[Type2["STICKER_CREATE"] = 90] = "STICKER_CREATE";
    Type2[Type2["STICKER_UPDATE"] = 91] = "STICKER_UPDATE";
    Type2[Type2["STICKER_DELETE"] = 92] = "STICKER_DELETE";
    Type2[Type2["GUILD_SCHEDULED_EVENT_CREATE"] = 100] = "GUILD_SCHEDULED_EVENT_CREATE";
    Type2[Type2["GUILD_SCHEDULED_EVENT_UPDATE"] = 101] = "GUILD_SCHEDULED_EVENT_UPDATE";
    Type2[Type2["GUILD_SCHEDULED_EVENT_DELETE"] = 102] = "GUILD_SCHEDULED_EVENT_DELETE";
    Type2[Type2["THREAD_CREATE"] = 110] = "THREAD_CREATE";
    Type2[Type2["THREAD_UPDATE"] = 111] = "THREAD_UPDATE";
    Type2[Type2["THREAD_DELETE"] = 112] = "THREAD_DELETE";
    Type2[Type2["APPLICATION_COMMAND_PERMISSION_UPDATE"] = 121] = "APPLICATION_COMMAND_PERMISSION_UPDATE";
    Type2[Type2["AUTO_MODERATION_RULE_CREATE"] = 140] = "AUTO_MODERATION_RULE_CREATE";
    Type2[Type2["AUTO_MODERATION_RULE_UPDATE"] = 141] = "AUTO_MODERATION_RULE_UPDATE";
    Type2[Type2["AUTO_MODERATION_RULE_DELETE"] = 142] = "AUTO_MODERATION_RULE_DELETE";
    Type2[Type2["AUTO_MODERATION_BLOCK_MESSAGE"] = 143] = "AUTO_MODERATION_BLOCK_MESSAGE";
    Type2[Type2["AUTO_MODERATION_FLAG_TO_CHANNEL"] = 144] = "AUTO_MODERATION_FLAG_TO_CHANNEL";
    Type2[Type2["AUTO_MODERATION_USER_COMMUNICATION_DISABLED"] = 145] = "AUTO_MODERATION_USER_COMMUNICATION_DISABLED";
  })(Type = AuditLog2.Type || (AuditLog2.Type = {}));
})(AuditLog || (AuditLog = {}));
Internal.define({
  "/guilds/{guild.id}/audit-logs": {
    GET: "getGuildAuditLog"
  }
});

// adapters/discord/src/types/auto-moderation.ts
var AutoModerationRule;
((AutoModerationRule2) => {
  let EventType;
  ((EventType2) => {
    EventType2[EventType2["MESSAGE_SEND"] = 1] = "MESSAGE_SEND";
  })(EventType = AutoModerationRule2.EventType || (AutoModerationRule2.EventType = {}));
  let TriggerType;
  ((TriggerType2) => {
    TriggerType2[TriggerType2["KEYWORD"] = 1] = "KEYWORD";
    TriggerType2[TriggerType2["SPAM"] = 3] = "SPAM";
    TriggerType2[TriggerType2["KEYWORD_PRESET"] = 4] = "KEYWORD_PRESET";
    TriggerType2[TriggerType2["MENTION_SPAM"] = 5] = "MENTION_SPAM";
  })(TriggerType = AutoModerationRule2.TriggerType || (AutoModerationRule2.TriggerType = {}));
  let KeywordPresetType;
  ((KeywordPresetType2) => {
    KeywordPresetType2[KeywordPresetType2["PROFANITY"] = 1] = "PROFANITY";
    KeywordPresetType2[KeywordPresetType2["SEXUAL_CONTEN"] = 2] = "SEXUAL_CONTEN";
    KeywordPresetType2[KeywordPresetType2["SLURS"] = 3] = "SLURS";
  })(KeywordPresetType = AutoModerationRule2.KeywordPresetType || (AutoModerationRule2.KeywordPresetType = {}));
})(AutoModerationRule || (AutoModerationRule = {}));
var AutoModerationAction;
((AutoModerationAction2) => {
  let Type;
  ((Type2) => {
    Type2[Type2["BLOCK_MESSAGE"] = 1] = "BLOCK_MESSAGE";
    Type2[Type2["SEND_ALERT_MESSAGE"] = 2] = "SEND_ALERT_MESSAGE";
    Type2[Type2["TIMEOUT"] = 3] = "TIMEOUT";
  })(Type = AutoModerationAction2.Type || (AutoModerationAction2.Type = {}));
})(AutoModerationAction || (AutoModerationAction = {}));
Internal.define({
  "/guilds/{guild.id}/auto-moderation/rules": {
    GET: "listAutoModerationRules",
    POST: "createAutoModerationRule"
  },
  "/guilds/{guild.id}/auto-moderation/rules/{rule.id}": {
    GET: "getAutoModerationRule",
    PATCH: "modifyAutoModerationRule",
    DELETE: "deleteAutoModerationRule"
  }
});

// adapters/discord/src/types/ban.ts
Internal.define({
  "/guilds/{guild.id}/bans": {
    GET: "getGuildBans"
  },
  "/guilds/{guild.id}/bans/{user.id}": {
    GET: "getGuildBan",
    PUT: "createGuildBan",
    DELETE: "removeGuildBan"
  }
});

// adapters/discord/src/types/channel.ts
var Channel2;
((Channel10) => {
  let Type;
  ((Type2) => {
    Type2[Type2["GUILD_TEXT"] = 0] = "GUILD_TEXT";
    Type2[Type2["DM"] = 1] = "DM";
    Type2[Type2["GUILD_VOICE"] = 2] = "GUILD_VOICE";
    Type2[Type2["GROUP_DM"] = 3] = "GROUP_DM";
    Type2[Type2["GUILD_CATEGORY"] = 4] = "GUILD_CATEGORY";
    Type2[Type2["GUILD_NEWS"] = 5] = "GUILD_NEWS";
    Type2[Type2["GUILD_STORE"] = 6] = "GUILD_STORE";
    Type2[Type2["GUILD_NEWS_THREAD"] = 10] = "GUILD_NEWS_THREAD";
    Type2[Type2["GUILD_PUBLIC_THREAD"] = 11] = "GUILD_PUBLIC_THREAD";
    Type2[Type2["GUILD_PRIVATE_THREAD"] = 12] = "GUILD_PRIVATE_THREAD";
    Type2[Type2["GUILD_STAGE_VOICE"] = 13] = "GUILD_STAGE_VOICE";
    Type2[Type2["GUILD_DIRECTORY"] = 14] = "GUILD_DIRECTORY";
    Type2[Type2["GUILD_FORUM"] = 15] = "GUILD_FORUM";
  })(Type = Channel10.Type || (Channel10.Type = {}));
})(Channel2 || (Channel2 = {}));
var AllowedMentionType = /* @__PURE__ */ ((AllowedMentionType2) => {
  AllowedMentionType2["ROLE_MENTIONS"] = "roles";
  AllowedMentionType2["USER_MENTIONS"] = "users";
  AllowedMentionType2["EVERYONE_MENTIONS"] = "everyone";
  return AllowedMentionType2;
})(AllowedMentionType || {});
Internal.define({
  "/users/@me/channels": {
    POST: ["createDM", "createGroupDM"]
  }
});
Internal.define({
  "/guilds/{guild.id}/channels": {
    GET: "getGuildChannels",
    POST: "createGuildChannel",
    PATCH: "modifyGuildChannelPositions"
  }
});
Internal.define({
  "/channels/{channel.id}": {
    GET: "getChannel",
    PATCH: "modifyChannel",
    DELETE: "deleteChannel"
  },
  "/channels/{channel.id}/permissions/{overwrite.id}": {
    PUT: "editChannelPermissions",
    DELETE: "deleteChannelPermission"
  },
  "/channels/{channel.id}/followers": {
    POST: "followNewsChannel"
  },
  "/channels/{channel.id}/typing": {
    POST: "triggerTypingIndicator"
  },
  "/channels/{channel.id}/recipients/{user.id}": {
    PUT: "groupDMAddRecipient",
    DELETE: "groupDMRemoveRecipient"
  }
});

// adapters/discord/src/types/command.ts
var ApplicationCommand;
((ApplicationCommand3) => {
  let Type;
  ((Type2) => {
    Type2[Type2["CHAT_INPUT"] = 1] = "CHAT_INPUT";
    Type2[Type2["USER"] = 2] = "USER";
    Type2[Type2["MESSAGE"] = 3] = "MESSAGE";
  })(Type = ApplicationCommand3.Type || (ApplicationCommand3.Type = {}));
  let OptionType;
  ((OptionType2) => {
    OptionType2[OptionType2["SUB_COMMAND"] = 1] = "SUB_COMMAND";
    OptionType2[OptionType2["SUB_COMMAND_GROUP"] = 2] = "SUB_COMMAND_GROUP";
    OptionType2[OptionType2["STRING"] = 3] = "STRING";
    OptionType2[OptionType2["INTEGER"] = 4] = "INTEGER";
    OptionType2[OptionType2["BOOLEAN"] = 5] = "BOOLEAN";
    OptionType2[OptionType2["USER"] = 6] = "USER";
    OptionType2[OptionType2["CHANNEL"] = 7] = "CHANNEL";
    OptionType2[OptionType2["ROLE"] = 8] = "ROLE";
    OptionType2[OptionType2["MENTIONABLE"] = 9] = "MENTIONABLE";
    OptionType2[OptionType2["NUMBER"] = 10] = "NUMBER";
  })(OptionType = ApplicationCommand3.OptionType || (ApplicationCommand3.OptionType = {}));
  let PermissionType;
  ((PermissionType2) => {
    PermissionType2[PermissionType2["ROLE"] = 1] = "ROLE";
    PermissionType2[PermissionType2["USER"] = 2] = "USER";
    PermissionType2[PermissionType2["CHANNEL"] = 3] = "CHANNEL";
  })(PermissionType = ApplicationCommand3.PermissionType || (ApplicationCommand3.PermissionType = {}));
})(ApplicationCommand || (ApplicationCommand = {}));
Internal.define({
  "/applications/{application.id}/commands": {
    GET: "getGlobalApplicationCommands",
    POST: "createGlobalApplicationCommand",
    PUT: "bulkOverwriteGlobalApplicationCommands"
  },
  "/applications/{application.id}/commands/{command.id}": {
    GET: "getGlobalApplicationCommand",
    PATCH: "editGlobalApplicationCommand",
    DELETE: "deleteGlobalApplicationCommand"
  },
  "/applications/{application.id}/guilds/{guild.id}/commands": {
    GET: "getGuildApplicationCommands",
    POST: "createGuildApplicationCommand",
    PUT: "bulkOverwriteGuildApplicationCommands"
  },
  "/applications/{application.id}/guilds/{guild.id}/commands/{command.id}": {
    GET: "getGuildApplicationCommand",
    PATCH: "editGuildApplicationCommand",
    DELETE: "deleteGuildApplicationCommand"
  },
  "/applications/{application.id}/guilds/{guild.id}/commands/permissions": {
    GET: "getGuildApplicationCommandPermissions"
  },
  "/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions": {
    GET: "getApplicationCommandPermissions",
    PUT: "editApplicationCommandPermissions"
  }
});

// adapters/discord/src/types/component.ts
var ComponentType = /* @__PURE__ */ ((ComponentType2) => {
  ComponentType2[ComponentType2["ACTION_ROW"] = 1] = "ACTION_ROW";
  ComponentType2[ComponentType2["BUTTON"] = 2] = "BUTTON";
  ComponentType2[ComponentType2["SELECT_MENU"] = 3] = "SELECT_MENU";
  ComponentType2[ComponentType2["TEXT_INPUT"] = 4] = "TEXT_INPUT";
  return ComponentType2;
})(ComponentType || {});
var TextInputStyles = /* @__PURE__ */ ((TextInputStyles2) => {
  TextInputStyles2[TextInputStyles2["SHORT"] = 1] = "SHORT";
  TextInputStyles2[TextInputStyles2["PARAGRAPH"] = 2] = "PARAGRAPH";
  return TextInputStyles2;
})(TextInputStyles || {});

// adapters/discord/src/types/device.ts
var DeviceType = /* @__PURE__ */ ((DeviceType2) => {
  DeviceType2["AUDIO_INPUT"] = "audioinput";
  DeviceType2["AUDIO_OUTPUT"] = "audiooutput";
  DeviceType2["VIDEO_INPUT"] = "videoinput";
  return DeviceType2;
})(DeviceType || {});

// adapters/discord/src/types/emoji.ts
Internal.define({
  "/guilds/{guild.id}/emojis": {
    GET: "listGuildEmojis",
    POST: "createGuildEmoji"
  },
  "/guilds/{guild.id}/emojis/{emoji.id}": {
    GET: "getGuildEmoji",
    PATCH: "modifyGuildEmoji",
    DELETE: "deleteGuildEmoji"
  }
});

// adapters/discord/src/types/gateway.ts
var GatewayOpcode = /* @__PURE__ */ ((GatewayOpcode2) => {
  GatewayOpcode2[GatewayOpcode2["DISPATCH"] = 0] = "DISPATCH";
  GatewayOpcode2[GatewayOpcode2["HEARTBEAT"] = 1] = "HEARTBEAT";
  GatewayOpcode2[GatewayOpcode2["IDENTIFY"] = 2] = "IDENTIFY";
  GatewayOpcode2[GatewayOpcode2["PRESENCE_UPDATE"] = 3] = "PRESENCE_UPDATE";
  GatewayOpcode2[GatewayOpcode2["VOICE_STATE_UPDATE"] = 4] = "VOICE_STATE_UPDATE";
  GatewayOpcode2[GatewayOpcode2["RESUME"] = 6] = "RESUME";
  GatewayOpcode2[GatewayOpcode2["RECONNECT"] = 7] = "RECONNECT";
  GatewayOpcode2[GatewayOpcode2["REQUEST_GUILD_MEMBERS"] = 8] = "REQUEST_GUILD_MEMBERS";
  GatewayOpcode2[GatewayOpcode2["INVALID_SESSION"] = 9] = "INVALID_SESSION";
  GatewayOpcode2[GatewayOpcode2["HELLO"] = 10] = "HELLO";
  GatewayOpcode2[GatewayOpcode2["HEARTBEAT_ACK"] = 11] = "HEARTBEAT_ACK";
  return GatewayOpcode2;
})(GatewayOpcode || {});
var GatewayIntent = /* @__PURE__ */ ((GatewayIntent2) => {
  GatewayIntent2[GatewayIntent2["GUILDS"] = 1] = "GUILDS";
  GatewayIntent2[GatewayIntent2["GUILD_MEMBERS"] = 2] = "GUILD_MEMBERS";
  GatewayIntent2[GatewayIntent2["GUILD_BANS"] = 4] = "GUILD_BANS";
  GatewayIntent2[GatewayIntent2["GUILD_EMOJIS_AND_STICKERS"] = 8] = "GUILD_EMOJIS_AND_STICKERS";
  GatewayIntent2[GatewayIntent2["GUILD_INTEGRATIONS"] = 16] = "GUILD_INTEGRATIONS";
  GatewayIntent2[GatewayIntent2["GUILD_WEBHOOKS"] = 32] = "GUILD_WEBHOOKS";
  GatewayIntent2[GatewayIntent2["GUILD_INVITES"] = 64] = "GUILD_INVITES";
  GatewayIntent2[GatewayIntent2["GUILD_VOICE_STATES"] = 128] = "GUILD_VOICE_STATES";
  GatewayIntent2[GatewayIntent2["GUILD_PRESENCES"] = 256] = "GUILD_PRESENCES";
  GatewayIntent2[GatewayIntent2["GUILD_MESSAGES"] = 512] = "GUILD_MESSAGES";
  GatewayIntent2[GatewayIntent2["GUILD_MESSAGE_REACTIONS"] = 1024] = "GUILD_MESSAGE_REACTIONS";
  GatewayIntent2[GatewayIntent2["GUILD_MESSAGE_TYPING"] = 2048] = "GUILD_MESSAGE_TYPING";
  GatewayIntent2[GatewayIntent2["DIRECT_MESSAGES"] = 4096] = "DIRECT_MESSAGES";
  GatewayIntent2[GatewayIntent2["DIRECT_MESSAGE_REACTIONS"] = 8192] = "DIRECT_MESSAGE_REACTIONS";
  GatewayIntent2[GatewayIntent2["DIRECT_MESSAGE_TYPING"] = 16384] = "DIRECT_MESSAGE_TYPING";
  GatewayIntent2[GatewayIntent2["MESSAGE_CONTENT"] = 32768] = "MESSAGE_CONTENT";
  GatewayIntent2[GatewayIntent2["GUILD_SCHEDULED_EVENTS"] = 65536] = "GUILD_SCHEDULED_EVENTS";
  GatewayIntent2[GatewayIntent2["AUTO_MODERATION_CONFIGURATION"] = 131072] = "AUTO_MODERATION_CONFIGURATION";
  GatewayIntent2[GatewayIntent2["AUTO_MODERATION_EXECUTION"] = 262144] = "AUTO_MODERATION_EXECUTION";
  return GatewayIntent2;
})(GatewayIntent || {});
Internal.define({
  "/gateway": {
    GET: "getGateway"
  },
  "/gateway/bot": {
    GET: "getGatewayBot"
  }
});

// adapters/discord/src/types/guild-member.ts
Internal.define({
  "/guilds/{guild.id}/members/{user.id}": {
    GET: "getGuildMember",
    PUT: "addGuildMember",
    PATCH: "modifyGuildMember",
    DELETE: "removeGuildMember"
  },
  "/guilds/{guild.id}/members": {
    GET: "listGuildMembers"
  },
  "/guilds/{guild.id}/members/search": {
    GET: "searchGuildMembers"
  },
  "/guilds/{guild.id}/members/@me": {
    PATCH: "modifyCurrentMember"
  },
  "/guilds/{guild.id}/members/{user.id}/roles/{role.id}": {
    PUT: "addGuildMemberRole",
    DELETE: "removeGuildMemberRole"
  },
  "/guilds/{guild.id}/prune": {
    GET: "getGuildPruneCount",
    POST: "beginGuildPrune"
  }
});

// adapters/discord/src/types/guild-template.ts
Internal.define({
  "/guilds/templates/{template.code}": {
    GET: "getGuildTemplate",
    POST: "createGuildfromGuildTemplate"
  },
  "/guilds/{guild.id}/templates": {
    GET: "getGuildTemplates",
    POST: "createGuildTemplate"
  },
  "/guilds/{guild.id}/templates/{template.code}": {
    PUT: "syncGuildTemplate",
    PATCH: "modifyGuildTemplate",
    DELETE: "deleteGuildTemplate"
  }
});

// adapters/discord/src/types/guild.ts
var Guild3;
((Guild6) => {
  let Params;
  ((Params2) => {
    let WidgetStyleOptions;
    ((WidgetStyleOptions2) => {
      WidgetStyleOptions2["shield"] = "shield";
      WidgetStyleOptions2["banner1"] = "banner1";
      WidgetStyleOptions2["banner2"] = "banner2";
      WidgetStyleOptions2["banner3"] = "banner3";
      WidgetStyleOptions2["banner4"] = "banner4";
    })(WidgetStyleOptions = Params2.WidgetStyleOptions || (Params2.WidgetStyleOptions = {}));
  })(Params = Guild6.Params || (Guild6.Params = {}));
})(Guild3 || (Guild3 = {}));
var SystemChannelFlag = /* @__PURE__ */ ((SystemChannelFlag2) => {
  SystemChannelFlag2[SystemChannelFlag2["SUPPRESS_JOIN_NOTIFICATIONS"] = 1] = "SUPPRESS_JOIN_NOTIFICATIONS";
  SystemChannelFlag2[SystemChannelFlag2["SUPPRESS_PREMIUM_SUBSCRIPTIONS"] = 2] = "SUPPRESS_PREMIUM_SUBSCRIPTIONS";
  SystemChannelFlag2[SystemChannelFlag2["SUPPRESS_GUILD_REMINDER_NOTIFICATIONS"] = 4] = "SUPPRESS_GUILD_REMINDER_NOTIFICATIONS";
  return SystemChannelFlag2;
})(SystemChannelFlag || {});
var GuildFeature = /* @__PURE__ */ ((GuildFeature2) => {
  GuildFeature2["ANIMATED_ICON"] = "ANIMATED_ICON";
  GuildFeature2["BANNER"] = "BANNER";
  GuildFeature2["COMMERCE"] = "COMMERCE";
  GuildFeature2["COMMUNITY"] = "COMMUNITY";
  GuildFeature2["DISCOVERABLE"] = "DISCOVERABLE";
  GuildFeature2["FEATURABLE"] = "FEATURABLE";
  GuildFeature2["INVITE_SPLASH"] = "INVITE_SPLASH";
  GuildFeature2["MEMBER_VERIFICATION_GATE_ENABLED"] = "MEMBER_VERIFICATION_GATE_ENABLED";
  GuildFeature2["MONETIZATION_ENABLED"] = "MONETIZATION_ENABLED";
  GuildFeature2["MORE_STICKERS"] = "MORE_STICKERS";
  GuildFeature2["NEWS"] = "NEWS";
  GuildFeature2["PARTNERED"] = "PARTNERED";
  GuildFeature2["PREVIEW_ENABLED"] = "PREVIEW_ENABLED";
  GuildFeature2["PRIVATE_THREADS"] = "PRIVATE_THREADS";
  GuildFeature2["ROLE_ICONS"] = "ROLE_ICONS";
  GuildFeature2["SEVEN_DAY_THREAD_ARCHIVE"] = "SEVEN_DAY_THREAD_ARCHIVE";
  GuildFeature2["THREE_DAY_THREAD_ARCHIVE"] = "THREE_DAY_THREAD_ARCHIVE";
  GuildFeature2["TICKETED_EVENTS_ENABLED"] = "TICKETED_EVENTS_ENABLED";
  GuildFeature2["VANITY_URL"] = "VANITY_URL";
  GuildFeature2["VERIFIED"] = "VERIFIED";
  GuildFeature2["VIP_REGIONS"] = "VIP_REGIONS";
  GuildFeature2["WELCOME_SCREEN_ENABLED"] = "WELCOME_SCREEN_ENABLED";
  return GuildFeature2;
})(GuildFeature || {});
Internal.define({
  "/users/@me/guilds": {
    GET: "getCurrentUserGuilds"
  },
  "/users/@me/guilds/{guild.id}/member": {
    GET: "getCurrentUserGuildMember"
  },
  "/users/@me/guilds/{guild.id}": {
    DELETE: "leaveGuild"
  }
});
Internal.define({
  "/guilds": {
    POST: "createGuild"
  },
  "/guilds/{guild.id}": {
    GET: "getGuild",
    PATCH: "modifyGuild",
    DELETE: "deleteGuild"
  },
  "/guilds/{guild.id}/preview": {
    GET: "getGuildPreview"
  },
  "/guilds/{guild.id}/widget": {
    GET: "getGuildWidgetSettings",
    PATCH: "modifyGuildWidget"
  },
  "/guilds/{guild.id}/widget.json": {
    GET: "getGuildWidget"
  },
  "/guilds/{guild.id}/widget.png": {
    GET: "getGuildWidgetImage"
  },
  "/guilds/{guild.id}/welcome-screen": {
    GET: "getGuildWelcomeScreen",
    PATCH: "modifyGuildWelcomeScreen"
  }
});

// adapters/discord/src/types/integration.ts
var IntegrationExpireBehavior = /* @__PURE__ */ ((IntegrationExpireBehavior2) => {
  IntegrationExpireBehavior2[IntegrationExpireBehavior2["REMOVE_ROLE"] = 0] = "REMOVE_ROLE";
  IntegrationExpireBehavior2[IntegrationExpireBehavior2["KICK"] = 1] = "KICK";
  return IntegrationExpireBehavior2;
})(IntegrationExpireBehavior || {});
Internal.define({
  "/guilds/{guild.id}/integrations": {
    GET: "getGuildIntegrations"
  },
  "/guilds/{guild.id}/integrations/{integration.id}": {
    DELETE: "deleteGuildIntegration"
  }
});

// adapters/discord/src/types/interaction.ts
var InteractionType = /* @__PURE__ */ ((InteractionType2) => {
  InteractionType2[InteractionType2["PING"] = 1] = "PING";
  InteractionType2[InteractionType2["APPLICATION_COMMAND"] = 2] = "APPLICATION_COMMAND";
  InteractionType2[InteractionType2["MESSAGE_COMPONENT"] = 3] = "MESSAGE_COMPONENT";
  return InteractionType2;
})(InteractionType || {});
var InteractionCallbackType = /* @__PURE__ */ ((InteractionCallbackType2) => {
  InteractionCallbackType2[InteractionCallbackType2["PONG"] = 1] = "PONG";
  InteractionCallbackType2[InteractionCallbackType2["CHANNEL_MESSAGE_WITH_SOURCE"] = 4] = "CHANNEL_MESSAGE_WITH_SOURCE";
  InteractionCallbackType2[InteractionCallbackType2["DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE"] = 5] = "DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE";
  InteractionCallbackType2[InteractionCallbackType2["DEFERRED_UPDATE_MESSAGE"] = 6] = "DEFERRED_UPDATE_MESSAGE";
  InteractionCallbackType2[InteractionCallbackType2["UPDATE_MESSAGE"] = 7] = "UPDATE_MESSAGE";
  InteractionCallbackType2[InteractionCallbackType2["APPLICATION_COMMAND_AUTOCOMPLETE_RESULT"] = 8] = "APPLICATION_COMMAND_AUTOCOMPLETE_RESULT";
  InteractionCallbackType2[InteractionCallbackType2["MODAL"] = 9] = "MODAL";
  return InteractionCallbackType2;
})(InteractionCallbackType || {});
var InteractionCallbackDataFlag = /* @__PURE__ */ ((InteractionCallbackDataFlag2) => {
  InteractionCallbackDataFlag2[InteractionCallbackDataFlag2["EPHEMERAL"] = 64] = "EPHEMERAL";
  return InteractionCallbackDataFlag2;
})(InteractionCallbackDataFlag || {});
Internal.define({
  "/interactions/{interaction.id}/{interaction.token}/callback": {
    POST: "createInteractionResponse"
  },
  "/webhooks/{application.id}/{interaction.token}/messages/@original": {
    GET: "getOriginalInteractionResponse",
    PATCH: "editOriginalInteractionResponse",
    DELETE: "deleteOriginalInteractionResponse"
  },
  "/webhooks/{application.id}/{interaction.token}": {
    POST: "createFollowupMessage"
  },
  "/webhooks/{application.id}/{interaction.token}/messages/{message.id}": {
    GET: "getFollowupMessage",
    PATCH: "editFollowupMessage",
    DELETE: "deleteFollowupMessage"
  }
});

// adapters/discord/src/types/invite.ts
var Invite;
((Invite2) => {
  let TargetType;
  ((TargetType2) => {
    TargetType2[TargetType2["STREAM"] = 1] = "STREAM";
    TargetType2[TargetType2["EMBEDDED_APPLICATION"] = 2] = "EMBEDDED_APPLICATION";
  })(TargetType = Invite2.TargetType || (Invite2.TargetType = {}));
})(Invite || (Invite = {}));
Internal.define({
  "/invites/{invite.code}": {
    GET: "getInvite",
    DELETE: "deleteInvite"
  },
  "/guilds/{guild.id}/invites": {
    GET: "getGuildInvites"
  },
  "/guilds/{guild.id}/vanity-url": {
    GET: "getGuildVanityURL"
  },
  "/channels/{channel.id}/invites": {
    GET: "getChannelInvites",
    POST: "createChannelInvite"
  }
});

// adapters/discord/src/types/message.ts
var Message2;
((Message4) => {
  let Type;
  ((Type2) => {
    Type2[Type2["DEFAULT"] = 0] = "DEFAULT";
    Type2[Type2["RECIPIENT_ADD"] = 1] = "RECIPIENT_ADD";
    Type2[Type2["RECIPIENT_REMOVE"] = 2] = "RECIPIENT_REMOVE";
    Type2[Type2["CALL"] = 3] = "CALL";
    Type2[Type2["CHANNEL_NAME_CHANGE"] = 4] = "CHANNEL_NAME_CHANGE";
    Type2[Type2["CHANNEL_ICON_CHANGE"] = 5] = "CHANNEL_ICON_CHANGE";
    Type2[Type2["CHANNEL_PINNED_MESSAGE"] = 6] = "CHANNEL_PINNED_MESSAGE";
    Type2[Type2["GUILD_MEMBER_JOIN"] = 7] = "GUILD_MEMBER_JOIN";
    Type2[Type2["USER_PREMIUM_GUILD_SUBSCRIPTION"] = 8] = "USER_PREMIUM_GUILD_SUBSCRIPTION";
    Type2[Type2["USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1"] = 9] = "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1";
    Type2[Type2["USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2"] = 10] = "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2";
    Type2[Type2["USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3"] = 11] = "USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3";
    Type2[Type2["CHANNEL_FOLLOW_ADD"] = 12] = "CHANNEL_FOLLOW_ADD";
    Type2[Type2["GUILD_DISCOVERY_DISQUALIFIED"] = 14] = "GUILD_DISCOVERY_DISQUALIFIED";
    Type2[Type2["GUILD_DISCOVERY_REQUALIFIED"] = 15] = "GUILD_DISCOVERY_REQUALIFIED";
    Type2[Type2["GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING"] = 16] = "GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING";
    Type2[Type2["GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING"] = 17] = "GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING";
    Type2[Type2["THREAD_CREATED"] = 18] = "THREAD_CREATED";
    Type2[Type2["REPLY"] = 19] = "REPLY";
    Type2[Type2["CHAT_INPUT_COMMAND"] = 20] = "CHAT_INPUT_COMMAND";
    Type2[Type2["THREAD_STARTER_MESSAGE"] = 21] = "THREAD_STARTER_MESSAGE";
    Type2[Type2["GUILD_INVITE_REMINDER"] = 22] = "GUILD_INVITE_REMINDER";
    Type2[Type2["CONTEXT_MENU_COMMAND"] = 23] = "CONTEXT_MENU_COMMAND";
  })(Type = Message4.Type || (Message4.Type = {}));
  let ActivityType2;
  ((ActivityType3) => {
    ActivityType3[ActivityType3["JOIN"] = 1] = "JOIN";
    ActivityType3[ActivityType3["SPECTATE"] = 2] = "SPECTATE";
    ActivityType3[ActivityType3["LISTEN"] = 3] = "LISTEN";
    ActivityType3[ActivityType3["JOIN_REQUEST"] = 5] = "JOIN_REQUEST";
  })(ActivityType2 = Message4.ActivityType || (Message4.ActivityType = {}));
  let Flag;
  ((Flag2) => {
    Flag2[Flag2["CROSSPOSTED"] = 1] = "CROSSPOSTED";
    Flag2[Flag2["IS_CROSSPOST"] = 2] = "IS_CROSSPOST";
    Flag2[Flag2["SUPPRESS_EMBEDS"] = 4] = "SUPPRESS_EMBEDS";
    Flag2[Flag2["SOURCE_MESSAGE_DELETED"] = 8] = "SOURCE_MESSAGE_DELETED";
    Flag2[Flag2["URGENT"] = 16] = "URGENT";
    Flag2[Flag2["HAS_THREAD"] = 32] = "HAS_THREAD";
    Flag2[Flag2["EPHEMERAL"] = 64] = "EPHEMERAL";
    Flag2[Flag2["LOADING"] = 128] = "LOADING";
  })(Flag = Message4.Flag || (Message4.Flag = {}));
})(Message2 || (Message2 = {}));
Internal.define({
  "/channels/{channel.id}/messages": {
    GET: "getChannelMessages",
    POST: "createMessage"
  },
  "/channels/{channel.id}/messages/{message.id}": {
    GET: "getChannelMessage",
    PATCH: "editMessage",
    DELETE: "deleteMessage"
  },
  "/channels/{channel.id}/messages/{message.id}/crosspost": {
    POST: "crosspostMessage"
  },
  "/channels/{channel.id}/messages/bulk-delete": {
    POST: "bulkDeleteMessages"
  },
  "/channels/{channel.id}/pins": {
    GET: "getPinnedMessages"
  },
  "/channels/{channel.id}/pins/{message.id}": {
    PUT: "pinMessage",
    DELETE: "unpinMessage"
  }
});

// adapters/discord/src/types/presence.ts
var StatusType2 = /* @__PURE__ */ ((StatusType3) => {
  StatusType3["ONLINE"] = "ONLINE";
  StatusType3["DND"] = "DND";
  StatusType3["IDLE"] = "IDLE";
  StatusType3["INVISIBLE"] = "INVISIBLE";
  StatusType3["OFFLINE"] = "OFFLINE";
  return StatusType3;
})(StatusType2 || {});
var ActivityType = /* @__PURE__ */ ((ActivityType2) => {
  ActivityType2[ActivityType2["GAME"] = 0] = "GAME";
  ActivityType2[ActivityType2["STREAMING"] = 1] = "STREAMING";
  ActivityType2[ActivityType2["LISTENING"] = 2] = "LISTENING";
  ActivityType2[ActivityType2["WATCHING"] = 3] = "WATCHING";
  ActivityType2[ActivityType2["CUSTOM"] = 4] = "CUSTOM";
  ActivityType2[ActivityType2["COMPETING"] = 5] = "COMPETING";
  return ActivityType2;
})(ActivityType || {});
var ActivityFlag = /* @__PURE__ */ ((ActivityFlag2) => {
  ActivityFlag2[ActivityFlag2["INSTANCE"] = 1] = "INSTANCE";
  ActivityFlag2[ActivityFlag2["JOIN"] = 2] = "JOIN";
  ActivityFlag2[ActivityFlag2["SPECTATE"] = 4] = "SPECTATE";
  ActivityFlag2[ActivityFlag2["JOIN_REQUEST"] = 8] = "JOIN_REQUEST";
  ActivityFlag2[ActivityFlag2["SYNC"] = 16] = "SYNC";
  ActivityFlag2[ActivityFlag2["PLAY"] = 32] = "PLAY";
  return ActivityFlag2;
})(ActivityFlag || {});

// adapters/discord/src/types/reaction.ts
Internal.define({
  "/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me": {
    PUT: "createReaction",
    DELETE: "deleteOwnReaction"
  },
  "/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/{user.id}": {
    DELETE: "deleteUserReaction"
  },
  "/channels/{channel.id}/messages/{message.id}/reactions/{emoji}": {
    GET: "getReactions",
    DELETE: "deleteAllReactionsforEmoji"
  },
  "/channels/{channel.id}/messages/{message.id}/reactions": {
    DELETE: "deleteAllReactions"
  }
});

// adapters/discord/src/types/role.ts
var Permission = /* @__PURE__ */ ((Permission2) => {
  Permission2[Permission2["CREATE_INSTANT_INVITE"] = 1] = "CREATE_INSTANT_INVITE";
  Permission2[Permission2["KICK_MEMBERS"] = 2] = "KICK_MEMBERS";
  Permission2[Permission2["BAN_MEMBERS"] = 4] = "BAN_MEMBERS";
  Permission2[Permission2["ADMINISTRATOR"] = 8] = "ADMINISTRATOR";
  Permission2[Permission2["MANAGE_CHANNELS"] = 16] = "MANAGE_CHANNELS";
  Permission2[Permission2["MANAGE_GUILD"] = 32] = "MANAGE_GUILD";
  Permission2[Permission2["ADD_REACTIONS"] = 64] = "ADD_REACTIONS";
  Permission2[Permission2["VIEW_AUDIT_LOG"] = 128] = "VIEW_AUDIT_LOG";
  Permission2[Permission2["PRIORITY_SPEAKER"] = 256] = "PRIORITY_SPEAKER";
  Permission2[Permission2["STREAM"] = 512] = "STREAM";
  Permission2[Permission2["VIEW_CHANNEL"] = 1024] = "VIEW_CHANNEL";
  Permission2[Permission2["SEND_MESSAGES"] = 2048] = "SEND_MESSAGES";
  Permission2[Permission2["SEND_TTS_MESSAGES"] = 4096] = "SEND_TTS_MESSAGES";
  Permission2[Permission2["MANAGE_MESSAGES"] = 8192] = "MANAGE_MESSAGES";
  Permission2[Permission2["EMBED_LINKS"] = 16384] = "EMBED_LINKS";
  Permission2[Permission2["ATTACH_FILES"] = 32768] = "ATTACH_FILES";
  Permission2[Permission2["READ_MESSAGE_HISTORY"] = 65536] = "READ_MESSAGE_HISTORY";
  Permission2[Permission2["MENTION_EVERYONE"] = 131072] = "MENTION_EVERYONE";
  Permission2[Permission2["USE_EXTERNAL_EMOJIS"] = 262144] = "USE_EXTERNAL_EMOJIS";
  Permission2[Permission2["VIEW_GUILD_INSIGHTS"] = 524288] = "VIEW_GUILD_INSIGHTS";
  Permission2[Permission2["CONNECT"] = 1048576] = "CONNECT";
  Permission2[Permission2["SPEAK"] = 2097152] = "SPEAK";
  Permission2[Permission2["MUTE_MEMBERS"] = 4194304] = "MUTE_MEMBERS";
  Permission2[Permission2["DEAFEN_MEMBERS"] = 8388608] = "DEAFEN_MEMBERS";
  Permission2[Permission2["MOVE_MEMBERS"] = 16777216] = "MOVE_MEMBERS";
  Permission2[Permission2["USE_VAD"] = 33554432] = "USE_VAD";
  Permission2[Permission2["CHANGE_NICKNAME"] = 67108864] = "CHANGE_NICKNAME";
  Permission2[Permission2["MANAGE_NICKNAMES"] = 134217728] = "MANAGE_NICKNAMES";
  Permission2[Permission2["MANAGE_ROLES"] = 268435456] = "MANAGE_ROLES";
  Permission2[Permission2["MANAGE_WEBHOOKS"] = 536870912] = "MANAGE_WEBHOOKS";
  Permission2[Permission2["MANAGE_EMOJIS_AND_STICKERS"] = 1073741824] = "MANAGE_EMOJIS_AND_STICKERS";
  Permission2[Permission2["USE_APPLICATION_COMMANDS"] = -2147483648] = "USE_APPLICATION_COMMANDS";
  Permission2[Permission2["REQUEST_TO_SPEAK"] = 1] = "REQUEST_TO_SPEAK";
  Permission2[Permission2["MANAGE_THREADS"] = 4] = "MANAGE_THREADS";
  Permission2[Permission2["CREATE_PUBLIC_THREADS"] = 8] = "CREATE_PUBLIC_THREADS";
  Permission2[Permission2["CREATE_PRIVATE_THREADS"] = 16] = "CREATE_PRIVATE_THREADS";
  Permission2[Permission2["USE_EXTERNAL_STICKERS"] = 32] = "USE_EXTERNAL_STICKERS";
  Permission2[Permission2["SEND_MESSAGES_IN_THREADS"] = 64] = "SEND_MESSAGES_IN_THREADS";
  Permission2[Permission2["START_EMBEDDED_ACTIVITIES"] = 128] = "START_EMBEDDED_ACTIVITIES";
  return Permission2;
})(Permission || {});
Internal.define({
  "/guilds/{guild.id}/roles": {
    GET: "getGuildRoles",
    POST: "createGuildRole",
    PATCH: "modifyGuildRolePositions"
  },
  "/guilds/{guild.id}/roles/{role.id}": {
    PATCH: "modifyGuildRole",
    DELETE: "deleteGuildRole"
  }
});

// adapters/discord/src/types/scheduled-event.ts
var GuildScheduledEvent;
((GuildScheduledEvent2) => {
  let PrivacyLevel;
  ((PrivacyLevel2) => {
    PrivacyLevel2[PrivacyLevel2["GUILD_ONLY"] = 2] = "GUILD_ONLY";
  })(PrivacyLevel = GuildScheduledEvent2.PrivacyLevel || (GuildScheduledEvent2.PrivacyLevel = {}));
  let EntityType;
  ((EntityType2) => {
    EntityType2[EntityType2["STAGE_INSTANCE"] = 1] = "STAGE_INSTANCE";
    EntityType2[EntityType2["VOICE"] = 2] = "VOICE";
    EntityType2[EntityType2["EXTERNAL"] = 3] = "EXTERNAL";
  })(EntityType = GuildScheduledEvent2.EntityType || (GuildScheduledEvent2.EntityType = {}));
  let Status;
  ((Status2) => {
    Status2[Status2["SCHEDULED"] = 1] = "SCHEDULED";
    Status2[Status2["ACTIVE"] = 2] = "ACTIVE";
    Status2[Status2["COMPLETED"] = 3] = "COMPLETED";
    Status2[Status2["CANCELLED"] = 4] = "CANCELLED";
  })(Status = GuildScheduledEvent2.Status || (GuildScheduledEvent2.Status = {}));
})(GuildScheduledEvent || (GuildScheduledEvent = {}));
Internal.define({
  "/guilds/{guild.id}/scheduled-events": {
    GET: "listScheduledEventsforGuild",
    POST: "createGuildScheduledEvent"
  },
  "/guilds/{guild.id}/scheduled-events/{guild_scheduled_event.id}": {
    GET: "getGuildScheduledEvent",
    PATCH: "modifyGuildScheduledEvent",
    DELETE: "deleteGuildScheduledEvent"
  },
  "/guilds/{guild.id}/scheduled-events/{guild_scheduled_event.id}/users": {
    GET: "getGuildScheduledEventUsers"
  }
});

// adapters/discord/src/types/stage-instance.ts
Internal.define({
  "/stage-instances": {
    POST: "createStageInstance"
  },
  "/stage-instances/{channel.id}": {
    GET: "getStageInstance",
    PATCH: "modifyStageInstance",
    DELETE: "deleteStageInstance"
  }
});

// adapters/discord/src/types/sticker.ts
var Sticker3;
((Sticker4) => {
  let Type;
  ((Type2) => {
    Type2[Type2["STANDARD"] = 1] = "STANDARD";
    Type2[Type2["GUILD"] = 2] = "GUILD";
  })(Type = Sticker4.Type || (Sticker4.Type = {}));
  let FormatType;
  ((FormatType2) => {
    FormatType2[FormatType2["PNG"] = 1] = "PNG";
    FormatType2[FormatType2["APNG"] = 2] = "APNG";
    FormatType2[FormatType2["LOTTIE"] = 3] = "LOTTIE";
  })(FormatType = Sticker4.FormatType || (Sticker4.FormatType = {}));
})(Sticker3 || (Sticker3 = {}));
Internal.define({
  "/stickers/{sticker.id}": {
    GET: "getSticker"
  },
  "/sticker-packs": {
    GET: "listNitroStickerPacks"
  },
  "/guilds/{guild.id}/stickers": {
    GET: "listGuildStickers",
    POST: "createGuildSticker"
  },
  "/guilds/{guild.id}/stickers/{sticker.id}": {
    GET: "getGuildSticker",
    PATCH: "modifyGuildSticker",
    DELETE: "deleteGuildSticker"
  }
});

// adapters/discord/src/types/team.ts
var MembershipState = /* @__PURE__ */ ((MembershipState2) => {
  MembershipState2[MembershipState2["INVITED"] = 1] = "INVITED";
  MembershipState2[MembershipState2["ACCEPTED"] = 2] = "ACCEPTED";
  return MembershipState2;
})(MembershipState || {});

// adapters/discord/src/types/thread.ts
Internal.define({
  "/guilds/{guild.id}/threads/active": {
    GET: "listActiveGuildThreads"
  },
  "/channels/{channel.id}/messages/{message.id}/threads": {
    POST: "startThreadwithMessage"
  },
  "/channels/{channel.id}/threads": {
    POST: "startThreadwithoutMessage"
  },
  "/channels/{channel.id}/thread-members/@me": {
    PUT: "joinThread",
    DELETE: "leaveThread"
  },
  "/channels/{channel.id}/thread-members/{user.id}": {
    PUT: "addThreadMember",
    DELETE: "removeThreadMember",
    GET: "getThreadMember"
  },
  "/channels/{channel.id}/thread-members": {
    GET: "listThreadMembers"
  },
  "/channels/{channel.id}/threads/active": {
    GET: "listActiveThreads"
  },
  "/channels/{channel.id}/threads/archived/public": {
    GET: "listPublicArchivedThreads"
  },
  "/channels/{channel.id}/threads/archived/private": {
    GET: "listPrivateArchivedThreads"
  },
  "/channels/{channel.id}/users/@me/threads/archived/private": {
    GET: "listJoinedPrivateArchivedThreads"
  }
});

// adapters/discord/src/types/user.ts
var UserFlag = /* @__PURE__ */ ((UserFlag2) => {
  UserFlag2[UserFlag2["NONE"] = 0] = "NONE";
  UserFlag2[UserFlag2["DISCORD_EMPLOYEE"] = 1] = "DISCORD_EMPLOYEE";
  UserFlag2[UserFlag2["PARTNERED_SERVER_OWNER"] = 2] = "PARTNERED_SERVER_OWNER";
  UserFlag2[UserFlag2["HYPESQUAD_EVENTS"] = 4] = "HYPESQUAD_EVENTS";
  UserFlag2[UserFlag2["BUG_HUNTER_LEVEL_1"] = 8] = "BUG_HUNTER_LEVEL_1";
  UserFlag2[UserFlag2["HOUSE_BRAVERY"] = 64] = "HOUSE_BRAVERY";
  UserFlag2[UserFlag2["HOUSE_BRILLIANCE"] = 128] = "HOUSE_BRILLIANCE";
  UserFlag2[UserFlag2["HOUSE_BALANCE"] = 256] = "HOUSE_BALANCE";
  UserFlag2[UserFlag2["EARLY_SUPPORTER"] = 512] = "EARLY_SUPPORTER";
  UserFlag2[UserFlag2["TEAM_USER"] = 1024] = "TEAM_USER";
  UserFlag2[UserFlag2["BUG_HUNTER_LEVEL_2"] = 16384] = "BUG_HUNTER_LEVEL_2";
  UserFlag2[UserFlag2["VERIFIED_BOT"] = 65536] = "VERIFIED_BOT";
  UserFlag2[UserFlag2["EARLY_VERIFIED_BOT_DEVELOPER"] = 131072] = "EARLY_VERIFIED_BOT_DEVELOPER";
  UserFlag2[UserFlag2["DISCORD_CERTIFIED_MODERATOR"] = 262144] = "DISCORD_CERTIFIED_MODERATOR";
  return UserFlag2;
})(UserFlag || {});
var VisibilityType = /* @__PURE__ */ ((VisibilityType2) => {
  VisibilityType2[VisibilityType2["NONE"] = 0] = "NONE";
  VisibilityType2[VisibilityType2["EVERYONE"] = 1] = "EVERYONE";
  return VisibilityType2;
})(VisibilityType || {});
Internal.define({
  "/users/@me": {
    GET: "getCurrentUser",
    PATCH: "modifyCurrentUser"
  },
  "/users/{user.id}": {
    GET: "getUser"
  },
  "/users/@me/connections": {
    GET: "getUserConnections"
  }
});

// adapters/discord/src/types/voice.ts
Internal.define({
  "/voice/regions": {
    GET: "listVoiceRegions"
  },
  "/guilds/{guild.id}/regions": {
    GET: "getGuildVoiceRegions"
  },
  "/guilds/{guild.id}/voice-states/@me": {
    PATCH: "modifyCurrentUserVoiceState"
  },
  "/guilds/{guild.id}/voice-states/{user.id}": {
    PATCH: "modifyUserVoiceState"
  }
});

// adapters/discord/src/types/webhook.ts
var Webhook2;
((Webhook3) => {
  let Type;
  ((Type2) => {
    Type2[Type2["INCOMING"] = 1] = "INCOMING";
    Type2[Type2["CHANNEL_FOLLOWER"] = 2] = "CHANNEL_FOLLOWER";
    Type2[Type2["APPLICATION"] = 3] = "APPLICATION";
  })(Type = Webhook3.Type || (Webhook3.Type = {}));
})(Webhook2 || (Webhook2 = {}));
Internal.define({
  "/channels/{channel.id}/webhooks": {
    POST: "createWebhook",
    GET: "getChannelWebhooks"
  },
  "/guilds/{guild.id}/webhooks": {
    GET: "getGuildWebhooks"
  },
  "/webhooks/{webhook.id}": {
    GET: "getWebhook",
    PATCH: "modifyWebhook",
    DELETE: "deleteWebhook"
  },
  "/webhooks/{webhook.id}/{webhook.token}": {
    GET: "getWebhookwithToken",
    PATCH: "modifyWebhookwithToken",
    DELETE: "deleteWebhookwithToken",
    POST: "executeWebhook"
  },
  "/webhooks/{webhook.id}/{webhook.token}/slack": {
    POST: "executeSlackCompatibleWebhook"
  },
  "/webhooks/{webhook.id}/{webhook.token}/github": {
    POST: "executeGitHubCompatibleWebhook"
  },
  "/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}": {
    GET: "getWebhookMessage",
    PATCH: "editWebhookMessage",
    DELETE: "deleteWebhookMessage"
  }
});

// adapters/discord/src/ws.ts
var import_satori3 = require("@satorijs/satori");
var logger = new import_satori3.Logger("discord");
var WsClient = class extends import_satori3.Adapter.WsClient {
  constructor() {
    super(...arguments);
    this._d = 0;
    this._sessionId = "";
  }
  prepare() {
    return this.bot.http.ws(this.bot.config.gateway);
  }
  heartbeat() {
    logger.debug(`heartbeat d ${this._d}`);
    this.bot.socket.send(JSON.stringify({
      op: 1 /* HEARTBEAT */,
      d: this._d
    }));
  }
  accept() {
    if (this._sessionId) {
      logger.debug("resuming");
      this.bot.socket.send(JSON.stringify({
        op: 6 /* RESUME */,
        d: {
          token: this.bot.config.token,
          session_id: this._sessionId,
          seq: this._d
        }
      }));
      this.bot.online();
    }
    this.bot.socket.on("message", async (data) => {
      let parsed;
      try {
        parsed = JSON.parse(data.toString());
      } catch (error) {
        return logger.warn("cannot parse message", data);
      }
      logger.debug(require("util").inspect(parsed, false, null, true));
      if (parsed.s) {
        this._d = parsed.s;
      }
      if (parsed.op === 10 /* HELLO */) {
        this._ping = setInterval(() => this.heartbeat(), parsed.d.heartbeat_interval);
        if (this._sessionId)
          return;
        this.bot.socket.send(JSON.stringify({
          op: 2 /* IDENTIFY */,
          d: {
            token: this.bot.config.token,
            properties: {},
            compress: false,
            intents: this.bot.config.intents
          }
        }));
      }
      if (parsed.op === 0 /* DISPATCH */) {
        if (parsed.t === "READY") {
          this._sessionId = parsed.d.session_id;
          const self = adaptUser(parsed.d.user);
          self.selfId = self.userId;
          delete self.userId;
          Object.assign(this.bot, self);
          logger.debug("session_id " + this._sessionId);
          return this.bot.online();
        }
        const session = await adaptSession(this.bot, parsed);
        if (session)
          this.bot.dispatch(session);
      }
    });
    this.bot.socket.on("close", () => {
      clearInterval(this._ping);
    });
  }
};
__name(WsClient, "WsClient");
((WsClient2) => {
  WsClient2.Config = import_satori3.Schema.intersect([
    import_satori3.Schema.object({
      gateway: import_satori3.Schema.string().default("wss://gateway.discord.gg/?v=10&encoding=json").description("要连接的 WebSocket 网关。"),
      intents: import_satori3.Schema.bitset(GatewayIntent).description("需要订阅的机器人事件。").default(0 | 512 /* GUILD_MESSAGES */ | 1024 /* GUILD_MESSAGE_REACTIONS */ | 4096 /* DIRECT_MESSAGES */ | 8192 /* DIRECT_MESSAGE_REACTIONS */ | 32768 /* MESSAGE_CONTENT */)
    }).description("推送设置"),
    import_satori3.Adapter.WsClient.Config
  ]);
})(WsClient || (WsClient = {}));

// adapters/discord/src/bot.ts
var DiscordBot = class extends import_satori4.Bot {
  constructor(ctx, config) {
    super(ctx, config);
    this.http = ctx.http.extend({
      ...config,
      headers: {
        Authorization: `Bot ${config.token}`,
        ...config.headers
      }
    });
    this.internal = new Internal(this.http);
    ctx.plugin(WsClient, this);
  }
  async getSelf() {
    const data = await this.internal.getCurrentUser();
    return adaptUser(data);
  }
  async sendMessage(channelId, content, guildId) {
    return new DiscordMessenger(this, channelId, guildId).send(content);
  }
  async sendPrivateMessage(channelId, content) {
    return new DiscordMessenger(this, channelId).send(content);
  }
  async deleteMessage(channelId, messageId) {
    await this.internal.deleteMessage(channelId, messageId);
  }
  async editMessage(channelId, messageId, content) {
    const elements = import_satori4.segment.normalize(content);
    content = elements.toString();
    const image = elements.find((v) => v.type === "image");
    if (image) {
      throw new Error("You can't include embed object(s) while editing message.");
    }
    await this.internal.editMessage(channelId, messageId, {
      content
    });
  }
  async getMessage(channelId, messageId) {
    const data = await this.internal.getChannelMessage(channelId, messageId);
    return await adaptMessage(this, data);
  }
  async getMessageList(channelId, before) {
    const data = (await this.internal.getChannelMessages(channelId, { before, limit: 50 })).reverse();
    return await Promise.all(data.map((data2) => adaptMessage(this, data2)));
  }
  async getUser(userId) {
    const data = await this.internal.getUser(userId);
    return adaptUser(data);
  }
  async getGuildMemberList(guildId) {
    const data = await this.internal.listGuildMembers(guildId);
    return data.map((v) => adaptUser(v.user));
  }
  async getChannel(channelId) {
    const data = await this.internal.getChannel(channelId);
    return adaptChannel(data);
  }
  async getGuildMember(guildId, userId) {
    const member = await this.internal.getGuildMember(guildId, userId);
    return {
      ...adaptUser(member.user),
      nickname: member.nick
    };
  }
  async kickGuildMember(guildId, userId) {
    return this.internal.removeGuildMember(guildId, userId);
  }
  async getGuild(guildId) {
    const data = await this.internal.getGuild(guildId);
    return adaptGuild(data);
  }
  async getGuildList() {
    const data = await this.internal.getCurrentUserGuilds();
    return data.map((v) => adaptGuild(v));
  }
  async getChannelList(guildId) {
    const data = await this.internal.getGuildChannels(guildId);
    return data.map((v) => adaptChannel(v));
  }
};
__name(DiscordBot, "DiscordBot");
((DiscordBot2) => {
  DiscordBot2.Config = import_satori4.Schema.intersect([
    import_satori4.Schema.object({
      token: import_satori4.Schema.string().description("机器人的用户令牌。").role("secret").required()
    }),
    WsClient.Config,
    DiscordMessenger.Config,
    import_satori4.Quester.createConfig("https://discord.com/api/v10")
  ]);
})(DiscordBot || (DiscordBot = {}));
DiscordBot.prototype.platform = "discord";

// adapters/discord/src/index.ts
var src_default = DiscordBot;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Discord,
  DiscordBot,
  DiscordMessenger,
  WsClient,
  adaptAuthor,
  adaptChannel,
  adaptGuild,
  adaptMessage,
  adaptSession,
  adaptUser,
  prepareMessage
});
//# sourceMappingURL=index.js.map
