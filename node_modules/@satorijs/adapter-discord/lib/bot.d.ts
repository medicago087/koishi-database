import { Bot, Context, Fragment, Quester, Schema } from '@satorijs/satori';
import { DiscordMessenger } from './message';
import { Internal } from './types';
import { WsClient } from './ws';
export declare class DiscordBot extends Bot<DiscordBot.Config> {
    http: Quester;
    internal: Internal;
    constructor(ctx: Context, config: DiscordBot.Config);
    getSelf(): Promise<import("@satorijs/core").Universal.User>;
    sendMessage(channelId: string, content: Fragment, guildId?: string): Promise<string[]>;
    sendPrivateMessage(channelId: string, content: Fragment): Promise<string[]>;
    deleteMessage(channelId: string, messageId: string): Promise<void>;
    editMessage(channelId: string, messageId: string, content: Fragment): Promise<void>;
    getMessage(channelId: string, messageId: string): Promise<import("@satorijs/core").Universal.Message>;
    getMessageList(channelId: string, before?: string): Promise<import("@satorijs/core").Universal.Message[]>;
    getUser(userId: string): Promise<import("@satorijs/core").Universal.User>;
    getGuildMemberList(guildId: string): Promise<import("@satorijs/core").Universal.User[]>;
    getChannel(channelId: string): Promise<import("@satorijs/core").Universal.Channel>;
    getGuildMember(guildId: string, userId: string): Promise<{
        nickname: string;
        userId: string;
        username?: string;
        avatar?: string;
        discriminator?: string;
        isBot?: boolean;
    }>;
    kickGuildMember(guildId: string, userId: string): Promise<void>;
    getGuild(guildId: string): Promise<import("@satorijs/core").Universal.Guild>;
    getGuildList(): Promise<import("@satorijs/core").Universal.Guild[]>;
    getChannelList(guildId: string): Promise<import("@satorijs/core").Universal.Channel[]>;
}
export declare namespace DiscordBot {
    interface Config extends Bot.Config, Quester.Config, DiscordMessenger.Config, WsClient.Config {
        token: string;
    }
    const Config: Schema<Config>;
}
