var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// satori/packages/element/src/index.ts
var import_cosmokit = require("cosmokit");
var kElement = Symbol("element");
function isElement(source) {
  return source && typeof source === "object" && source[kElement];
}
__name(isElement, "isElement");
function toElement(content) {
  if (typeof content !== "string")
    return content;
  return Element("text", { content });
}
__name(toElement, "toElement");
function toElementArray(input) {
  if (Array.isArray(input)) {
    return input.map(toElement);
  } else if (typeof input === "string") {
    return [toElement(input)];
  } else if (!input.type) {
    return input.children;
  } else {
    return [input];
  }
}
__name(toElementArray, "toElementArray");
var ElementConstructor = class {
  get data() {
    return this.attrs;
  }
  toString(strip = false) {
    if (this.type === "text")
      return Element.escape(this.attrs.content);
    const inner = this.children.map((child) => child.toString(strip)).join("");
    if (!this.type || strip)
      return inner;
    const attrs = Object.entries(this.attrs).map(([key, value]) => {
      if ((0, import_cosmokit.isNullable)(value))
        return "";
      key = (0, import_cosmokit.hyphenate)(key);
      if (value === "")
        return ` ${key}`;
      return ` ${key}="${Element.escape(value, true)}"`;
    }).join("");
    if (!this.children.length)
      return `<${this.type}${attrs}/>`;
    return `<${this.type}${attrs}>${inner}</${this.type}>`;
  }
};
__name(ElementConstructor, "ElementConstructor");
(0, import_cosmokit.defineProperty)(ElementConstructor, "name", "Element");
(0, import_cosmokit.defineProperty)(ElementConstructor.prototype, kElement, true);
function Element(type, ...args) {
  const el = Object.create(ElementConstructor.prototype);
  let attrs = {}, children = [];
  if (args[0] && typeof args[0] === "object" && !isElement(args[0]) && !Array.isArray(args[0])) {
    for (const [key, value] of Object.entries(args.shift())) {
      if ((0, import_cosmokit.isNullable)(value))
        continue;
      if (value === true) {
        attrs[key] = "";
      } else if (value === false) {
        attrs["no" + (0, import_cosmokit.capitalize)(key)] = "";
      } else {
        attrs[key] = "" + value;
      }
    }
  }
  if (args[0])
    children = toElementArray(args[0]);
  return Object.assign(el, { type, attrs, children });
}
__name(Element, "Element");
((Element2) => {
  function normalize(source) {
    if (typeof source !== "string")
      return toElementArray(source);
    return Element2.parse(source);
  }
  Element2.normalize = normalize;
  __name(normalize, "normalize");
  function escape(source, inline = false) {
    const result = source.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    return inline ? result.replace(/"/g, "&quot;") : result;
  }
  Element2.escape = escape;
  __name(escape, "escape");
  function unescape(source) {
    return source.replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&quot;/g, '"').replace(/&amp;/g, "&");
  }
  Element2.unescape = unescape;
  __name(unescape, "unescape");
  function from(source, options = {}) {
    var _a;
    const elements = parse(source);
    if (options.caret) {
      if (options.type && ((_a = elements[0]) == null ? void 0 : _a.type) !== options.type)
        return;
      return elements[0];
    }
    return select(elements, options.type || "*")[0];
  }
  Element2.from = from;
  __name(from, "from");
  const combRegExp = / *([ >+~]) */g;
  function parseSelector(input) {
    return input.split(",").map((query) => {
      const selectors = [];
      query = query.trim();
      let combCap, combinator = " ";
      while (combCap = combRegExp.exec(query)) {
        selectors.push({ type: query.slice(0, combCap.index), combinator });
        combinator = combCap[1];
        query = query.slice(combCap.index + combCap[0].length);
      }
      selectors.push({ type: query, combinator });
      return selectors;
    });
  }
  Element2.parseSelector = parseSelector;
  __name(parseSelector, "parseSelector");
  function select(source, query) {
    if (typeof source === "string")
      source = parse(source);
    if (typeof query === "string")
      query = parseSelector(query);
    if (!query.length)
      return;
    let adjacent = [];
    const results = [];
    for (const [index, element] of source.entries()) {
      const inner = [];
      const local = [...query, ...adjacent];
      adjacent = [];
      let matched = false;
      for (const group of local) {
        const { type, combinator } = group[0];
        if (type === element.type || type === "*") {
          if (group.length === 1) {
            matched = true;
          } else if ([" ", ">"].includes(group[1].combinator)) {
            inner.push(group.slice(1));
          } else if (group[1].combinator === "+") {
            adjacent.push(group.slice(1));
          } else {
            query.push(group.slice(1));
          }
        }
        if (combinator === " ") {
          inner.push(group);
        }
      }
      if (matched)
        results.push(source[index]);
      results.push(...select(element.children, inner));
    }
    return results;
  }
  Element2.select = select;
  __name(select, "select");
  const tagRegExp = /<(\/?)\s*([^\s>/]+)([^>]*?)\s*(\/?)>/;
  const attrRegExp = /([^\s=]+)(?:="([^"]*)"|=([^"\s]+))?/g;
  function parse(source) {
    const tokens = [];
    let tagCap;
    while (tagCap = tagRegExp.exec(source)) {
      if (tagCap.index) {
        tokens.push(unescape(source.slice(0, tagCap.index)));
      }
      const [_, close, tag, attrs, empty] = tagCap;
      const token = { source: _, tag, close, empty, attrs: {} };
      let attrCap;
      while (attrCap = attrRegExp.exec(attrs)) {
        const [_2, key, v1 = "", v2 = v1] = attrCap;
        token.attrs[(0, import_cosmokit.camelize)(key)] = unescape(v2);
      }
      tokens.push(token);
      source = source.slice(tagCap.index + tagCap[0].length);
    }
    if (source)
      tokens.push(unescape(source));
    const stack = [Element2(null)];
    function rollback(index) {
      for (; index > 0; index--) {
        const { children } = stack.shift();
        const { source: source2 } = stack[0].children.pop();
        stack[0].children.push(Element2("text", { content: source2 }));
        stack[0].children.push(...children);
      }
    }
    __name(rollback, "rollback");
    for (const token of tokens) {
      if (typeof token === "string") {
        stack[0].children.push(Element2("text", { content: token }));
      } else if (token.close) {
        let index = 0;
        while (index < stack.length && stack[index].type !== token.tag)
          index++;
        if (index === stack.length) {
          stack[0].children.push(Element2("text", { content: token.source }));
        } else {
          rollback(index);
          const element = stack.shift();
          delete element.source;
        }
      } else {
        const element = Element2(token.tag, token.attrs);
        stack[0].children.push(element);
        if (!token.empty) {
          element.source = token.source;
          stack.unshift(element);
        }
      }
    }
    rollback(stack.length - 1);
    return stack[0].children;
  }
  Element2.parse = parse;
  __name(parse, "parse");
  function transform(source, rules, session) {
    const elements = typeof source === "string" ? parse(source) : source;
    const output = [];
    elements.forEach((element) => {
      var _a, _b;
      const { type, attrs, children } = element;
      let result = (_b = (_a = rules[type]) != null ? _a : rules.default) != null ? _b : true;
      if (typeof result === "function") {
        result = result(attrs, children, session);
      }
      if (result === true) {
        output.push(Element2(type, attrs, transform(children, rules)));
      } else if (result !== false) {
        output.push(...toElementArray(result));
      }
    });
    return typeof source === "string" ? output.join("") : output;
  }
  Element2.transform = transform;
  __name(transform, "transform");
  async function transformAsync(source, rules, session) {
    const elements = typeof source === "string" ? parse(source) : source;
    const children = (await Promise.all(elements.map(async (element) => {
      var _a, _b;
      const { type, attrs, children: children2 } = element;
      let result = (_b = (_a = rules[type]) != null ? _a : rules.default) != null ? _b : true;
      if (typeof result === "function") {
        result = await result(attrs, children2, session);
      }
      if (result === true) {
        return [Element2(type, attrs, await transformAsync(children2, rules))];
      } else if (result !== false) {
        return toElementArray(result);
      } else {
        return [];
      }
    }))).flat(1);
    return typeof source === "string" ? children.join("") : children;
  }
  Element2.transformAsync = transformAsync;
  __name(transformAsync, "transformAsync");
  function join(elements) {
    return elements.join("");
  }
  Element2.join = join;
  __name(join, "join");
  function createFactory(type, ...keys) {
    return (...args) => {
      const element = Element2(type);
      keys.forEach((key, index) => {
        if (!(0, import_cosmokit.isNullable)(args[index])) {
          element.attrs[key] = args[index];
        }
      });
      if (args[keys.length]) {
        Object.assign(element.attrs, args[keys.length]);
      }
      return element;
    };
  }
  __name(createFactory, "createFactory");
  function createAssetFactory(type) {
    return (value, attrs = {}) => {
      if ((0, import_cosmokit.is)("Buffer", value)) {
        value = "base64://" + value.toString("base64");
      } else if ((0, import_cosmokit.is)("ArrayBuffer", value)) {
        value = "base64://" + Buffer.from(value).toString("base64");
      }
      return Element2(type, { ...attrs, url: value });
    };
  }
  __name(createAssetFactory, "createAssetFactory");
  Element2.at = createFactory("at", "id");
  Element2.sharp = createFactory("sharp", "id");
  Element2.quote = createFactory("quote", "id");
  Element2.image = createAssetFactory("image");
  Element2.video = createAssetFactory("video");
  Element2.audio = createAssetFactory("audio");
  Element2.file = createAssetFactory("file");
})(Element || (Element = {}));
module.exports = Element;
//# sourceMappingURL=index.cjs.map
