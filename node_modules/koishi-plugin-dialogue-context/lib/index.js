var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// packages/context/src/locales/zh.yml
var require_zh = __commonJS({
  "packages/context/src/locales/zh.yml"(exports, module2) {
    module2.exports = { commands: { teach: { options: { disable: "在当前环境下禁用问答", disableGlobal: "在所有环境下禁用问答", enable: "在当前环境下启用问答", enableGlobal: "在所有环境下启用问答", guilds: "设置具体的生效环境", global: "无视上下文搜索" }, messages: { context: { "modifier-expected": "选项 -g, --guilds 必须与 -d/-D/-e/-E 之一同时使用。", "private-context": "非群聊上下文中请使用 -E/-D 进行操作或指定 -g, --guilds 选项。", "enable-all": "生效环境：全局", "enable-except-some": "生效环境：除 {0} 个群外的所有群", "enable-except-current-only": "生效环境：除本群", "enable-except-current-and-more": "生效环境：除本群等 {0} 个群外的所有群", "disable-all": "生效环境：全局禁止", "disable-except-some": "生效环境：{0} 个群", "disable-except-current-only": "生效环境：仅本群", "disable-except-current-and-more": "生效环境：本群等 {0} 个群" } } } } };
  }
});

// packages/context/src/index.ts
var src_exports = {};
__export(src_exports, {
  Config: () => Config,
  RE_GROUPS: () => RE_GROUPS,
  apply: () => apply,
  name: () => name,
  using: () => using
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");
var import_koishi_plugin_dialogue = require("koishi-plugin-dialogue");
var RE_GROUPS = /^\d+(,\d+)*$/;
var Config = import_koishi.Schema.object({
  authority: import_koishi.Schema.number().default(3).description("修改上下文设置的权限等级。")
});
var name = "koishi-plugin-dialogue-context";
var using = ["dialogue"];
function apply(ctx, config) {
  const { authority } = config;
  ctx.i18n.define("zh", require_zh());
  ctx.model.extend("dialogue", {
    guilds: "list(255)"
  });
  ctx.command("teach").option("disable", "-d").option("disableGlobal", "-D", { authority }).option("enable", "-e").option("enableGlobal", "-E", { authority }).option("guilds", "-g <gids:string>", { authority, type: RE_GROUPS }).option("global", "-G").before(({ options, session }) => {
    if (options.disable && options.enable) {
      return session.text(".options-conflict", ["-d, -e"]);
    } else if (options.disableGlobal && options.enableGlobal) {
      return session.text(".options-conflict", ["-D, -E"]);
    } else if (options.disableGlobal && options.disable) {
      return session.text(".options-conflict", ["-D, -d"]);
    } else if (options.enable && options.enableGlobal) {
      return session.text(".options-conflict", ["-E, -e"]);
    }
    let noContextOptions = false;
    let reversed, partial, guilds;
    if (options.disable) {
      reversed = true;
      partial = !options.enableGlobal;
      guilds = [session.gid];
    } else if (options.disableGlobal) {
      reversed = !!options.guilds;
      partial = false;
      guilds = options.enable ? [session.gid] : [];
    } else if (options.enableGlobal) {
      reversed = !options.guilds;
      partial = false;
      guilds = [];
    } else {
      noContextOptions = !options.enable;
      if (options["target"] ? options.enable : !options.global) {
        reversed = false;
        partial = true;
        guilds = [session.gid];
      }
    }
    (0, import_koishi.defineProperty)(options, "reversed", reversed);
    (0, import_koishi.defineProperty)(options, "partial", partial);
    if ("guilds" in options) {
      if (noContextOptions) {
        return session.text(".context.modifier-expected");
      } else {
        (0, import_koishi.defineProperty)(options, "_guilds", options.guilds ? options.guilds.split(",").map((id) => `${session.platform}:${id}`) : []);
      }
    } else if (session.subtype !== "group" && options["partial"]) {
      return session.text(".context.private-context");
    } else {
      (0, import_koishi.defineProperty)(options, "_guilds", guilds);
    }
  });
  ctx.on("dialogue/usage", (output, session) => {
    output.add(`上下文选项：
　允许本群：　　　-e
　禁止本群：　　　-d`, 700);
    if (session.user.authority < authority)
      return;
    output.add(`　全局允许：　　　-E
　全局禁止：　　　-D
　设置群号：　　　-g id
　无视上下文搜索：-G`, 700);
  });
  ctx.on("dialogue/modify", (session, data) => {
    const { _guilds, partial, reversed } = session.argv.options;
    if (!_guilds)
      return;
    if (!data.guilds)
      data.guilds = [];
    if (partial) {
      const newGroups = !(data.flag & import_koishi_plugin_dialogue.Dialogue.Flag.complement) === reversed ? (0, import_koishi.difference)(data.guilds, _guilds) : (0, import_koishi.union)(data.guilds, _guilds);
      if (!(0, import_koishi_plugin_dialogue.equal)(data.guilds, newGroups)) {
        data.guilds = newGroups.sort();
      }
    } else {
      data.flag = data.flag & ~import_koishi_plugin_dialogue.Dialogue.Flag.complement | +reversed * import_koishi_plugin_dialogue.Dialogue.Flag.complement;
      if (!(0, import_koishi_plugin_dialogue.equal)(data.guilds, _guilds)) {
        data.guilds = _guilds.sort();
      }
    }
  });
  ctx.before("dialogue/search", (session, test) => {
    const { options } = session.argv;
    test.partial = options.partial;
    test.reversed = options.reversed;
    test.guilds = options._guilds;
  });
  ctx.on("dialogue/detail", ({ guilds, flag }, detail, session) => {
    const includeCurrentGuild = session.subtype === "group" && guilds.includes(session.gid);
    const prefix = flag & import_koishi_plugin_dialogue.Dialogue.Flag.complement ? "enable-" : "disable-";
    const path = includeCurrentGuild ? "except-current-" + (guilds.length - 1 ? "and-more" : "only") : guilds.length ? "except-some" : "all";
    detail.add(session.text(".context." + prefix + path, [guilds.length]), 500);
  });
  ctx.on("dialogue/abstract", ({ guilds, flag }, output, session) => {
    const { options } = session.argv;
    if (!options._guilds && session.subtype === "group") {
      const isReversed = flag & import_koishi_plugin_dialogue.Dialogue.Flag.complement;
      const hasGroup = guilds.includes(session.gid);
      output.unshift(!isReversed === hasGroup ? isReversed ? "E" : "e" : isReversed ? "d" : "D");
    }
  });
  ctx.on("dialogue/receive", ({ session, test }) => {
    test.partial = true;
    test.reversed = false;
    test.guilds = [session.gid];
  });
  ctx.on("dialogue/query", (test, query) => {
    if (!test.guilds || !test.guilds.length)
      return;
    query.$and.push({
      $or: [{
        flag: { [test.reversed ? "$bitsAllSet" : "$bitsAllClear"]: import_koishi_plugin_dialogue.Dialogue.Flag.complement },
        $and: test.guilds.map(($el) => ({ guilds: { $el } }))
      }, {
        flag: { [test.reversed ? "$bitsAllClear" : "$bitsAllSet"]: import_koishi_plugin_dialogue.Dialogue.Flag.complement },
        $not: { guilds: { $el: test.guilds } }
      }]
    });
  });
}
__name(apply, "apply");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Config,
  RE_GROUPS,
  apply,
  name,
  using
});
//# sourceMappingURL=index.js.map
