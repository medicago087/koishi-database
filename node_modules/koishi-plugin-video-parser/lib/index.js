"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apply = exports.Config = exports.name = void 0;
const jsx_runtime_1 = require("@satorijs/element/jsx-runtime");
const koishi_1 = require("koishi");
const tenapi_1 = __importDefault(require("./parsers/tenapi"));
exports.name = 'video-decoder';
exports.Config = koishi_1.Schema.object({
    api: koishi_1.Schema.union(['tenapi', '暂时没有别的接口了'])
        .description('选择一个你喜欢的接口名称，不同接口支持的平台可能不同')
        .default('plapi'),
});
// 每一个选项对应的接口函数
const parsers = {
    tenapi: tenapi_1.default,
};
async function apply(ctx, config) {
    ctx.command('#视频解析 <url>')
        .action(async ({ session }, url) => {
        const parser = parsers[config.api];
        if (!parser) {
            return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("quote", { id: session.messageId }), "\u63D2\u4EF6\u914D\u7F6E\u9519\u8BEF\u55B5\uFF0C\u8BF7\u8054\u7CFBbot\u7BA1\u7406\u5458\u66F4\u6362\u63A5\u53E3\u55B5~"] }));
        }
        const result = await parser(ctx, url);
        if (!result.startsWith('err:')) {
            session.send((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("quote", { id: session.messageId }), "\u89E3\u6790\u6210\u529F\u55B5,\u6B63\u5728\u4E0A\u4F20\u55B5~"] }));
            return ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)("video", { url: result }) }));
        }
        else {
            return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("quote", { id: session.messageId }), "\u89E3\u6790\u5931\u8D25\u55B5~,", result.replace('err:', '')] }));
        }
    })
        .usage('解析视频地址,后接视频链接')
        .example('#视频解析 https://www.bilibili.com/video/BV1jY411d79g/');
}
exports.apply = apply;
