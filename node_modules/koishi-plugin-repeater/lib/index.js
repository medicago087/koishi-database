"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.apply = exports.Config = exports.name = void 0;
const koishi_1 = require("koishi");
const RepeatHandler = koishi_1.Schema.object({
    minTimes: koishi_1.Schema.natural().min(2).default(2).required().description('最少重复次数。'),
    probability: koishi_1.Schema.percent().default(1).description('复读发生概率。'),
});
function onRepeat(options) {
    if (!options || typeof options !== 'object')
        return options;
    const { minTimes = 2, probability = 1 } = options;
    return ({ repeated, times, content }) => times >= minTimes && !repeated && koishi_1.Random.bool(probability) ? content : '';
}
exports.name = 'repeater';
exports.Config = koishi_1.Schema.object({
    onRepeat: koishi_1.Schema.union([RepeatHandler, Function]).description('响应复读消息。'),
    onInterrupt: koishi_1.Schema.function().hidden().description('响应打断复读。'),
});
function apply(ctx, config = {}) {
    ctx = ctx.guild();
    const states = {};
    function getState(id) {
        return states[id] || (states[id] = {
            content: '',
            repeated: false,
            times: 0,
            users: {},
        });
    }
    ctx.before('send', ({ cid, content }) => {
        const state = getState(cid);
        state.repeated = true;
        if (state.content === content) {
            state.times += 1;
        }
        else {
            state.content = content;
            state.times = 1;
            state.users = {};
        }
    });
    ctx.middleware((session, next) => {
        const { content, uid, userId } = session;
        // never respond to messages from self
        if (ctx.bots[uid])
            return;
        const state = getState(session.cid);
        const check = (handle) => {
            const text = handle?.(state, session);
            return text && next(text);
        };
        // duplicate repeating & normal repeating
        if (content === state.content) {
            state.times += 1;
            state.users[userId] = (state.users[userId] || 0) + 1;
            return check(onRepeat(config.onRepeat)) || next();
        }
        // interrupt repeating
        const result = check(config.onInterrupt);
        if (result)
            return result;
        // unrepeated message
        state.content = content;
        state.repeated = false;
        state.times = 1;
        state.users = { [userId]: 1 };
        return next();
    });
}
exports.apply = apply;
