import { Context, Dict, Schema, Session } from 'koishi';
interface RepeatState {
    content: string;
    repeated: boolean;
    times: number;
    users: Dict<number>;
}
declare type StateCallback = (state: RepeatState, session: Session) => void | string;
interface RepeatHandler {
    minTimes?: number;
    probability?: number;
}
declare const RepeatHandler: Schema<RepeatHandler>;
export interface Config {
    onRepeat?: RepeatHandler | StateCallback;
    onInterrupt?: StateCallback;
}
export declare const name = "repeater";
export declare const Config: Schema<Config>;
export declare function apply(ctx: Context, config?: Config): void;
export {};
