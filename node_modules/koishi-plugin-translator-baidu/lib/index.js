var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// packages/baidu/src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_crypto = require("crypto");
var import_koishi = require("koishi");
var import_translator = __toESM(require("@koishijs/translator"));
var BaiduTranslator = class extends import_translator.default {
  _signature(query, salt) {
    const str = this.config.appid + query + salt + this.config.secret;
    const md5 = (0, import_crypto.createHash)("md5");
    md5.update(str);
    return md5.digest("hex");
  }
  async translate(options) {
    const from = options.source || "auto";
    const to = options.target || "zh";
    const q = options.input;
    const salt = new Date().getTime();
    const sign = this._signature(q, salt.toString());
    const resp = await this.ctx.http.post(
      "http://api.fanyi.baidu.com/api/trans/vip/translate",
      { from, to, q, salt, appid: this.config.appid, sign },
      {
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        }
      }
    );
    if ("error_code" in resp && +resp.error_code) {
      throw new Error("errorCode: " + resp.error_code);
    }
    if (!("trans_result" in resp)) {
      throw new Error("invalid response");
    }
    return resp.trans_result[0].dst;
  }
};
__name(BaiduTranslator, "BaiduTranslator");
((BaiduTranslator2) => {
  BaiduTranslator2.Config = import_koishi.Schema.object({
    appid: import_koishi.Schema.string().required().description("百度翻译的 App ID。"),
    secret: import_koishi.Schema.string().role("secret").required().description("百度翻译的 Secret。")
  });
})(BaiduTranslator || (BaiduTranslator = {}));
var src_default = BaiduTranslator;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
//# sourceMappingURL=index.js.map
