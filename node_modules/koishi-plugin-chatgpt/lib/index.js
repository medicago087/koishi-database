"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apply = exports.Config = void 0;
const api_1 = __importDefault(require("./api"));
const koishi_1 = require("koishi");
const logger = new koishi_1.Logger('chatgpt');
exports.Config = koishi_1.Schema.intersect([
    api_1.default.Config,
    koishi_1.Schema.object({
        appellation: koishi_1.Schema.boolean().description('是否使用称呼触发对话。').default(true),
        prefix: koishi_1.Schema.union([
            koishi_1.Schema.array(String),
            koishi_1.Schema.transform(String, (prefix) => [prefix]),
        ]).description('使用特定前缀触发对话。').default(['!', '！']),
    }),
]);
const conversations = new Map();
function apply(ctx, config) {
    ctx.i18n.define('zh', require('./locales/zh-CN'));
    const api = new api_1.default(ctx, config);
    ctx.middleware(async (session, next) => {
        if (session.parsed?.appel) {
            return session.execute('chatgpt ' + session.parsed.content);
        }
        for (const prefix of config.prefix) {
            if (!prefix || !session.content.startsWith(prefix))
                continue;
            return session.execute('chatgpt ' + session.content.slice(config.prefix.length));
        }
        return next();
    });
    ctx.command('chatgpt')
        .option('reset', '-r')
        .action(async ({ options, session }, input) => {
        if (options?.reset) {
            conversations.delete(session.uid);
            return session.text('.reset-success');
        }
        try {
            // ensure the API is properly authenticated (optional)
            await api.ensureAuth();
        }
        catch (err) {
            return session.text('.invalid-token');
        }
        try {
            // send a message and wait for the response
            const { conversationId, messageId } = conversations.get(session.uid) ?? {};
            const response = await api.sendMessage({ message: input, conversationId, messageId });
            conversations.set(session.uid, { conversationId: response.conversationId, messageId: response.messageId });
            return response.message;
        }
        catch (error) {
            logger.warn(error);
            throw new koishi_1.SessionError('commands.chatgpt.messages.unknown-error');
        }
    });
}
exports.apply = apply;
