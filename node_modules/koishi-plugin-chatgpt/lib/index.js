"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apply = exports.Config = void 0;
const api_1 = __importDefault(require("./api"));
const koishi_1 = require("koishi");
const logger = new koishi_1.Logger('chatgpt');
const interaction = ['user', 'channel', 'both'];
exports.Config = koishi_1.Schema.intersect([
    api_1.default.Config,
    koishi_1.Schema.object({
        appellation: koishi_1.Schema.boolean().description('是否使用称呼触发对话。').default(true),
        prefix: koishi_1.Schema.union([
            koishi_1.Schema.array(String),
            koishi_1.Schema.transform(String, (prefix) => [prefix]),
        ]).description('使用特定前缀触发对话。').default(['!', '！']),
        interaction: koishi_1.Schema.union([
            koishi_1.Schema.const('user').description('用户独立'),
            koishi_1.Schema.const('channel').description('频道独立'),
            koishi_1.Schema.const('both').description('频道内用户独立'),
        ]).description('上下文共享方式。').default('channel'),
    }),
]);
const conversations = new Map();
function apply(ctx, config) {
    ctx.i18n.define('zh', require('./locales/zh-CN'));
    const api = new api_1.default(ctx, config);
    const getContextKey = (session, config) => {
        switch (config.interaction) {
            case 'user':
                return session.uid;
            case 'channel':
                return session.cid;
            case 'both':
                const { platform, channelId, userId } = session;
                return `${platform}:${channelId}:${userId}`;
        }
    };
    ctx.middleware(async (session, next) => {
        if (session.parsed?.appel && config.appellation) {
            return session.execute('chatgpt ' + session.parsed.content);
        }
        for (const prefix of config.prefix) {
            if (!prefix || !session.content.startsWith(prefix))
                continue;
            return session.execute('chatgpt ' + session.content.slice(prefix.length));
        }
        return next();
    });
    ctx.command('chatgpt <input:text>')
        .option('reset', '-r')
        .action(async ({ options, session }, input) => {
        const key = getContextKey(session, config);
        if (options?.reset) {
            conversations.delete(key);
            return session.text('.reset-success');
        }
        input = input?.trim();
        if (!input) {
            await session.send(session.text('.expect-prompt'));
            input = await session.prompt();
        }
        try {
            // ensure the API is properly authenticated (optional)
            await api.ensureAuth();
        }
        catch (error) {
            logger.warn(error);
            return session.text('.invalid-token');
        }
        try {
            // send a message and wait for the response
            const { conversationId, messageId } = conversations.get(key) ?? {};
            const response = await api.sendMessage({ message: input, conversationId, messageId });
            conversations.set(key, { conversationId: response.conversationId, messageId: response.messageId });
            return response.message;
        }
        catch (error) {
            logger.warn(error);
            if (error instanceof koishi_1.SessionError)
                throw error;
            throw new koishi_1.SessionError('commands.chatgpt.messages.unknown-error');
        }
    });
}
exports.apply = apply;
