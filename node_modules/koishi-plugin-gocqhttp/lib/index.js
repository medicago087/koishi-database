"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = void 0;
const koishi_1 = require("koishi");
const plugin_console_1 = require("@koishijs/plugin-console");
const path_1 = require("path");
const fs_1 = require("fs");
const go_cqhttp_1 = __importDefault(require("go-cqhttp"));
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const { mkdir, readFile, writeFile } = fs_1.promises;
exports.logger = new koishi_1.Logger('gocqhttp');
const logLevelMap = {
    DEBUG: 'debug',
    INFO: 'debug',
    WARNING: 'warn',
    ERROR: 'error',
    FATAL: 'error',
};
class Launcher extends plugin_console_1.DataService {
    constructor(ctx, config) {
        super(ctx, 'gocqhttp', { authority: 4 });
        this.config = config;
        this.payload = Object.create(null);
        this.tickets = Object.create(null);
        exports.logger.level = config.logLevel || 3;
        ctx.on('bot-connect', async (bot) => {
            if (!bot.config.gocqhttp?.enabled)
                return;
            return this.connect(bot);
        });
        ctx.on('bot-disconnect', async (bot) => {
            if (!bot.config.gocqhttp?.enabled)
                return;
            return this.disconnect(bot);
        });
        ctx.using(['console'], (ctx) => {
            ctx.console.addEntry({
                dev: (0, path_1.resolve)(__dirname, '../client/index.ts'),
                prod: (0, path_1.resolve)(__dirname, '../dist'),
            });
            ctx.console.addListener('gocqhttp/write', (sid, text) => {
                const bot = ctx.bots[sid];
                return new Promise((resolve, reject) => {
                    bot.process.stdin.write(text + '\n', (error) => {
                        error ? reject(error) : resolve();
                    });
                });
            });
        });
        ctx.router.get('/gocqhttp/captcha', (ctx, next) => {
            ctx.type = '.html';
            ctx.body = (0, fs_1.createReadStream)((0, path_1.resolve)(__dirname, '../captcha.html'));
        });
        ctx.router.post('/gocqhttp/ticket', (ctx, next) => {
            const id = ctx.query.id.toString();
            if (!this.tickets[id])
                return ctx.status = 404;
        });
    }
    async getTemplate() {
        const filename = this.config.template
            ? (0, path_1.resolve)(this.ctx.baseDir, this.config.template)
            : (0, path_1.resolve)(__dirname, '../template.yml');
        return readFile(filename, 'utf8');
    }
    async getConfig(bot) {
        const template = await (this.templateTask || (this.templateTask = this.getTemplate()));
        const config = {
            message: JSON.stringify(this.config.message),
            ...bot.config,
            ...bot.config.gocqhttp,
        };
        if ('endpoint' in config) {
            config.endpoint = `0.0.0.0:${new URL(config.endpoint).port}`;
        }
        if ('path' in config) {
            const { port, host = 'localhost' } = bot.ctx.root.config;
            config['selfUrl'] = `${host}:${port}${config.path}`;
        }
        return (0, koishi_1.interpolate)(template, config, /\$\{\{(.+?)\}\}/g);
    }
    async get() {
        return this.payload;
    }
    setData(bot, data) {
        this.payload[bot.sid] = data;
        this.refresh();
    }
    async connect(bot) {
        // create working folder
        const cwd = (0, path_1.resolve)(bot.ctx.baseDir, this.config.root, bot.selfId);
        await mkdir(cwd, { recursive: true });
        // create config.yml
        await writeFile(cwd + '/config.yml', await this.getConfig(bot));
        return new Promise((resolve, reject) => {
            this.setData(bot, { status: 'init' });
            // spawn go-cqhttp process
            bot.process = (0, go_cqhttp_1.default)({ cwd, faststart: true });
            bot.process.stdout.on('data', async (data) => {
                data = (0, strip_ansi_1.default)(data.toString()).trim();
                if (!data)
                    return;
                for (const line of data.trim().split('\n')) {
                    const text = line.slice(23);
                    const [type] = text.split(']: ', 1);
                    if (type in logLevelMap) {
                        exports.logger[logLevelMap[type]](text.slice(type.length + 3));
                    }
                    else {
                        exports.logger.info(line.trim());
                    }
                    let cap;
                    if (text.includes('アトリは、高性能ですから')) {
                        resolve();
                        this.setData(bot, { status: 'success' });
                    }
                    else if (text.includes('将在10秒后自动选择')) {
                        this.refresh();
                    }
                    else if (text.includes('账号已开启设备锁') && text.includes('请选择验证方式')) {
                        this.payload[bot.sid] = { status: 'sms-or-qrcode' };
                    }
                    else if (text.includes('登录需要滑条验证码') && text.includes('请选择验证方式')) {
                        this.payload[bot.sid] = { status: 'slider-or-qrcode' };
                        // eslint-disable-next-line no-cond-assign
                    }
                    else if (cap = text.match(/向手机(.+)发送短信验证码/)) {
                        const phone = cap[1].trim();
                        if (text.includes('账号已开启设备锁')) {
                            this.setData(bot, { status: 'sms-confirm', phone });
                        }
                        else {
                            this.payload[bot.sid].phone = phone;
                        }
                    }
                    else if (text.includes('captcha.jpg')) {
                        const buffer = await readFile(cwd + '/captcha.png');
                        this.setData(bot, {
                            status: 'captcha',
                            image: 'data:image/png;base64,' + buffer.toString('base64'),
                        });
                    }
                    else if (text.includes('qrcode.png')) {
                        const buffer = await readFile(cwd + '/qrcode.png');
                        this.setData(bot, {
                            status: 'qrcode',
                            image: 'data:image/png;base64,' + buffer.toString('base64'),
                        });
                    }
                    else if (text.includes('请输入短信验证码')) {
                        this.payload[bot.sid].status = 'sms';
                        this.refresh();
                    }
                    else if (text.includes('请前往该地址验证')) {
                        this.setData(bot, {
                            status: 'slider',
                            link: text.match(/https:\S+/)[0],
                        });
                    }
                }
            });
            bot.process.on('error', (error) => {
                exports.logger.warn(error);
            });
            bot.process.stderr.on('data', async (data) => {
                data = (0, strip_ansi_1.default)(data.toString()).trim();
                if (!data)
                    return;
                for (const line of data.split('\n')) {
                    exports.logger.warn(line.trim());
                }
            });
            bot.process.on('exit', () => {
                bot.stop();
                reject(new Error());
            });
            if (bot.config.protocol === 'ws-reverse') {
                resolve();
            }
        });
    }
    async disconnect(bot) {
        bot.process?.kill();
        bot.process = null;
        this.setData(bot, { status: 'offline' });
    }
}
(function (Launcher) {
    Launcher.Config = koishi_1.Schema.object({
        root: koishi_1.Schema.string().description('存放账户文件的目录。').default('accounts'),
        logLevel: koishi_1.Schema.number().description('输出日志等级。').default(3),
        template: koishi_1.Schema.string().description('使用的配置文件模板。').hidden(),
        message: koishi_1.Schema.object({
            'ignore-invalid-cqcode': koishi_1.Schema.boolean().default(false).description('是否忽略无效的消息段 (默认情况下将原样发送)。'),
            'force-fragment': koishi_1.Schema.boolean().default(false).description('是否强制分片发送消息 (分片发送将会带来更快的速度，但是兼容性会有些问题)。'),
            'fix-url': koishi_1.Schema.boolean().default(false).description('是否将 URL 分片发送。'),
            'proxy-rewrite': koishi_1.Schema.string().default('').description('下载图片等资源是要请求的网络代理。'),
            'report-self-message': koishi_1.Schema.boolean().default(false).description('是否上报自身消息。'),
            'remove-reply-at': koishi_1.Schema.boolean().default(false).description('移除 reply 消息段附带的 at 消息段。'),
            'extra-reply-data': koishi_1.Schema.boolean().default(false).description('为 reply 消息段附加更多信息。'),
            'skip-mime-scan': koishi_1.Schema.boolean().default(false).description('跳过 mime 扫描，忽略错误数据。'),
        }).description('消息设置'),
    });
})(Launcher || (Launcher = {}));
exports.default = Launcher;
