"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadRelease = exports.getLatestRelease = void 0;
const axios_1 = __importDefault(require("axios"));
const fs_1 = require("fs");
const path_1 = require("path");
const tar_1 = require("tar");
function getArch() {
    switch (process.arch) {
        // @ts-ignore
        case 'x32': return '386';
        case 'x64': return 'amd64';
        case 'arm64': return 'arm64';
        case 'arm': return 'armv7';
    }
    throw new Error(`architecture "${process.arch}" is not supported`);
}
function getPlatform() {
    switch (process.platform) {
        case 'darwin': return 'darwin';
        case 'linux': return 'linux';
        case 'win32': return 'windows';
    }
    throw new Error(`platform "${process.platform}" is not supported`);
}
async function getLatestRelease(repo) {
    const { data } = await axios_1.default.get(`https://api.github.com/repos/${repo}/releases`);
    return data[0].tag_name;
}
exports.getLatestRelease = getLatestRelease;
async function downloadRelease(tag) {
    const arch = getArch();
    const platform = getPlatform();
    const outDir = (0, path_1.resolve)(__dirname, '../bin');
    if ((0, fs_1.existsSync)(outDir))
        return;
    const name = `go-cqhttp_${platform}_${arch}.${platform === 'windows' ? 'exe' : 'tar.gz'}`;
    const mirror = process.env.GITHUB_MIRROR || 'https://github.com';
    const url = `${mirror}/Mrs4s/go-cqhttp/releases/download/${tag}/${name}`;
    try {
        const [{ data: stream }] = await Promise.all([
            axios_1.default.get(url, { responseType: 'stream' }),
            fs_1.promises.mkdir(outDir, { recursive: true }),
        ]);
        return await new Promise((resolve, reject) => {
            stream.on('end', resolve);
            stream.on('error', reject);
            if (platform === 'windows') {
                stream.pipe((0, fs_1.createWriteStream)(outDir + '/go-cqhttp'));
            }
            else {
                stream.pipe((0, tar_1.extract)({ cwd: outDir, newer: true }, ['go-cqhttp']));
            }
        });
    }
    catch (error) {
        console.warn(error);
        return fs_1.promises.rm(outDir, { force: true, recursive: true });
    }
}
exports.downloadRelease = downloadRelease;
