/// <reference types="node" />
import { Context, Dict, Logger, Schema } from 'koishi';
import OneBotBot from '@koishijs/plugin-adapter-onebot';
import { DataService } from '@koishijs/plugin-console';
import { ChildProcess } from 'child_process';
declare module '@koishijs/plugin-console' {
    namespace Console {
        interface Services {
            gocqhttp: Launcher;
        }
    }
    interface Events {
        'gocqhttp/write'(sid: string, text: string): void;
    }
}
declare module '@satorijs/adapter-onebot/lib/bot' {
    interface OneBotBot {
        process: ChildProcess;
    }
    namespace OneBotBot {
        interface BaseConfig {
            gocqhttp?: GoCqhttpConfig;
        }
    }
}
interface GoCqhttpConfig {
    enabled: boolean;
    password?: string;
}
export declare const logger: Logger;
declare namespace Data {
    type Status = 'offline' | 'success' | 'init' | 'sms' | 'qrcode' | 'slider' | 'captcha' | 'sms-confirm' | 'sms-or-qrcode' | 'slider-or-qrcode';
}
interface Data {
    status: Data.Status;
    image?: string;
    phone?: string;
    link?: string;
}
declare class Launcher extends DataService<Dict<Data>> {
    private config;
    payload: Dict<Data>;
    tickets: Dict<any>;
    templateTask: Promise<string>;
    constructor(ctx: Context, config: Launcher.Config);
    private getTemplate;
    private getConfig;
    get(): Promise<Dict<Data, string>>;
    private setData;
    connect(bot: OneBotBot<Context>): Promise<void>;
    disconnect(bot: OneBotBot<Context>): Promise<void>;
}
declare namespace Launcher {
    interface Config {
        root?: string;
        logLevel?: number;
        template?: string;
        message?: Dict;
    }
    const Config: Schema<Config>;
}
export default Launcher;
