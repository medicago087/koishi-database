import { Context, Dict } from 'koishi';
export declare function project(object: {}, mapping: {}): {};
export interface Size {
    width: number;
    height: number;
}
export declare function getImageSize(buffer: ArrayBuffer): Size;
export declare function arrayBufferToBase64(buffer: ArrayBuffer): string;
export declare function download(ctx: Context, url: string, headers?: {}): Promise<[ArrayBuffer, string]>;
export declare function calcAccessKey(email: string, password: string): Promise<string>;
export declare function calcEncryptionKey(email: string, password: string): Promise<string>;
export declare class NetworkError extends Error {
    params: {};
    constructor(message: string, params?: {});
    static catch: (mapping: Dict<string>) => (e: any) => never;
}
export declare function login(ctx: Context): Promise<string>;
export declare function closestMultiple(num: number, mult?: number): number;
export interface Size {
    width: number;
    height: number;
}
export declare function resizeInput(size: Size): Size;
export declare function stripDataPrefix(base64: string): string;
