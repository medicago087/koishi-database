import { Dict, Schema } from 'koishi';
import { Size } from './utils';
export declare const modelMap: {
    readonly safe: "safe-diffusion";
    readonly nai: "nai-diffusion";
    readonly furry: "nai-diffusion-furry";
};
export declare const orientMap: {
    readonly landscape: {
        readonly height: 512;
        readonly width: 768;
    };
    readonly portrait: {
        readonly height: 768;
        readonly width: 512;
    };
    readonly square: {
        readonly height: 640;
        readonly width: 640;
    };
};
type Model = keyof typeof modelMap;
type Orient = keyof typeof orientMap;
export declare const models: ("safe" | "nai" | "furry")[];
export declare const orients: ("landscape" | "portrait" | "square")[];
export declare namespace sampler {
    const nai: {
        k_euler_a: string;
        k_euler: string;
        k_lms: string;
        ddim: string;
        plms: string;
    };
    const sd: {
        k_euler_a: string;
        k_euler: string;
        k_lms: string;
        k_heun: string;
        k_dpm_2: string;
        k_dpm_2_a: string;
        k_dpmpp_2s_a: string;
        k_dpmpp_2m: string;
        k_dpm_fast: string;
        k_dpm_ad: string;
        k_lms_ka: string;
        k_dpm_2_ka: string;
        k_dpm_2_a_ka: string;
        k_dpmpp_2s_a_ka: string;
        k_dpmpp_2m_ka: string;
        ddim: string;
        plms: string;
    };
    function createSchema(map: Dict<string>): Schema<string, string>;
    function sd2nai(sampler: string): string;
}
export declare const upscalers: readonly ["None", "Lanczos", "Nearest", "LDSR", "ESRGAN_4x", "R-ESRGAN General 4xV3", "R-ESRGAN General WDN 4xV3", "R-ESRGAN AnimeVideo", "R-ESRGAN 4x+", "R-ESRGAN 4x+ Anime6B", "R-ESRGAN 2x+", "ScuNET GAN", "ScuNET PSNR", "SwinIR 4x"];
export interface Options {
    enhance: boolean;
    model: string;
    resolution: Size;
    sampler: string;
    seed: string;
    steps: number;
    scale: number;
    noise: number;
    strength: number;
}
export interface PromptConfig {
    basePrompt?: string;
    negativePrompt?: string;
    forbidden?: string;
    placement?: 'before' | 'after';
    latinOnly?: boolean;
    translator?: boolean;
    maxWords?: number;
}
export declare const PromptConfig: Schema<PromptConfig>;
interface ParamConfig {
    model?: Model;
    upscaler?: string;
    resolution?: Orient | Size;
    maxResolution?: number;
    sampler?: string;
    scale?: number;
    textSteps?: number;
    imageSteps?: number;
    maxSteps?: number;
}
export interface Config extends PromptConfig, ParamConfig {
    type: 'token' | 'login' | 'naifu' | 'sd-webui';
    token?: string;
    email?: string;
    password?: string;
    output?: 'minimal' | 'default' | 'verbose';
    allowAnlas?: boolean | number;
    endpoint?: string;
    headers?: Dict<string>;
    maxIterations?: number;
    maxRetryCount?: number;
    requestTimeout?: number;
    recallTimeout?: number;
    maxConcurrency?: number;
}
export declare const Config: Schema<Config, Config>;
interface Forbidden {
    pattern: string;
    strict: boolean;
}
export declare function parseForbidden(input: string): Forbidden[];
export declare function parseInput(input: string, config: Config, forbidden: Forbidden[], override: boolean): string[];
export {};
