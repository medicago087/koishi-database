"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const koishi_1 = require("koishi");
const fs_1 = require("fs");
const path_1 = require("path");
const crypto_1 = require("crypto");
const file_type_1 = require("file-type");
const assets_1 = __importDefault(require("@koishijs/assets"));
class LocalAssets extends assets_1.default {
    constructor(ctx, config) {
        super(ctx, config);
        this._stats = {
            assetCount: 0,
            assetSize: 0,
        };
        this.path = (0, koishi_1.sanitize)(config.path || '/assets');
        if (config.root) {
            this.root = (0, path_1.resolve)(ctx.baseDir, config.root);
        }
        else {
            this.root = (0, path_1.resolve)(__dirname, '../public');
        }
        if (config.selfUrl) {
            this.selfUrl = (0, koishi_1.trimSlash)(config.selfUrl);
        }
        else if (!(this.selfUrl = ctx.root.config.selfUrl)) {
            throw new Error(`missing configuration "selfUrl"`);
        }
        ctx.router.get(this.path, async (ctx) => {
            return ctx.body = await this.stats();
        });
        ctx.router.get(this.path + '/:name', async (ctx) => {
            var _a;
            const filename = (0, path_1.resolve)(this.root, (0, path_1.basename)(ctx.params.name));
            const stream = await (0, file_type_1.stream)((0, fs_1.createReadStream)(filename));
            ctx.type = (_a = stream.fileType) === null || _a === void 0 ? void 0 : _a.mime;
            return ctx.body = stream;
        });
        ctx.router.post(this.path, async (ctx) => {
            const { salt, sign, url, file } = ctx.query;
            if (Array.isArray(file) || Array.isArray(url)) {
                return ctx.status = 400;
            }
            if (config.secret) {
                if (!salt || !sign)
                    return ctx.status = 400;
                const hash = (0, crypto_1.createHmac)('sha1', config.secret).update(file + salt).digest('hex');
                if (hash !== sign)
                    return ctx.status = 403;
            }
            await this.upload(url, file);
            return ctx.status = 200;
        });
        this._promise = this.init();
    }
    async init() {
        await fs_1.promises.mkdir(this.root, { recursive: true });
        const filenames = await fs_1.promises.readdir(this.root);
        this._stats.assetCount = filenames.length;
        await Promise.all(filenames.map(async (file) => {
            const { size } = await fs_1.promises.stat((0, path_1.resolve)(this.root, file));
            this._stats.assetSize += size;
        }));
    }
    async write(buffer, filename) {
        await fs_1.promises.writeFile(filename, buffer);
        this._stats.assetCount += 1;
        this._stats.assetSize += buffer.byteLength;
    }
    async upload(url, file) {
        if (url.startsWith(this.selfUrl))
            return url;
        await this._promise;
        const { selfUrl, path, root } = this;
        const { buffer, filename } = await this.analyze(url, file);
        const savePath = (0, path_1.resolve)(root, filename);
        await this.write(buffer, savePath);
        return `${selfUrl}${path}/${filename}`;
    }
    async stats() {
        await this._promise;
        return this._stats;
    }
}
(function (LocalAssets) {
    LocalAssets.Config = koishi_1.Schema.intersect([
        koishi_1.Schema.object({
            root: koishi_1.Schema.string().description('本地存储资源文件的绝对路径。'),
            path: koishi_1.Schema.string().default('/files').description('静态图片暴露在服务器的路径。'),
            selfUrl: koishi_1.Schema.string().role('link').description('Koishi 服务暴露在公网的地址。缺省时将使用全局配置。'),
            secret: koishi_1.Schema.string().description('用于验证上传者的密钥，配合 assets-remote 使用。').role('secret'),
        }),
        assets_1.default.Config,
    ]);
})(LocalAssets || (LocalAssets = {}));
exports.default = LocalAssets;
