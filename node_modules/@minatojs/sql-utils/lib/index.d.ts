import { Dict } from 'cosmokit';
import { Eval, Field, Model, Query } from '@minatojs/core';
export declare type QueryOperators = {
    [K in keyof Query.FieldExpr]?: (key: string, value: Query.FieldExpr[K]) => string;
};
export declare type ExtractUnary<T> = T extends [infer U] ? U : T;
export declare type EvalOperators = {
    [K in keyof Eval.Static as `$${K}`]?: (expr: ExtractUnary<Parameters<Eval.Static[K]>>) => string;
} & {
    $: (expr: any) => string;
};
export declare abstract class Builder {
    protected createEqualQuery: (key: string, value: any) => string;
    protected queryOperators: QueryOperators;
    protected evalOperators: EvalOperators;
    abstract escapeId(value: any): string;
    abstract escape(value: any, table?: string, field?: string): string;
    abstract format(sql: string, args?: object | any[]): string;
    constructor();
    protected createNullQuery(key: string, value: boolean): string;
    protected createMemberQuery(key: string, value: any[], notStr?: string): string;
    protected createRegExpQuery(key: string, value: RegExp): string;
    protected createElementQuery(key: string, value: any): string;
    protected comparator(operator: string): (key: string, value: any) => string;
    protected binary(operator: string): ([left, right]: [any, any]) => string;
    protected logicalAnd(conditions: string[]): string;
    protected logicalOr(conditions: string[]): string;
    protected logicalNot(condition: string): string;
    protected parseFieldQuery(key: string, query: Query.FieldExpr): string;
    parseQuery(query: Query.Expr): string;
    private parseEvalExpr;
    private parseAggr;
    private getRecursive;
    parseEval(expr: any, table?: string, field?: string): string;
}
export interface TypeCaster<S = any, T = any> {
    types: Field.Type<S>[];
    dump: (value: S) => T;
    load: (value: T, initial?: S) => S;
}
export declare class Caster {
    private models;
    protected types: Dict<TypeCaster>;
    constructor(models: Dict<Model>);
    register<S, T>(typeCaster: TypeCaster<S, T>): void;
    dump(table: string, obj: any): any;
    load(table: string, obj: any): any;
}
