/// <reference types="node" />
import { Database, Driver, Eval, Selection } from '@minatojs/core';
import { Builder } from '@minatojs/sql-utils';
import init from '@minatojs/sql.js';
export interface SQLiteFieldInfo {
    name: string;
    type: string;
    notnull: number;
    dflt_value: string;
    pk: boolean;
}
declare namespace SQLiteDriver {
    interface Config {
        path: string;
    }
}
declare class SQLiteDriver extends Driver {
    #private;
    config: SQLiteDriver.Config;
    db: init.Database;
    sql: Builder;
    writeTask?: NodeJS.Timeout;
    sqlite: init.SqlJsStatic;
    constructor(database: Database, config: SQLiteDriver.Config);
    private _getColDefs;
    /** synchronize table schema */
    prepare(table: string): Promise<void>;
    init(buffer: ArrayLike<number> | null): void;
    start(): Promise<void>;
    stop(): Promise<void>;
    drop(): Promise<void>;
    stats(): Promise<{
        size: number;
    }>;
    remove(sel: Selection.Mutable): Promise<void>;
    get(sel: Selection.Immutable): Promise<any>;
    eval(sel: Selection.Immutable, expr: Eval.Expr): Promise<any>;
    set(sel: Selection.Mutable, update: {}): Promise<void>;
    create(sel: Selection.Mutable, data: {}): Promise<any>;
    upsert(sel: Selection.Mutable, data: any[], keys: string[]): Promise<void>;
}
export default SQLiteDriver;
