import { Database, Driver, Eval, Executable, Modifier } from '@minatojs/core';
import { Builder, Caster } from '@minatojs/sql-utils';
import sqlite from 'better-sqlite3';
export interface SQLiteFieldInfo {
    name: string;
    type: string;
    notnull: number;
    dflt_value: string;
    pk: boolean;
}
declare namespace SQLiteDriver {
    interface Config {
        path?: string;
    }
}
declare class SQLiteDriver extends Driver {
    #private;
    config: SQLiteDriver.Config;
    db: sqlite.Database;
    sqlite: this;
    sql: Builder;
    caster: Caster;
    constructor(database: Database, config: SQLiteDriver.Config);
    private _getColDefs;
    /** synchronize table schema */
    prepare(table: string): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    drop(): Promise<void>;
    stats(): Promise<{
        size?: undefined;
    } | {
        size: number;
    }>;
    remove(sel: Executable): Promise<void>;
    get(sel: Executable, modifier: Modifier): Promise<any[]>;
    eval(sel: Executable, expr: Eval.Expr): Promise<any>;
    set(sel: Executable, update: {}): Promise<void>;
    create(sel: Executable, data: {}): Promise<any>;
    upsert(sel: Executable, data: any[], keys: string[]): Promise<void>;
}
export default SQLiteDriver;
