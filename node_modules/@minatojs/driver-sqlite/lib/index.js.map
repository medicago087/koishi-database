{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { Dict, difference, makeArray, union } from 'cosmokit'\nimport { Database, Driver, Eval, executeUpdate, Field, Model, Selection } from '@minatojs/core'\nimport { Builder, escapeId } from '@minatojs/sql-utils'\nimport { promises as fs } from 'fs'\nimport init from '@minatojs/sql.js'\nimport Logger from 'reggol'\n\nconst logger = new Logger('sqlite')\n\nfunction getTypeDefinition({ type }: Field) {\n  switch (type) {\n    case 'boolean':\n    case 'integer':\n    case 'unsigned':\n    case 'date':\n    case 'time':\n    case 'timestamp': return `INTEGER`\n    case 'float':\n    case 'double':\n    case 'decimal': return `REAL`\n    case 'char':\n    case 'string':\n    case 'text':\n    case 'list':\n    case 'json': return `TEXT`\n  }\n}\n\nexport interface SQLiteFieldInfo {\n  name: string\n  type: string\n  notnull: number\n  dflt_value: string\n  pk: boolean\n}\n\nnamespace SQLiteDriver {\n  export interface Config {\n    path?: string\n  }\n}\n\nclass SQLiteBuilder extends Builder {\n  constructor(tables: Dict<Model>) {\n    super(tables)\n\n    this.evalOperators.$if = (args) => `iif(${args.map(arg => this.parseEval(arg)).join(', ')})`\n\n    this.define<boolean, number>({\n      types: ['boolean'],\n      dump: value => +value,\n      load: (value) => !!value,\n    })\n\n    this.define<object, string>({\n      types: ['json'],\n      dump: value => JSON.stringify(value),\n      load: (value, initial) => value ? JSON.parse(value) : initial,\n    })\n\n    this.define<string[], string>({\n      types: ['list'],\n      dump: value => value.join(','),\n      load: (value) => value ? value.split(',') : [],\n    })\n\n    this.define<Date, number>({\n      types: ['date', 'time', 'timestamp'],\n      dump: value => value === null ? null : +value,\n      load: (value) => value === null ? null : new Date(value),\n    })\n  }\n\n  escape(value: any, field?: Field<any>) {\n    if (value instanceof Date) value = +value\n    return super.escape(value, field)\n  }\n\n  protected createElementQuery(key: string, value: any) {\n    return `(',' || ${key} || ',') LIKE ${this.escape('%,' + value + ',%')}`\n  }\n}\n\nclass SQLiteDriver extends Driver {\n  db: init.Database\n  sql: Builder\n  writeTask: NodeJS.Timeout\n  sqlite: init.SqlJsStatic\n\n  constructor(database: Database, public config: SQLiteDriver.Config) {\n    super(database)\n\n    this.sql = new SQLiteBuilder(database.tables)\n  }\n\n  private _getColDefs(table: string, key: string) {\n    const model = this.model(table)\n    const { initial, nullable = true } = model.fields[key]\n    let def = `\\`${key}\\``\n    if (key === model.primary && model.autoInc) {\n      def += ' INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT'\n    } else {\n      const typedef = getTypeDefinition(model.fields[key])\n      def += ' ' + typedef + (nullable ? ' ' : ' NOT ') + 'NULL'\n      if (initial !== undefined && initial !== null) {\n        def += ' DEFAULT ' + this.sql.escape(this.sql.dump(model, { [key]: initial })[key])\n      }\n    }\n    return def\n  }\n\n  /** synchronize table schema */\n  async prepare(table: string) {\n    const info = this.#all(`PRAGMA table_info(${escapeId(table)})`) as SQLiteFieldInfo[]\n    // WARN: side effecting Tables.config\n    const config = this.model(table)\n    const keys = Object.keys(config.fields)\n    if (info.length) {\n      let hasUpdate = false\n      for (const key of keys) {\n        if (info.some(({ name }) => name === key)) continue\n        const def = this._getColDefs(table, key)\n        this.#run(`ALTER TABLE ${escapeId(table)} ADD COLUMN ${def}`)\n        hasUpdate = true\n      }\n      if (hasUpdate) {\n        logger.info('auto updating table %c', table)\n      }\n    } else {\n      logger.info('auto creating table %c', table)\n      const defs = keys.map(key => this._getColDefs(table, key))\n      const constraints = []\n      if (config.primary && !config.autoInc) {\n        constraints.push(`PRIMARY KEY (${this.#joinKeys(makeArray(config.primary))})`)\n      }\n      if (config.unique) {\n        constraints.push(...config.unique.map(keys => `UNIQUE (${this.#joinKeys(makeArray(keys))})`))\n      }\n      if (config.foreign) {\n        constraints.push(...Object.entries(config.foreign).map(([key, [table, key2]]) => {\n          return `FOREIGN KEY (\\`${key}\\`) REFERENCES ${escapeId(table)} (\\`${key2}\\`)`\n        }))\n      }\n      this.#run(`CREATE TABLE ${escapeId(table)} (${[...defs, ...constraints].join(',')})`)\n    }\n  }\n\n  init(buffer: ArrayLike<number>) {\n    this.db = new this.sqlite.Database(buffer)\n    this.db.create_function('regexp', (pattern, str) => +new RegExp(pattern).test(str))\n  }\n\n  async start() {\n    const [sqlite, buffer] = await Promise.all([\n      init(),\n      this.config.path === ':memory:' ? null : fs.readFile(this.config.path).catch<Buffer>(() => null),\n    ])\n    this.sqlite = sqlite\n    this.init(buffer)\n  }\n\n  #joinKeys(keys?: string[]) {\n    return keys?.length ? keys.map(key => `\\`${key}\\``).join(',') : '*'\n  }\n\n  async stop() {\n    this.db.close()\n  }\n\n  #exec(sql: string, params: any, callback: (stmt: init.Statement) => any) {\n    try {\n      const stmt = this.db.prepare(sql)\n      const result = callback(stmt)\n      stmt.free()\n      return result\n    } catch (e) {\n      logger.warn('SQL > %c', sql, params)\n      throw e\n    }\n  }\n\n  #all(sql: string, params: any = []) {\n    return this.#exec(sql, params, (stmt) => {\n      stmt.bind(params)\n      const result = []\n      while (stmt.step()) {\n        result.push(stmt.getAsObject())\n      }\n      return result\n    })\n  }\n\n  #get(sql: string, params: any = []) {\n    return this.#exec(sql, params, stmt => stmt.getAsObject(params))\n  }\n\n  #run(sql: string, params: any = [], callback?: () => any) {\n    this.#exec(sql, params, stmt => stmt.run(params))\n    const result = callback?.()\n    if (this.config.path) {\n      const data = this.db.export()\n      const timer = this.writeTask = setTimeout(() => {\n        if (this.writeTask !== timer) return\n        fs.writeFile(this.config.path, data)\n      }, 0)\n      this.init(data)\n    }\n    return result\n  }\n\n  async drop() {\n    const tables = Object.keys(this.database.tables)\n    for (const table of tables) {\n      this.#run(`DROP TABLE ${escapeId(table)}`)\n    }\n  }\n\n  async stats() {\n    const size = this.db.export().byteLength\n    return { size }\n  }\n\n  async remove(sel: Selection.Mutable) {\n    const { query, table } = sel\n    const filter = this.sql.parseQuery(query)\n    if (filter === '0') return\n    this.#run(`DELETE FROM ${escapeId(table)} WHERE ${filter}`)\n  }\n\n  async get(sel: Selection.Immutable) {\n    const { tables } = sel\n    const builder = new SQLiteBuilder(tables)\n    const sql = builder.get(sel)\n    if (!sql) return []\n    const rows = this.#all(sql)\n    return rows.map(row => this.sql.load(sel.model, row))\n  }\n\n  async eval(sel: Selection.Immutable, expr: Eval.Expr) {\n    const output = this.sql.parseEval(expr)\n    let sql = this.sql.get(sel.table as Selection)\n    const prefix = `SELECT ${output} AS value `\n    if (sql.startsWith('SELECT * ')) {\n      sql = prefix + sql.slice(9)\n    } else {\n      sql = `${prefix}FROM (${sql}) ${sql.ref}`\n    }\n    const { value } = this.#get(sql)\n    return value\n  }\n\n  #update(sel: Selection.Mutable, indexFields: string[], updateFields: string[], update: {}, data: {}) {\n    const { ref, table } = sel\n    const model = this.model(table)\n    const row = this.sql.dump(model, executeUpdate(data, update, ref))\n    const assignment = updateFields.map((key) => `${escapeId(key)} = ${this.sql.escape(row[key])}`).join(',')\n    const query = Object.fromEntries(indexFields.map(key => [key, row[key]]))\n    const filter = this.sql.parseQuery(query)\n    this.#run(`UPDATE ${escapeId(table)} SET ${assignment} WHERE ${filter}`)\n  }\n\n  async set(sel: Selection.Mutable, update: {}) {\n    const { model, table, query } = sel\n    const { primary, fields } = model\n    const updateFields = [...new Set(Object.keys(update).map((key) => {\n      return Object.keys(fields).find(field => field === key || key.startsWith(field + '.'))\n    }))]\n    const primaryFields = makeArray(primary)\n    const data = await this.database.get(table, query, union(primaryFields, updateFields) as [])\n    for (const row of data) {\n      this.#update(sel, primaryFields, updateFields, update, row)\n    }\n  }\n\n  #create(table: string, data: {}) {\n    const model = this.model(table)\n    data = this.sql.dump(model, data)\n    const keys = Object.keys(data)\n    const sql = `INSERT INTO ${escapeId(table)} (${this.#joinKeys(keys)}) VALUES (${keys.map(key => this.sql.escape(data[key])).join(', ')})`\n    return this.#run(sql, [], () => this.#get(`select last_insert_rowid() as id`))\n  }\n\n  async create(sel: Selection.Mutable, data: {}) {\n    const { model, table } = sel\n    data = model.create(data)\n    const { id } = this.#create(table, data)\n    const { autoInc, primary } = model\n    if (!autoInc || Array.isArray(primary)) return data as any\n    return { ...data, [primary]: id }\n  }\n\n  async upsert(sel: Selection.Mutable, data: any[], keys: string[]) {\n    if (!data.length) return\n    const { model, table, ref } = sel\n    const dataFields = [...new Set(Object.keys(Object.assign({}, ...data)).map((key) => {\n      return Object.keys(model.fields).find(field => field === key || key.startsWith(field + '.'))\n    }))]\n    const relaventFields = union(keys, dataFields)\n    const updateFields = difference(dataFields, keys)\n    const results = await this.database.get(table, {\n      $or: data.map(item => Object.fromEntries(keys.map(key => [key, item[key]]))),\n    }, relaventFields as [])\n    for (const item of data) {\n      const row = results.find(row => keys.every(key => row[key] === item[key]))\n      if (row) {\n        this.#update(sel, keys, updateFields, item, row)\n      } else {\n        this.#create(table, executeUpdate(model.create(), item, ref))\n      }\n    }\n  }\n}\n\nexport default SQLiteDriver\n"],
  "mappings": "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",
  "names": ["Logger", "keys", "table", "init", "fs", "row"]
}
