import type { Pool, PoolConfig } from 'mysql';
import { Dict } from 'cosmokit';
import { Database, Driver, Eval, Executable, Model, Modifier } from '@minatojs/core';
import { Builder } from '@minatojs/sql-utils';
declare module 'mysql' {
    interface UntypedFieldInfo {
        packet: UntypedFieldInfo;
    }
}
declare class MySQLBuilder extends Builder {
    private models;
    constructor(models: Dict<Model>);
    format(sql: string, values: any[], stringifyObjects?: boolean, timeZone?: string): string;
    escapeId(value: string, forbidQualified?: boolean): string;
    escape(value: any, table?: string, field?: string): string;
    stringify(value: any, table?: string, field?: string): any;
}
declare namespace MySQLDriver {
    interface Config extends PoolConfig {
    }
}
declare class MySQLDriver extends Driver {
    pool: Pool;
    config: MySQLDriver.Config;
    sql: MySQLBuilder;
    private _queryTasks;
    constructor(database: Database, config?: MySQLDriver.Config);
    start(): Promise<void>;
    stop(): Promise<void>;
    private _getColDefs;
    /** synchronize table schema */
    prepare(name: string): Promise<any>;
    _inferFields(table: string, keys: readonly string[]): readonly string[];
    _joinKeys: (keys: readonly string[]) => string;
    _formatValues: (table: string, data: object, keys: readonly string[]) => any[];
    query<T = any>(sql: string, values?: any): Promise<T>;
    queue<T = any>(sql: string, values?: any): Promise<T>;
    private _flushTasks;
    _select<T extends {}>(table: string, fields: readonly (string & keyof T)[], conditional?: string, values?: readonly any[]): Promise<T[]>;
    drop(): Promise<void>;
    stats(): Promise<Driver.Stats>;
    get(sel: Executable, modifier: Modifier): Promise<any>;
    eval(sel: Executable, expr: Eval.Expr): Promise<any>;
    private toUpdateExpr;
    set(sel: Executable, data: {}): Promise<void>;
    remove(sel: Executable): Promise<void>;
    create(sel: Executable, data: {}): Promise<any>;
    upsert(sel: Executable, data: any[], keys: string[]): Promise<void>;
}
export default MySQLDriver;
