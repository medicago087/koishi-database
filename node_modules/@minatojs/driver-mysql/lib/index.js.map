{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { createPool, format } from '@vlasky/mysql'\nimport type { OkPacket, Pool, PoolConfig } from 'mysql'\nimport { Dict, difference, makeArray, pick, Time } from 'cosmokit'\nimport { Database, Driver, Eval, executeUpdate, Field, isEvalExpr, Model, RuntimeError, Selection } from '@minatojs/core'\nimport { Builder, escapeId } from '@minatojs/sql-utils'\nimport Logger from 'reggol'\n\ndeclare module 'mysql' {\n  interface UntypedFieldInfo {\n    packet: UntypedFieldInfo\n  }\n}\n\nconst logger = new Logger('mysql')\n\nconst DEFAULT_DATE = new Date('1970-01-01')\n\nfunction getIntegerType(length = 11) {\n  if (length <= 4) return 'tinyint'\n  if (length <= 6) return 'smallint'\n  if (length <= 9) return 'mediumint'\n  if (length <= 11) return 'int'\n  return 'bigint'\n}\n\nfunction getTypeDef({ type, length, precision, scale }: Field) {\n  switch (type) {\n    case 'float':\n    case 'double':\n    case 'date':\n    case 'time': return type\n    case 'timestamp': return 'datetime(3)'\n    case 'boolean': return 'bit'\n    case 'integer': return getIntegerType(length)\n    case 'unsigned': return `${getIntegerType(length)} unsigned`\n    case 'decimal': return `decimal(${precision}, ${scale}) unsigned`\n    case 'char': return `char(${length || 255})`\n    case 'string': return `varchar(${length || 255})`\n    case 'text': return `text(${length || 65535})`\n    case 'list': return `text(${length || 65535})`\n    case 'json': return `text(${length || 65535})`\n    default: throw new Error(`unsupported type: ${type}`)\n  }\n}\n\nfunction isDefUpdated(field: Field, column: ColumnInfo, def: string) {\n  const typename = def.split(/[ (]/)[0]\n  if (typename === 'text') return !column.DATA_TYPE.endsWith('text')\n  if (typename !== column.DATA_TYPE) return true\n  switch (field.type) {\n    case 'integer':\n    case 'unsigned':\n    case 'char':\n    case 'string':\n    case 'text':\n    case 'list':\n    case 'json':\n      return !!field.length && !!column.CHARACTER_MAXIMUM_LENGTH && column.CHARACTER_MAXIMUM_LENGTH !== field.length\n    case 'decimal':\n      return column.NUMERIC_PRECISION !== field.precision || column.NUMERIC_SCALE !== field.scale\n    default: return false\n  }\n}\n\nfunction createIndex(keys: string | string[]) {\n  return makeArray(keys).map(escapeId).join(', ')\n}\n\ninterface ColumnInfo {\n  COLUMN_NAME: string\n  IS_NULLABLE: 'YES' | 'NO'\n  DATA_TYPE: string\n  CHARACTER_MAXIMUM_LENGTH: number\n  CHARACTER_OCTET_LENGTH: number\n  NUMERIC_PRECISION: number\n  NUMERIC_SCALE: number\n}\n\ninterface IndexInfo {\n  INDEX_NAME: string\n  COLUMN_NAME: string\n}\n\ninterface QueryTask {\n  sql: string\n  resolve: (value: any) => void\n  reject: (reason: unknown) => void\n}\n\nclass MySQLBuilder extends Builder {\n  protected escapeMap = {\n    '\\0' : '\\\\0',\n    '\\b' : '\\\\b',\n    '\\t' : '\\\\t',\n    '\\n' : '\\\\n',\n    '\\r' : '\\\\r',\n    '\\x1a' : '\\\\Z',\n    '\\'' : '\\\\\\'',\n    '\\\\' : '\\\\\\\\',\n  }\n\n  constructor(tables: Dict<Model>) {\n    super(tables)\n\n    this.define<string[], string>({\n      types: ['list'],\n      dump: value => value.join(','),\n      load: value => value ? value.split(',') : [],\n    })\n  }\n\n  escape(value: any, field?: Field<any>) {\n    if (value instanceof Date) {\n      value = Time.template('yyyy-MM-dd hh:mm:ss', value)\n    }\n    return super.escape(value, field)\n  }\n}\n\nnamespace MySQLDriver {\n  export interface Config extends PoolConfig {}\n}\n\nclass MySQLDriver extends Driver {\n  public pool!: Pool\n  public config: MySQLDriver.Config\n  public sql: MySQLBuilder\n\n  private _queryTasks: QueryTask[] = []\n\n  constructor(database: Database, config?: MySQLDriver.Config) {\n    super(database)\n\n    this.config = {\n      host: 'localhost',\n      port: 3306,\n      charset: 'utf8mb4_general_ci',\n      multipleStatements: true,\n      typeCast: (field, next) => {\n        const { orgName, orgTable } = field.packet\n        const meta = this.database.tables[orgTable]?.fields[orgName]\n\n        if (Field.string.includes(meta!?.type)) {\n          return field.string()\n        } else if (meta?.type === 'json') {\n          const source = field.string()\n          return source ? JSON.parse(source) : meta.initial\n        } else if (meta?.type === 'time') {\n          const source = field.string()\n          if (!source) return meta.initial\n          const time = new Date(DEFAULT_DATE)\n          const [h, m, s] = source.split(':')\n          time.setHours(parseInt(h))\n          time.setMinutes(parseInt(m))\n          time.setSeconds(parseInt(s))\n          return time\n        }\n\n        if (field.type === 'BIT') {\n          return Boolean(field.buffer()?.readUInt8(0))\n        } else {\n          return next()\n        }\n      },\n      ...config,\n    }\n\n    this.sql = new MySQLBuilder(database.tables)\n  }\n\n  async start() {\n    this.pool = createPool(this.config)\n  }\n\n  async stop() {\n    this.pool.end()\n  }\n\n  /** synchronize table schema */\n  async prepare(name: string) {\n    const [columns, indexes] = await Promise.all([\n      this.queue<ColumnInfo[]>([\n        `SELECT *`,\n        `FROM information_schema.columns`,\n        `WHERE TABLE_SCHEMA = ? && TABLE_NAME = ?`,\n      ].join(' '), [this.config.database, name]),\n      this.queue<IndexInfo[]>([\n        `SELECT *`,\n        `FROM information_schema.statistics`,\n        `WHERE TABLE_SCHEMA = ? && TABLE_NAME = ?`,\n      ].join(' '), [this.config.database, name]),\n    ])\n\n    const table = this.model(name)\n    const { primary, foreign, autoInc } = table\n    const fields = { ...table.fields }\n    const unique = [...table.unique]\n    const create: string[] = []\n    const update: string[] = []\n\n    // field definitions\n    for (const key in fields) {\n      const { initial, nullable = true } = fields[key]!\n      const legacy = [key, ...fields[key]!.legacy || []]\n      const column = columns.find(info => legacy.includes(info.COLUMN_NAME))\n      let shouldUpdate = column?.COLUMN_NAME !== key\n\n      let def = escapeId(key)\n      if (key === primary && autoInc) {\n        def += ' int unsigned not null auto_increment'\n      } else {\n        const typedef = getTypeDef(fields[key]!)\n        if (column && !shouldUpdate) {\n          shouldUpdate = isDefUpdated(fields[key]!, column, typedef)\n        }\n        def += ' ' + typedef\n        if (makeArray(primary).includes(key)) {\n          def += ' not null'\n        } else {\n          def += (nullable ? ' ' : ' not ') + 'null'\n        }\n        // blob, text, geometry or json columns cannot have default values\n        if (initial && !typedef.startsWith('text')) {\n          def += ' default ' + this.sql.escape(initial, fields[key])\n        }\n      }\n\n      if (!column) {\n        create.push(def)\n      } else if (shouldUpdate) {\n        update.push(`CHANGE ${escapeId(column.COLUMN_NAME)} ${def}`)\n      }\n    }\n\n    // index definitions\n    if (!columns.length) {\n      create.push(`PRIMARY KEY (${createIndex(primary)})`)\n      for (const key in foreign) {\n        const [table, key2] = foreign[key]!\n        create.push(`FOREIGN KEY (${escapeId(key)}) REFERENCES ${escapeId(table)} (${escapeId(key2)})`)\n      }\n    }\n\n    for (const key of unique) {\n      let shouldUpdate = false\n      const oldKeys = makeArray(key).map((key) => {\n        const legacy = [key, ...fields[key]!.legacy || []]\n        const column = columns.find(info => legacy.includes(info.COLUMN_NAME))\n        if (column?.COLUMN_NAME !== key) shouldUpdate = true\n        return column?.COLUMN_NAME\n      })\n      const name = oldKeys.join('_')\n      const index = indexes.find(info => info.INDEX_NAME === name)\n      if (!index) {\n        create.push(`UNIQUE INDEX (${createIndex(key)})`)\n      } else if (shouldUpdate) {\n        create.push(`UNIQUE INDEX (${createIndex(key)})`)\n        update.push(`DROP INDEX ${escapeId(name)}`)\n      }\n    }\n\n    if (!columns.length) {\n      logger.info('auto creating table %c', name)\n      return this.queue(`CREATE TABLE ?? (${create.join(', ')}) COLLATE = ?`, [name, this.config.charset])\n    }\n\n    const operations = [\n      ...create.map(def => 'ADD ' + def),\n      ...update,\n    ]\n    if (operations.length) {\n      // https://dev.mysql.com/doc/refman/5.7/en/alter-table.html\n      logger.info('auto updating table %c', name)\n      await this.queue(`ALTER TABLE ?? ${operations.join(', ')}`, [name])\n    }\n  }\n\n  _joinKeys = (keys: readonly string[]) => {\n    return keys ? keys.map(key => key.includes('`') ? key : `\\`${key}\\``).join(',') : '*'\n  }\n\n  _formatValues = (table: string, data: object, keys: readonly string[]) => {\n    return keys.map((key) => {\n      const field = this.database.tables[table]?.fields[key]\n      return this.sql.escape(data[key], field)\n    }).join(', ')\n  }\n\n  query<T = any>(sql: string): Promise<T> {\n    const error = new Error()\n    return new Promise((resolve, reject) => {\n      this.pool.query(sql, (err: Error, results) => {\n        if (!err) return resolve(results)\n        logger.warn(sql)\n        if (err['code'] === 'ER_DUP_ENTRY') {\n          err = new RuntimeError('duplicate-entry', err.message)\n        }\n        err.stack = err.message + error.stack!.slice(5)\n        reject(err)\n      })\n    })\n  }\n\n  queue<T = any>(sql: string, values?: any): Promise<T> {\n    sql = format(sql, values)\n    logger.debug('> %s', sql)\n    if (!this.config.multipleStatements) {\n      return this.query(sql)\n    }\n\n    return new Promise<any>((resolve, reject) => {\n      this._queryTasks.push({ sql, resolve, reject })\n      process.nextTick(() => this._flushTasks())\n    })\n  }\n\n  private async _flushTasks() {\n    const tasks = this._queryTasks\n    if (!tasks.length) return\n    this._queryTasks = []\n\n    try {\n      let results = await this.query(tasks.map(task => task.sql).join('; '))\n      if (tasks.length === 1) results = [results]\n      tasks.forEach((task, index) => {\n        task.resolve(results[index])\n      })\n    } catch (error) {\n      tasks.forEach(task => task.reject(error))\n    }\n  }\n\n  _select<T extends {}>(table: string, fields: readonly (string & keyof T)[], conditional?: string, values?: readonly any[]): Promise<T[]>\n  _select(table: string, fields: string[], conditional?: string, values: readonly any[] = []) {\n    let sql = `SELECT ${this._joinKeys(fields)} FROM ${table}`\n    if (conditional) sql += ` WHERE ${conditional}`\n    return this.queue(sql, values)\n  }\n\n  async drop(table?: string) {\n    if (table) return this.query(`DROP TABLE ${escapeId(table)}`)\n    const data = await this._select('information_schema.tables', ['TABLE_NAME'], 'TABLE_SCHEMA = ?', [this.config.database])\n    if (!data.length) return\n    await this.query(data.map(({ TABLE_NAME }) => `DROP TABLE ${escapeId(TABLE_NAME)}`).join('; '))\n  }\n\n  async stats() {\n    const data = await this._select('information_schema.tables', ['TABLE_NAME', 'TABLE_ROWS', 'DATA_LENGTH'], 'TABLE_SCHEMA = ?', [this.config.database])\n    const stats: Partial<Driver.Stats> = { size: 0 }\n    stats.tables = Object.fromEntries(data.map(({ TABLE_NAME: name, TABLE_ROWS: count, DATA_LENGTH: size }) => {\n      stats.size += size\n      return [name, { count, size }]\n    }))\n    return stats\n  }\n\n  async get(sel: Selection.Immutable) {\n    const { model, tables } = sel\n    const builder = new MySQLBuilder(tables)\n    const sql = builder.get(sel)\n    if (!sql) return []\n    return this.queue(sql).then((data) => {\n      return data.map((row) => this.sql.load(model, row))\n    })\n  }\n\n  async eval(sel: Selection.Immutable, expr: Eval.Expr) {\n    const output = this.sql.parseEval(expr)\n    let sql = this.sql.get(sel.table as Selection)\n    const prefix = `SELECT ${output} AS value `\n    if (sql.startsWith('SELECT * ')) {\n      sql = prefix + sql.slice(9)\n    } else {\n      sql = `${prefix}FROM (${sql}) ${sql.ref}`\n    }\n    const [data] = await this.queue(sql)\n    return data.value\n  }\n\n  private toUpdateExpr(item: any, key: string, field?: Field, upsert?: boolean) {\n    const escaped = escapeId(key)\n\n    // update directly\n    if (key in item) {\n      if (!isEvalExpr(item[key]) && upsert) {\n        return `VALUES(${escaped})`\n      } else if (isEvalExpr(item[key])) {\n        return this.sql.parseEval(item[key])\n      } else {\n        return this.sql.escape(item[key], field)\n      }\n    }\n\n    // update with json_set\n    const valueInit = `ifnull(${escaped}, '{}')`\n    let value = valueInit\n    for (const prop in item) {\n      if (!prop.startsWith(key + '.')) continue\n      const rest = prop.slice(key.length + 1).split('.')\n      value = `json_set(${value}, '$${rest.map(key => `.\"${key}\"`).join('')}', ${this.sql.parseEval(item[prop])})`\n    }\n\n    if (value === valueInit) {\n      return escaped\n    } else {\n      return value\n    }\n  }\n\n  async set(sel: Selection.Mutable, data: {}) {\n    const { model, query, table } = sel\n    const filter = this.sql.parseQuery(query)\n    const { fields } = model\n    if (filter === '0') return\n    const updateFields = [...new Set(Object.keys(data).map((key) => {\n      return Object.keys(fields).find(field => field === key || key.startsWith(field + '.'))!\n    }))]\n\n    const update = updateFields.map((field) => {\n      const escaped = escapeId(field)\n      return `${escaped} = ${this.toUpdateExpr(data, field, fields[field], false)}`\n    }).join(', ')\n\n    await this.query(`UPDATE ${table} SET ${update} WHERE ${filter}`)\n  }\n\n  async remove(sel: Selection.Mutable) {\n    const { query, table } = sel\n    const filter = this.sql.parseQuery(query)\n    if (filter === '0') return\n    await this.query(`DELETE FROM ${escapeId(table)} WHERE ` + filter)\n  }\n\n  async create(sel: Selection.Mutable, data: {}) {\n    const { table, model } = sel\n    const { autoInc, primary } = model\n    const formatted = this.sql.dump(model, data)\n    const keys = Object.keys(formatted)\n    const header = await this.query<OkPacket>([\n      `INSERT INTO ${escapeId(table)} (${keys.map(escapeId).join(', ')})`,\n      `VALUES (${keys.map(key => this.sql.escape(formatted[key])).join(', ')})`,\n    ].join(' '))\n    if (!autoInc) return data as any\n    return { ...data, [primary as string]: header.insertId } as any\n  }\n\n  async upsert(sel: Selection.Mutable, data: any[], keys: string[]) {\n    if (!data.length) return\n    const { model, table, ref } = sel\n\n    const merged = {}\n    const insertion = data.map((item) => {\n      Object.assign(merged, item)\n      return model.format(executeUpdate(model.create(), item, ref))\n    })\n    const initFields = Object.keys(model.fields)\n    const dataFields = [...new Set(Object.keys(merged).map((key) => {\n      return initFields.find(field => field === key || key.startsWith(field + '.'))!\n    }))]\n    const updateFields = difference(dataFields, keys)\n\n    const createFilter = (item: any) => this.sql.parseQuery(pick(item, keys))\n    const createMultiFilter = (items: any[]) => {\n      if (items.length === 1) {\n        return createFilter(items[0])\n      } else if (keys.length === 1) {\n        const key = keys[0]\n        return this.sql.parseQuery({ [key]: items.map(item => item[key]) })\n      } else {\n        return items.map(createFilter).join(' OR ')\n      }\n    }\n\n    const update = updateFields.map((field) => {\n      const escaped = escapeId(field)\n      const branches: Dict<any[]> = {}\n      data.forEach((item) => {\n        (branches[this.toUpdateExpr(item, field, model.fields[field], true)] ??= []).push(item)\n      })\n\n      const entries = Object.entries(branches)\n        .map(([expr, items]) => [createMultiFilter(items), expr])\n        .sort(([a], [b]) => a.length - b.length)\n        .reverse()\n\n      let value = entries[0][1]\n      for (let index = 1; index < entries.length; index++) {\n        value = `if(${entries[index][0]}, ${entries[index][1]}, ${value})`\n      }\n      return `${escaped} = ${value}`\n    }).join(', ')\n\n    await this.query([\n      `INSERT INTO ${escapeId(table)} (${initFields.map(escapeId).join(', ')})`,\n      `VALUES (${insertion.map(item => this._formatValues(table, item, initFields)).join('), (')})`,\n      `ON DUPLICATE KEY UPDATE ${update}`,\n    ].join(' '))\n  }\n}\n\nexport default MySQLDriver\n"],
  "mappings": "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",
  "names": ["Logger", "table", "key", "name"]
}
