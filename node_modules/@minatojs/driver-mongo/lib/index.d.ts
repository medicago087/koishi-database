/// <reference types="node" />
import { Db, MongoClient } from 'mongodb';
import { Database, Driver, Eval, Selection } from '@minatojs/core';
import { URLSearchParams } from 'url';
declare namespace MongoDriver {
    interface Config {
        username?: string;
        password?: string;
        protocol?: string;
        host?: string;
        port?: number;
        /** database name */
        database?: string;
        /** default auth database */
        authDatabase?: string;
        connectOptions?: ConstructorParameters<typeof URLSearchParams>[0];
        /** connection string (will overwrite all configs except 'name') */
        uri?: string;
        /**
         * store single primary key in `_id` field to enhance index performance
         * @default false
         */
        optimizeIndex?: boolean;
    }
}
declare class MongoDriver extends Driver {
    private config;
    client: MongoClient;
    db: Db;
    mongo: this;
    private _evalTasks;
    private _createTasks;
    constructor(database: Database, config: MongoDriver.Config);
    private connectionStringFromConfig;
    start(): Promise<void>;
    stop(): Promise<void>;
    /**
     * https://www.mongodb.com/docs/manual/indexes/
     */
    private _createIndexes;
    private _createFields;
    private _migratePrimary;
    private _internalTableTask;
    _createInternalTable(): Promise<any>;
    /** synchronize table schema */
    prepare(table: string): Promise<void>;
    drop(): Promise<void>;
    private _collStats;
    stats(): Promise<{
        size: any;
        tables: {
            [k: string]: {
                readonly count: number;
                readonly size: number;
            };
        };
    }>;
    private getVirtualKey;
    private patchVirtual;
    private unpatchVirtual;
    private transformQuery;
    private createPipeline;
    get(sel: Selection.Immutable): Promise<import("bson").Document[]>;
    eval(sel: Selection.Immutable, expr: Eval.Expr): Promise<any>;
    private _flushEvalTasks;
    set(sel: Selection.Mutable, update: {}): Promise<void>;
    remove(sel: Selection.Mutable): Promise<void>;
    create(sel: Selection.Mutable, data: any): Promise<any>;
    upsert(sel: Selection.Mutable, data: any[], keys: string[]): Promise<void>;
}
export default MongoDriver;
