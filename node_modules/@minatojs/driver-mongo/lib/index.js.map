{
  "version": 3,
  "sources": ["../src/index.ts", "../src/utils.ts"],
  "sourcesContent": ["import { Db, IndexDescription, MongoClient, MongoError } from 'mongodb'\nimport { Dict, isNullable, makeArray, noop, omit, pick } from 'cosmokit'\nimport { Database, Driver, Eval, Executable, executeEval, executeUpdate, Field, Modifier, Query, RuntimeError } from '@minatojs/core'\nimport { URLSearchParams } from 'url'\nimport { transformEval, transformQuery } from './utils'\n\nnamespace MongoDriver {\n  export interface Config {\n    username?: string\n    password?: string\n    protocol?: string\n    host?: string\n    port?: number\n    /** database name */\n    database?: string\n    /** default auth database */\n    authDatabase?: string\n    connectOptions?: ConstructorParameters<typeof URLSearchParams>[0]\n    /** connection string (will overwrite all configs except 'name') */\n    uri?: string\n    /**\n     * store single primary key in `_id` field to enhance index performance\n     * @default false\n     */\n    virtualKey?: boolean\n  }\n}\n\ninterface EvalTask {\n  expr: any\n  table: string\n  query: Query.Expr\n  resolve: (value: any) => void\n  reject: (error: Error) => void\n}\n\nclass MongoDriver extends Driver {\n  public client: MongoClient\n  public db: Db\n  public mongo = this\n\n  private _evalTasks: EvalTask[] = []\n  private _createTasks: Dict<Promise<void>> = {}\n\n  constructor(database: Database, private config: MongoDriver.Config) {\n    super(database)\n  }\n\n  private connectionStringFromConfig() {\n    const {\n      authDatabase,\n      connectOptions,\n      host = 'localhost',\n      database,\n      password,\n      protocol = 'mongodb',\n      port = protocol.includes('srv') ? null : 27017,\n      username,\n    } = this.config\n\n    let mongourl = `${protocol}://`\n    if (username) mongourl += `${encodeURIComponent(username)}${password ? `:${encodeURIComponent(password)}` : ''}@`\n    mongourl += `${host}${port ? `:${port}` : ''}/${authDatabase || database}`\n    if (connectOptions) {\n      const params = new URLSearchParams(connectOptions)\n      mongourl += `?${params}`\n    }\n    return mongourl\n  }\n\n  async start() {\n    const url = this.config.uri || this.connectionStringFromConfig()\n    this.client = await MongoClient.connect(url)\n    this.db = this.client.db(this.config.database)\n  }\n\n  stop() {\n    return this.client.close()\n  }\n\n  /**\n   * https://www.mongodb.com/docs/manual/indexes/\n   */\n  private async _createIndexes(table: string) {\n    const { primary, unique } = this.model(table)\n    const coll = this.db.collection(table)\n    const newSpecs: IndexDescription[] = []\n    const oldSpecs = await coll.indexes()\n\n    ;[primary, ...unique].forEach((keys, index) => {\n      // use internal `_id` for single primary fields\n      if (this.config.virtualKey && !index && typeof keys === 'string') return\n\n      // if the index is already created, skip it\n      keys = makeArray(keys)\n      const name = (index ? 'unique:' : 'primary:') + keys.join('+')\n      if (oldSpecs.find(spec => spec.name === name)) return\n\n      newSpecs.push({\n        name,\n        key: Object.fromEntries(keys.map(key => [key, 1])),\n        unique: true,\n        // https://docs.mongodb.com/manual/core/index-partial/#std-label-partial-index-with-unique-constraints\n        partialFilterExpression: Object.fromEntries(keys.map(key => [key, { $exists: true }])),\n      })\n    })\n\n    if (!newSpecs.length) return\n    await coll.createIndexes(newSpecs)\n  }\n\n  private async _createFields(table: string) {\n    const { fields } = this.model(table)\n    const coll = this.db.collection(table)\n    await Promise.all(Object.keys(fields).map((key) => {\n      if (isNullable(fields[key].initial)) return\n      return coll.updateMany({ [key]: { $exists: false } }, { $set: { [key]: fields[key].initial as never } })\n    }))\n  }\n\n  /** synchronize table schema */\n  async prepare(table: string) {\n    await this.db.createCollection(table).catch(noop)\n    await Promise.all([\n      this._createIndexes(table),\n      this._createFields(table),\n    ])\n  }\n\n  async drop() {\n    await Promise.all(Object.keys(this.database.tables).map(name => this.db.dropCollection(name)))\n  }\n\n  private async _collStats() {\n    const tables = Object.keys(this.database.tables)\n    const entries = await Promise.all(tables.map(async (name) => {\n      const coll = this.db.collection(name)\n      const { count, size } = await coll.stats()\n      return [coll.collectionName, { count, size }] as const\n    }))\n    return Object.fromEntries(entries)\n  }\n\n  async stats() {\n    // https://docs.mongodb.com/manual/reference/command/dbStats/#std-label-dbstats-output\n    const [stats, tables] = await Promise.all([\n      this.db.stats(),\n      this._collStats(),\n    ])\n    // while mongodb's document above says that the `stats.totalSize` is the sum of\n    // `stats.dataSize` and `stats.storageSize`, it's actually `undefined` in some cases\n    // so we have to calculate it manually.\n    const totalSize = stats.indexSize + stats.storageSize\n    return { size: totalSize, tables }\n  }\n\n  private getVirtualKey(table: string) {\n    const { primary } = this.model(table)\n    if (typeof primary === 'string' && this.config.virtualKey) {\n      return primary\n    }\n  }\n\n  private patchVirtual(table: string, row: any) {\n    const { primary } = this.model(table)\n    if (typeof primary === 'string' && this.config.virtualKey) {\n      row[primary] = row['_id']\n      delete row['_id']\n    }\n    return row\n  }\n\n  private unpatchVirtual(table: string, row: any) {\n    const { primary } = this.model(table)\n    if (typeof primary === 'string' && this.config.virtualKey) {\n      row['_id'] = row[primary]\n      delete row[primary]\n    }\n    return row\n  }\n\n  private transformQuery(query: Query.Expr, table: string) {\n    return transformQuery(query, this.getVirtualKey(table))\n  }\n\n  async get(sel: Executable, modifier: Modifier) {\n    const { table, fields, query } = sel\n    const { offset, limit, sort } = modifier\n    const filter = this.transformQuery(query, table)\n    if (!filter) return []\n    let cursor = this.db.collection(table).find(filter)\n    if (limit < Infinity) {\n      cursor = cursor.limit(offset + limit)\n    }\n    cursor = cursor.skip(offset)\n    cursor = cursor.sort(Object.fromEntries(sort.map(([k, v]) => [k['$'][1], v === 'desc' ? -1 : 1])))\n    const data = await cursor.toArray()\n    return data.map((row) => {\n      row = this.patchVirtual(table, row)\n      return sel.resolveData(row, fields)\n    })\n  }\n\n  async eval(sel: Executable, expr: Eval.Expr) {\n    const { table, query } = sel\n    return new Promise<any>((resolve, reject) => {\n      this._evalTasks.push({ expr, table, query, resolve, reject })\n      process.nextTick(() => this._flushEvalTasks())\n    })\n  }\n\n  private async _flushEvalTasks() {\n    const tasks = this._evalTasks\n    if (!tasks.length) return\n    this._evalTasks = []\n\n    const stages: any[] = [{ $match: { _id: null } }]\n    for (const task of tasks) {\n      const { expr, table, query } = task\n      task.expr = transformEval(expr, this.getVirtualKey(table), (pipeline) => {\n        const filter = this.transformQuery(query, table) || { _id: null }\n        pipeline.unshift({ $match: filter })\n        stages.push({ $unionWith: { coll: table, pipeline } })\n      })\n    }\n\n    let data: any\n    try {\n      const results = await this.db.collection('user').aggregate(stages).toArray()\n      data = Object.assign({}, ...results)\n    } catch (error) {\n      tasks.forEach(task => task.reject(error))\n      return\n    }\n\n    for (const { expr, resolve, reject } of tasks) {\n      try {\n        resolve(executeEval({ _: data }, expr))\n      } catch (error) {\n        reject(error)\n      }\n    }\n  }\n\n  async set(sel: Executable, update: {}) {\n    const { query, table, ref } = sel\n    const filter = this.transformQuery(query, table)\n    if (!filter) return\n    const indexFields = makeArray(sel.model.primary)\n    const coll = this.db.collection(table)\n    const original = await coll.find(filter).toArray()\n    if (!original.length) return\n\n    const updateFields = new Set(Object.keys(update).map(key => key.split('.', 1)[0]))\n    const bulk = coll.initializeUnorderedBulkOp()\n    for (const item of original) {\n      const row = this.patchVirtual(table, item)\n      const query = this.transformQuery(pick(row, indexFields), table)\n      bulk.find(query).updateOne({\n        $set: pick(executeUpdate(row, update, ref), updateFields),\n      })\n    }\n    await bulk.execute()\n  }\n\n  async remove(sel: Executable) {\n    const { query, table } = sel\n    const filter = this.transformQuery(query, table)\n    if (!filter) return\n    await this.db.collection(table).deleteMany(filter)\n  }\n\n  async create(sel: Executable, data: any) {\n    const { table } = sel\n    const lastTask = Promise.resolve(this._createTasks[table]).catch(noop)\n    return this._createTasks[table] = lastTask.then(async () => {\n      const model = this.model(table)\n      const coll = this.db.collection(table)\n      const { primary, fields, autoInc } = model\n\n      if (typeof primary === 'string' && !(primary in data)) {\n        const key = this.config.virtualKey ? '_id' : primary\n        if (autoInc) {\n          const [latest] = await coll.find().sort(key, -1).limit(1).toArray()\n          data[primary] = latest ? +latest[key] + 1 : 1\n\n          // workaround for autoInc string fields\n          // TODO remove in future versions\n          if (Field.string.includes(fields[primary].type)) {\n            data[primary] += ''\n            data[primary] = data[primary].padStart(8, '0')\n          }\n        }\n      }\n\n      try {\n        data = model.create(data)\n        const copy = this.unpatchVirtual(table, { ...data })\n        await coll.insertOne(copy)\n        return data\n      } catch (err) {\n        if (err instanceof MongoError && err.code === 11000) {\n          throw new RuntimeError('duplicate-entry', err.message)\n        }\n        throw err\n      }\n    })\n  }\n\n  async upsert(sel: Executable, data: any[], keys: string[]) {\n    if (!data.length) return\n    const { table, ref, model } = sel\n    const coll = this.db.collection(table)\n    const original = (await coll.find({\n      $or: data.map((item) => {\n        return this.transformQuery(pick(item, keys), table)\n      }),\n    }).toArray()).map(row => this.patchVirtual(table, row))\n\n    const bulk = coll.initializeUnorderedBulkOp()\n    for (const update of data) {\n      const item = original.find(item => keys.every(key => item[key].valueOf() === update[key].valueOf()))\n      if (item) {\n        const updateFields = new Set(Object.keys(update).map(key => key.split('.', 1)[0]))\n        const override = omit(pick(executeUpdate(item, update, ref), updateFields), keys)\n        const query = this.transformQuery(pick(item, keys), table)\n        bulk.find(query).updateOne({ $set: override })\n      } else {\n        const copy = executeUpdate(model.create(), update, ref)\n        bulk.insert(this.unpatchVirtual(table, copy))\n      }\n    }\n    await bulk.execute()\n  }\n}\n\nexport default MongoDriver\n", "import { isNullable, valueMap } from 'cosmokit'\nimport { Query } from '@minatojs/core'\nimport { Filter, FilterOperators } from 'mongodb'\n\nfunction createFieldFilter(query: Query.FieldQuery, key: string) {\n  const filters: Filter<any>[] = []\n  const result: Filter<any> = {}\n  const child = transformFieldQuery(query, key, filters)\n  if (child === false) return false\n  if (child !== true) result[key] = child\n  if (filters.length) result.$and = filters\n  if (Object.keys(result).length) return result\n  return true\n}\n\nfunction transformFieldQuery(query: Query.FieldQuery, key: string, filters: Filter<any>[]) {\n  // shorthand syntax\n  if (typeof query === 'string' || typeof query === 'number' || query instanceof Date) {\n    return { $eq: query }\n  } else if (Array.isArray(query)) {\n    if (!query.length) return false\n    return { $in: query }\n  } else if (query instanceof RegExp) {\n    return { $regex: query }\n  } else if (isNullable(query)) {\n    return { $exists: false }\n  }\n\n  // query operators\n  const result: FilterOperators<any> = {}\n  for (const prop in query) {\n    if (prop === '$and') {\n      for (const item of query[prop]) {\n        const child = createFieldFilter(item, key)\n        if (child === false) return false\n        if (child !== true) filters.push(child)\n      }\n    } else if (prop === '$or') {\n      const $or: Filter<any>[] = []\n      if (!query[prop].length) return false\n      const always = query[prop].some((item) => {\n        const child = createFieldFilter(item, key)\n        if (typeof child === 'boolean') return child\n        $or.push(child)\n      })\n      if (!always) filters.push({ $or })\n    } else if (prop === '$not') {\n      const child = createFieldFilter(query[prop], key)\n      if (child === true) return false\n      if (child !== false) filters.push({ $nor: [child] })\n    } else if (prop === '$el') {\n      const child = transformFieldQuery(query[prop], key, filters)\n      if (child === false) return false\n      if (child !== true) result.$elemMatch = child\n    } else if (prop === '$regexFor') {\n      filters.push({\n        $expr: {\n          $function: {\n            body: function (data: string, value: string) {\n              return new RegExp(data, 'i').test(value)\n            }.toString(),\n            args: ['$' + key, query.$regexFor],\n            lang: 'js',\n          },\n        },\n      })\n    } else {\n      result[prop] = query[prop]\n    }\n  }\n  if (!Object.keys(result).length) return true\n  return result\n}\n\nexport function transformQuery(query: Query.Expr, virtualKey: string) {\n  const filter: Filter<any> = {}\n  const additional: Filter<any>[] = []\n  for (const key in query) {\n    const value = query[key]\n    if (key === '$and' || key === '$or') {\n      // MongoError: $and/$or/$nor must be a nonempty array\n      // { $and: [] } matches everything\n      // { $or: [] } matches nothing\n      if (value.length) {\n        filter[key] = value.map(query => transformQuery(query, virtualKey))\n      } else if (key === '$or') {\n        return\n      }\n    } else if (key === '$not') {\n      // MongoError: unknown top level operator: $not\n      // https://stackoverflow.com/questions/25270396/mongodb-how-to-invert-query-with-not\n      // this may solve this problem but lead to performance degradation\n      const query = transformQuery(value, virtualKey)\n      if (query) filter.$nor = [query]\n    } else if (key === '$expr') {\n      additional.push({ $expr: transformEval(value, virtualKey) })\n    } else {\n      const actualKey = getActualKey(key, virtualKey)\n      const query = transformFieldQuery(value, actualKey, additional)\n      if (query === false) return\n      if (query !== true) filter[actualKey] = query\n    }\n  }\n  if (additional.length) {\n    (filter.$and ||= []).push(...additional)\n  }\n  return filter\n}\n\nfunction transformEvalExpr(expr: any, virtualKey: string, onAggr?: (pipeline: any[]) => void) {\n  return valueMap(expr as any, (value) => {\n    if (Array.isArray(value)) {\n      return value.map(val => transformEval(val, virtualKey, onAggr))\n    } else {\n      return transformEval(value, virtualKey, onAggr)\n    }\n  })\n}\n\nfunction transformAggr(expr: any, virtualKey: string) {\n  if (typeof expr === 'string') {\n    return '$' + expr\n  }\n  return transformEvalExpr(expr, virtualKey)\n}\n\nconst aggrKeys = ['$sum', '$avg', '$min', '$max', '$count']\n\nconst letters = 'abcdefghijklmnopqrstuvwxyz'\n\nfunction getActualKey(key: string, virtualKey: string) {\n  return key === virtualKey ? '_id' : key\n}\n\nexport function transformEval(expr: any, virtualKey: string, onAggr?: (pipeline: any[]) => void) {\n  if (typeof expr === 'number' || typeof expr === 'string' || typeof expr === 'boolean') {\n    return expr\n  } else if (expr.$) {\n    if (typeof expr.$ === 'string') {\n      return '$' + getActualKey(expr.$, virtualKey)\n    } else {\n      return '$' + getActualKey(expr.$[1], virtualKey)\n    }\n  }\n\n  for (const key of aggrKeys) {\n    if (!expr[key]) continue\n    const value = transformAggr(expr[key], virtualKey)\n    const $ = Array(8).fill(0).map(() => letters[Math.floor(Math.random() * letters.length)]).join('')\n    if (key === '$count') {\n      onAggr([\n        { $group: { _id: value } },\n        { $group: { _id: null, [$]: { $count: {} } } },\n      ])\n    } else {\n      onAggr([{ $group: { _id: null, [$]: { [key]: value } } }])\n    }\n    return { $ }\n  }\n\n  return transformEvalExpr(expr, virtualKey, onAggr)\n}\n"],
  "mappings": "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",
  "names": ["import_cosmokit", "query", "query", "item"]
}
