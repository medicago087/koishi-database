"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultRegistrarS = exports.SatoriRegistrar = void 0;
const koishi_1 = require("koishi");
const cordis_decorators_1 = require("cordis-decorators");
const select_context_1 = require("./utility/select-context");
class SatoriRegistrar extends cordis_decorators_1.Registrar {
    methodDecorators() {
        return {
            ...super.methodDecorators(),
            RouterMethod: this.decorateMethod('route', ({ ctx }, fun, method, path) => {
                const _path = path.startsWith('/') ? path : `/${path}`;
                return ctx.router[method](_path, (koaCtx, next) => fun(koaCtx, next));
            }),
            Ws: this.decorateMethod('ws', ({ ctx }, action, path) => ctx.router.ws(path.startsWith('/') ? path : `/${path}`, action)),
        };
    }
    selectorDecorators() {
        return {
            OnAnywhere: this.decorateTransformer((ctx) => ctx.any()),
            OnNowhere: this.decorateTransformer((ctx) => ctx.never()),
            OnUser: this.decorateTransformer((ctx, ...values) => ctx.user(...values)),
            OnSelf: this.decorateTransformer((ctx, ...values) => ctx.self(...values)),
            OnGuild: this.decorateTransformer((ctx, ...values) => ctx.guild(...values)),
            OnChannel: this.decorateTransformer((ctx, ...values) => ctx.channel(...values)),
            OnPlatform: this.decorateTransformer((ctx, ...values) => ctx.platform(...values)),
            OnPrivate: this.decorateTransformer((ctx, ...values) => ctx.private(...values)),
            OnSelection: this.decorateTransformer((ctx, selection) => (0, select_context_1.selectContext)(ctx, selection)),
        };
    }
    scopeDecorators() {
        return {
            ...super.scopeDecorators(),
            ...this.selectorDecorators(),
        };
    }
}
exports.SatoriRegistrar = SatoriRegistrar;
exports.defaultRegistrarS = new SatoriRegistrar(koishi_1.Context);
//# sourceMappingURL=registrar.js.map