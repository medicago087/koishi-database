/// <reference types="koa__router" />
import { Context } from 'koishi';
import { Registrar } from 'cordis-decorators';
import WebSocket from 'ws';
import { DefaultContext, DefaultState, ParameterizedContext, Next as KoaNext } from 'koa';
import { RouterParamContext } from '@koa/router';
import { IncomingMessage } from 'http';
import { Selection } from './utility/select-context';
export type KoaContext = ParameterizedContext<DefaultState, DefaultContext & RouterParamContext<DefaultState, DefaultContext>, any>;
export declare class SatoriRegistrar<Ctx extends Context> extends Registrar<Ctx> {
    methodDecorators(): {
        RouterMethod: (method: "options" | "get" | "post" | "put" | "delete" | "patch" | "head" | "all", path: string) => import("cordis-decorators").TypedMethodDecorator<(ctx: KoaContext, Next: KoaNext) => Promise<any>>;
        Ws: (path: string) => import("cordis-decorators").TypedMethodDecorator<(socket: WebSocket, request: IncomingMessage) => any>;
        UseEvent: (event: keyof import("cordis").GetEvents<Ctx>, prepend?: boolean) => import("cordis-decorators").TypedMethodDecorator<(...args: any[]) => any>;
        UsePlugin: () => import("cordis-decorators").TypedMethodDecorator<(...args: any[]) => import("cordis-decorators").PluginRegistrar.PluginDefinition<Ctx, any> | Promise<import("cordis-decorators").PluginRegistrar.PluginDefinition<Ctx, any>>>;
        Apply: () => import("cordis-decorators").TypedMethodDecorator<(...args: any[]) => any>;
    };
    selectorDecorators(): {
        OnAnywhere: () => ClassDecorator & MethodDecorator;
        OnNowhere: () => ClassDecorator & MethodDecorator;
        OnUser: (...args: string[]) => ClassDecorator & MethodDecorator;
        OnSelf: (...args: string[]) => ClassDecorator & MethodDecorator;
        OnGuild: (...args: string[]) => ClassDecorator & MethodDecorator;
        OnChannel: (...args: string[]) => ClassDecorator & MethodDecorator;
        OnPlatform: (...args: string[]) => ClassDecorator & MethodDecorator;
        OnPrivate: (...args: string[]) => ClassDecorator & MethodDecorator;
        OnSelection: (selection: Selection) => ClassDecorator & MethodDecorator;
    };
    scopeDecorators(): {
        OnAnywhere: () => ClassDecorator & MethodDecorator;
        OnNowhere: () => ClassDecorator & MethodDecorator;
        OnUser: (...args: string[]) => ClassDecorator & MethodDecorator;
        OnSelf: (...args: string[]) => ClassDecorator & MethodDecorator;
        OnGuild: (...args: string[]) => ClassDecorator & MethodDecorator;
        OnChannel: (...args: string[]) => ClassDecorator & MethodDecorator;
        OnPlatform: (...args: string[]) => ClassDecorator & MethodDecorator;
        OnPrivate: (...args: string[]) => ClassDecorator & MethodDecorator;
        OnSelection: (selection: Selection) => ClassDecorator & MethodDecorator;
        If: <T>(func: import("cordis-decorators").Condition<boolean, T, [Record<string, any>]>) => MethodDecorator;
        For: <T_1>(func: import("cordis-decorators").Condition<Iterable<Record<string, any>>, T_1, [Record<string, any>]>) => MethodDecorator;
        Isolate: (...args: string[]) => ClassDecorator & MethodDecorator;
        UsingService: (...services: string[]) => ClassDecorator & MethodDecorator;
    };
}
export declare const defaultRegistrarS: SatoriRegistrar<Context>;
