import { AcceptOptions, Context } from 'cordis';
import { PluginRegistrar } from '../plugin-def';
import { TypedMethodDecorator } from '../def';
export declare const PluginName: (name: string) => import("typed-reflector").AllDecorators, PluginSchema: (schema: import("schemastery")<any, any> | import("schemastery-gen").ClassType<any>) => import("typed-reflector").AllDecorators, Reusable: (reusable?: boolean) => import("typed-reflector").AllDecorators, Reactive: (reactive?: boolean) => import("typed-reflector").AllDecorators, Provide: (name: string, options?: import("../registrar").Registrar.ProvideOptions) => ClassDecorator, InjectContext: () => import("typed-reflector").AllDecorators, InjectConfig: () => import("typed-reflector").AllDecorators, InjectParent: () => import("typed-reflector").AllDecorators, Caller: () => import("typed-reflector").AllDecorators, AcceptWhen: (keys?: string[], options?: AcceptOptions) => TypedMethodDecorator<(config: any) => boolean>;
export declare const Fork: <Ctx extends Context<any>>(fork: PluginRegistrar.PluginClass<Ctx, any, any>) => import("typed-reflector").AllDecorators;
export declare function Inject(name?: string, addUsing?: boolean): PropertyDecorator;
export declare function Inject(addUsing?: boolean): PropertyDecorator;
export declare function Internal(): MethodDecorator & PropertyDecorator;
export declare function Accept(options?: AcceptOptions): ClassDecorator & TypedMethodDecorator<(...args: any[]) => boolean> & PropertyDecorator;
export declare function Decline(): PropertyDecorator;
