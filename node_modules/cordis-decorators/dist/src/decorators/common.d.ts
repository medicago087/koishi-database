export declare const Isolate: (...args: string[]) => ClassDecorator & MethodDecorator, UsingService: (...services: string[]) => ClassDecorator & MethodDecorator, If: <T>(func: import("../def").Condition<boolean, T, [Record<string, any>]>) => MethodDecorator, For: <T>(func: import("../def").Condition<Iterable<Record<string, any>>, T, [Record<string, any>]>) => MethodDecorator;
export declare const UsePlugin: () => import("../def").TypedMethodDecorator<(...args: any[]) => import("../plugin-def").PluginRegistrar.PluginDefinition<import("cordis").Context<any>, any> | Promise<import("../plugin-def").PluginRegistrar.PluginDefinition<import("cordis").Context<any>, any>>>, Apply: () => import("../def").TypedMethodDecorator<(...args: any[]) => any>;
