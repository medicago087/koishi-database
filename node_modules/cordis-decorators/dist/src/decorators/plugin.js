"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Decline = exports.Accept = exports.Internal = exports.Inject = exports.Fork = exports.AcceptWhen = exports.Caller = exports.InjectParent = exports.InjectConfig = exports.InjectContext = exports.Provide = exports.Reactive = exports.Reusable = exports.PluginSchema = exports.PluginName = void 0;
const registrar_1 = require("../registrar");
const pluginDecorators = registrar_1.defaultRegistrar.pluginDecorators();
exports.PluginName = pluginDecorators.PluginName, exports.PluginSchema = pluginDecorators.PluginSchema, exports.Reusable = pluginDecorators.Reusable, exports.Reactive = pluginDecorators.Reactive, exports.Provide = pluginDecorators.Provide, exports.InjectContext = pluginDecorators.InjectContext, exports.InjectConfig = pluginDecorators.InjectConfig, exports.InjectParent = pluginDecorators.InjectParent, exports.Caller = pluginDecorators.Caller, exports.AcceptWhen = pluginDecorators.AcceptWhen;
const Fork = (fork) => pluginDecorators.Fork(fork);
exports.Fork = Fork;
function Inject(...args) {
    return pluginDecorators.Inject(...args);
}
exports.Inject = Inject;
function Internal() {
    return (obj, key, des) => {
        const cls = obj.constructor;
        const field = des ? 'methods' : 'properties';
        if (!cls[field]) {
            cls[field] = [];
        }
        cls[field].push(key);
    };
}
exports.Internal = Internal;
function Accept(options) {
    return (obj, key, des) => {
        if (!key) {
            // Class decorator
            return registrar_1.defaultRegistrar.metadata.append('CordisConfigAcceptors', (ctx) => ctx.accept(undefined, options))(obj);
        }
        if (des) {
            // Method decorator
            return registrar_1.defaultRegistrar.metadata.append('CordisConfigAcceptors', (ctx) => ctx.accept((c) => c[key](), options))(obj.constructor);
        }
        // Property decorator
        return registrar_1.defaultRegistrar.metadata.append('CordisConfigAcceptors', (ctx) => ctx.accept([key], undefined, options))(obj.constructor);
    };
}
exports.Accept = Accept;
function Decline() {
    return (obj, key) => registrar_1.defaultRegistrar.metadata.append('CordisConfigAcceptors', (ctx) => ctx.decline([key]))(obj.constructor);
}
exports.Decline = Decline;
//# sourceMappingURL=plugin.js.map