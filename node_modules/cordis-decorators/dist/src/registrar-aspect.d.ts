import { Context } from 'cordis';
import { Registrar } from './registrar';
import { Observable } from 'rxjs';
export declare class RegistrarAspect<Ctx extends Context, T = any> {
    private registrar;
    private obj;
    private view;
    constructor(registrar: Registrar<Ctx>, obj: T, view?: Record<any, any>);
    getAllFieldsToRegister(): (keyof T & string)[];
    getScopeContext(ctx: Ctx, key?: keyof T & string, extraView?: Record<any, any>, autoScope?: boolean): Ctx;
    registerMethod(ctx: Ctx, key: keyof T & string, extraView?: Record<any, any>): Registrar.RegisterResult<Ctx, T>;
    private registerWithLoopControl;
    private runLayersWith;
    private runLayers;
    registerFor(ctx: Ctx, key: keyof T & string): Observable<Registrar.RegisterResult<Ctx, T>>;
    register(ctx: Ctx): Observable<Registrar.RegisterResult<Ctx, T>>;
    performTopActions(ctx: Ctx, autoScope?: boolean, extraView?: Record<any, any>): void;
}
