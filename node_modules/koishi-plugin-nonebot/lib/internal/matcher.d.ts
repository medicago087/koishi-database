import { Context, Dict, Session } from 'koishi';
import type { PyProxy } from 'pyodide';
import { Parameter } from './utils';
export declare class NoneBotException extends Error {
    constructor(message: string);
    static check(e: any): boolean;
}
export declare class BaseMatcher {
    protected ctx: Context;
    protected session: Session;
    protected state: Map<any, any>;
    protected callbacks: (() => Promise<void>)[];
    protected message: string;
    protected getters: {
        Bot: () => any;
        Event: () => any;
        State: () => Map<any, any>;
        Matcher: () => BaseMatcher;
        ArgStr: ([name]: string[]) => any;
        CommandArg: () => any;
    };
    constructor(ctx: Context);
    protected getParams(fn: PyProxy): Parameter[];
    protected factory(action: (callback: () => Promise<void>) => Promise<void>): (fn: PyProxy) => any;
    set_arg(key: string, value: any): void;
    handle(): (fn: PyProxy) => any;
    send(...args: any[]): Promise<void>;
    reject(...args: any[]): Promise<void>;
    finish(...args: any[]): Promise<void>;
    protected execute(...args: any[]): Promise<void>;
}
export declare class EventMatcher extends BaseMatcher {
    protected ctx: Context;
    constructor(ctx: Context, event: string);
}
export declare class MessageMatcher extends BaseMatcher {
    protected ctx: Context;
    constructor(ctx: Context, predicate: (text: string) => boolean);
}
export declare class CommandMatcher extends BaseMatcher {
    protected ctx: Context;
    protected name: string;
    protected args: Dict<any>;
    constructor(ctx: Context, name: string);
    got(name: string, { prompt }?: any): (fn: PyProxy) => any;
}
