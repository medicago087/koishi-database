"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Internal = void 0;
const koishi_1 = require("koishi");
const matcher_1 = require("./matcher");
const utils_1 = require("./utils");
class Internal {
    constructor(ctx) {
        this.ctx = ctx;
        this.logger = Object.assign(Object.create(new koishi_1.Logger('nonebot')), {
            warning(...args) {
                return this.warn(...args);
            }
        });
    }
    h(type, attrs, children) {
        var _a;
        attrs = Object.fromEntries((_a = attrs === null || attrs === void 0 ? void 0 : attrs.toJs().entries()) !== null && _a !== void 0 ? _a : []);
        children = children === null || children === void 0 ? void 0 : children.toJs().map(item => {
            if (!(item instanceof Map))
                return (0, utils_1.unwrap)(item);
            if (item.get('type') === 'node') {
                const element = (0, koishi_1.segment)('message', (0, utils_1.unwrap)(item.get('data').get('content')));
                element.children.forEach((item) => {
                    if (item.type === 'image' && item.attrs.file) {
                        item.attrs.url = item.attrs.file;
                        delete item.attrs.file;
                    }
                });
                element.children.unshift((0, koishi_1.segment)('author', {
                    userId: item.get('data').get('uin'),
                    nickname: item.get('data').get('name'),
                }));
                return element;
            }
            else {
                throw new Error('invalid content:' + item);
            }
        });
        return (0, koishi_1.segment)(type, attrs, children);
    }
    get_driver() {
        return {
            config: {
                ...this.config,
                dict: () => new Map(Object.entries(this.config)),
            },
        };
    }
    on_message() {
        return new matcher_1.MessageMatcher(this.ctx, () => true);
    }
    on_metaevent() {
        return new matcher_1.BaseMatcher(this.ctx);
    }
    on_notice() {
        return new matcher_1.BaseMatcher(this.ctx);
    }
    on_request() {
        return new matcher_1.BaseMatcher(this.ctx);
    }
    on_startswith(text) {
        return new matcher_1.MessageMatcher(this.ctx, message => message.startsWith(text));
    }
    on_endswith(text) {
        return new matcher_1.MessageMatcher(this.ctx, message => message.endsWith(text));
    }
    on_fullmatch(text) {
        return new matcher_1.MessageMatcher(this.ctx, message => message === text);
    }
    on_keyword(text) {
        const words = (0, koishi_1.makeArray)((0, utils_1.unwrap)(text));
        return new matcher_1.MessageMatcher(this.ctx, message => words.some(word => message.includes(word)));
    }
    on_regex(...args) {
        const regexp = new RegExp((0, utils_1.kwarg)('pattern', args));
        return new matcher_1.MessageMatcher(this.ctx, message => regexp.test(message));
    }
    on_command(name) {
        return new matcher_1.CommandMatcher(this.ctx, name);
    }
    on_shell_command(name) {
        return new matcher_1.BaseMatcher(this.ctx);
    }
}
exports.Internal = Internal;
