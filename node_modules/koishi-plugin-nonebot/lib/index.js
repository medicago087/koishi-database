"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = require("node:fs/promises");
const koishi_1 = require("koishi");
const node_path_1 = require("node:path");
const pyodide_1 = require("pyodide");
const internal_1 = require("./internal");
if (!globalThis.fetch) {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    globalThis.fetch = require('node-fetch');
}
const logger = new koishi_1.Logger('nonebot');
class NoneBot extends koishi_1.Service {
    constructor(ctx, config) {
        super(ctx, 'nonebot');
        this.ctx = ctx;
        this.config = config;
        this.importTask = Promise.resolve();
        this.installed = Object.create(null);
    }
    async start() {
        this.python = await (0, pyodide_1.loadPyodide)({
            stdout: logger.info,
            stderr: logger.warn,
            fullStdLib: false,
            homedir: '/pyodide',
        });
        const root = (0, node_path_1.resolve)(this.ctx.baseDir, this.config.packagesFolder);
        await (0, promises_1.mkdir)(root, { recursive: true });
        this.python.FS.mount(this.python.FS.filesystems.NODEFS, { root }, '/lib/python3.10/site-packages/');
        this.internal = new internal_1.Internal(this.ctx);
        this.python.registerJsModule('internal', this.internal);
        for (const name of ['aiohttp', 'httpx', 'nonebot', 'pydantic']) {
            this.mount((0, node_path_1.resolve)(__dirname, `../python/${name}`));
        }
    }
    mount(pathModule) {
        const name = (0, node_path_1.basename)(pathModule).replace(/-/g, '_');
        const pathVFSModule = `/pyodide/${name}/`;
        this.python.FS.mkdirTree(pathVFSModule);
        this.python.FS.mount(this.python.FS.filesystems.NODEFS, { root: pathModule }, pathVFSModule);
        return name;
    }
    async install(pathDeps) {
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const deps = require((0, node_path_1.join)(pathDeps, 'deps.json'));
        await Promise.all(deps.map(dep => this.loadPackage(pathDeps, dep)));
    }
    async import(pathModule, config = {}) {
        const name = this.mount(pathModule);
        return this.importTask = this.importTask.then(async () => {
            this.internal.config = config;
            await this.python.runPythonAsync(`import ${name}`);
            this.internal.config = {};
        });
    }
    async loadPackage(pathDeps, dep) {
        var _a, _b;
        return (_a = this.installed)[_b = dep.name] || (_a[_b] = this.python.loadPackage((0, node_path_1.join)(pathDeps, dep.filename), logger.info, logger.warn));
    }
    async stop() {
        // TODO
    }
}
(function (NoneBot) {
    NoneBot.Config = koishi_1.Schema.object({
        packagesFolder: koishi_1.Schema.string()
            .description('site-packages 目录。')
            .default('data/nonebot/site-packages'),
    });
})(NoneBot || (NoneBot = {}));
exports.default = NoneBot;
