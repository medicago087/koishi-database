{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { Context, Service } from 'koishi'\nimport zh from './locales/zh.yml'\n\ndeclare module 'koishi' {\n  interface Context {\n    translator: Translator\n  }\n}\n\nabstract class Translator<C extends Translator.Config = Translator.Config> extends Service {\n  constructor(ctx: Context, public config: C) {\n    super(ctx, 'translator', true)\n\n    ctx.i18n.define('zh', zh)\n\n    ctx.command('translate <text:text>')\n      .userFields(['locale'])\n      .channelFields(['locale'])\n      .option('source', '-s <lang>')\n      .option('target', '-t <lang>')\n      .action(async ({ options, session }, input) => {\n        if (!input) return session.text('.expect-input')\n\n        const { source, target } = options\n        const result: Translator.Result = { input, source, target, detail: true }\n        result.output = await this.translate(result)\n        return session.text('.output', result)\n      })\n  }\n\n  abstract translate(options?: Translator.Result): Promise<string>\n}\n\nnamespace Translator {\n  export interface Config {}\n\n  export interface Result {\n    input: string\n    output?: string\n    source?: string\n    target?: string\n    detail?: boolean\n  }\n}\n\nexport default Translator\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAiC;;;;;;AASjC,IAAe,aAAf,cAAmF,sBAAQ;AAAA,EACzF,YAAY,KAAqB,QAAW;AAC1C,UAAM,KAAK,cAAc,IAAI;AADE;AAG/B,QAAI,KAAK,OAAO,MAAM,UAAE;AAExB,QAAI,QAAQ,uBAAuB,EAChC,WAAW,CAAC,QAAQ,CAAC,EACrB,cAAc,CAAC,QAAQ,CAAC,EACxB,OAAO,UAAU,WAAW,EAC5B,OAAO,UAAU,WAAW,EAC5B,OAAO,OAAO,EAAE,SAAS,QAAQ,GAAG,UAAU;AAC7C,UAAI,CAAC;AAAO,eAAO,QAAQ,KAAK,eAAe;AAE/C,YAAM,EAAE,QAAQ,OAAO,IAAI;AAC3B,YAAM,SAA4B,EAAE,OAAO,QAAQ,QAAQ,QAAQ,KAAK;AACxE,aAAO,SAAS,MAAM,KAAK,UAAU,MAAM;AAC3C,aAAO,QAAQ,KAAK,WAAW,MAAM;AAAA,IACvC,CAAC;AAAA,EACL;AAGF;AAtBe;AAoCf,IAAO,cAAQ;",
  "names": []
}
