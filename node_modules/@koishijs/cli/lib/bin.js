#!/usr/bin/env node
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// koishi/packages/cli/src/start.ts
var import_utils = require("@koishijs/utils");
var import_child_process = require("child_process");
var import_path = require("path");
var import_kleur = __toESM(require("kleur"));
var child;
var buffer = null;
function toArg(key) {
  return key.length === 1 ? `-${key}` : `--${(0, import_utils.hyphenate)(key)}`;
}
__name(toArg, "toArg");
function createWorker(options) {
  const execArgv = Object.entries(options).flatMap(([key, value]) => {
    if (key === "--")
      return [];
    key = toArg(key);
    if (value === true) {
      return [key];
    } else if (value === false) {
      return ["--no-" + key.slice(2)];
    } else if (Array.isArray(value)) {
      return value.flatMap((value2) => [key, value2]);
    } else {
      return [key, value];
    }
  });
  execArgv.push(...options["--"]);
  child = (0, import_child_process.fork)((0, import_path.resolve)(__dirname, "worker"), [], {
    execArgv
  });
  let config;
  child.on("message", (message) => {
    if (message.type === "start") {
      config = message.body;
      if (buffer) {
        child.send({ type: "send", body: buffer });
        buffer = null;
      }
    } else if (message.type === "queue") {
      buffer = message.body;
    }
  });
  const closingCode = [0, 130, 137];
  child.on("exit", (code) => {
    if (!config || closingCode.includes(code) || code !== 51 && !config.autoRestart) {
      process.exit(code);
    }
    createWorker(options);
  });
}
__name(createWorker, "createWorker");
function setEnvArg(name, value) {
  if (value === true) {
    process.env[name] = "";
  } else if (value) {
    process.env[name] = value;
  }
}
__name(setEnvArg, "setEnvArg");
function start_default(cli2) {
  cli2.command("start [file]", "start a koishi bot").alias("run").allowUnknownOptions().option("--debug [namespace]", "specify debug namespace").option("--log-level [level]", "specify log level (default: 2)").option("--log-time [format]", "show timestamp in logs").option("--watch [path]", "watch and reload at change").action((file, options) => {
    const { logLevel, debug, logTime, watch, ...rest } = options;
    if (logLevel !== void 0 && (!(0, import_utils.isInteger)(logLevel) || logLevel < 0)) {
      console.warn(`${import_kleur.default.red("error")} log level should be a positive integer.`);
      process.exit(1);
    }
    setEnvArg("KOISHI_WATCH_ROOT", watch);
    setEnvArg("KOISHI_LOG_TIME", logTime);
    process.env.KOISHI_LOG_LEVEL = logLevel || "";
    process.env.KOISHI_DEBUG = debug || "";
    process.env.KOISHI_CONFIG_FILE = file || "";
    createWorker(rest);
  });
}
__name(start_default, "default");

// koishi/packages/cli/src/bin.ts
var import_cac = __toESM(require("cac"));
var { version } = require("../package.json");
var cli = (0, import_cac.default)("koishi").help().version(version);
start_default(cli);
cli.parse();
if (!cli.matchedCommand) {
  cli.outputHelp();
}
//# sourceMappingURL=bin.js.map
