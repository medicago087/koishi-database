import { Context, Schema } from 'koishi';
import { WatchOptions } from 'chokidar';
declare class Watcher {
    private ctx;
    private config;
    private root;
    private watcher;
    /**
     * changes from externals E will always trigger a full reload
     *
     * - root R -> external E -> none of plugin Q
     */
    private externals;
    /**
     * files X that should be reloaded
     *
     * - including all stashed files S
     * - some plugin P -> file X -> some change C
     */
    private accepted;
    /**
     * files X that should not be reloaded
     *
     * - including all externals E
     * - some change C -> file X -> none of change D
     */
    private declined;
    /** stashed changes */
    private stashed;
    constructor(ctx: Context, config: Watcher.Config);
    start(): void;
    stop(): Promise<void>;
    private analyzeChanges;
    private triggerLocalReload;
}
declare namespace Watcher {
    interface Config extends WatchOptions {
        root?: string;
        debounce?: number;
        ignored?: string[];
    }
    const Config: Schema<Config>;
}
export default Watcher;
