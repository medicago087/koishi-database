{
  "version": 3,
  "sources": ["../../src/worker/index.ts", "../../src/worker/daemon.ts", "../../src/worker/logger.ts", "../../src/worker/watcher.ts"],
  "sourcesContent": ["import { Context, Dict, Logger, Schema, Time } from 'koishi'\nimport Loader from '@koishijs/loader'\nimport * as daemon from './daemon'\nimport * as logger from './logger'\nimport Watcher from './watcher'\n\nexport * from '@koishijs/loader'\n\nexport { Loader, Watcher }\n\ndeclare module 'koishi' {\n  interface Events {\n    'exit'(signal: NodeJS.Signals): Promise<void>\n  }\n\n  interface Context {\n    prologue: string[]\n    watcher: Watcher\n  }\n\n  namespace Context {\n    interface Config extends daemon.Config {\n      plugins?: Dict\n      timezoneOffset?: number\n      stackTraceLimit?: number\n      logger?: logger.Config\n      watch?: Watcher.Config\n    }\n  }\n}\n\nObject.assign(Context.Config.Advanced.dict, {\n  autoRestart: Schema.boolean().description('应用在运行时崩溃自动重启。').default(true).hidden(),\n  timezoneOffset: Schema.number().description('时区偏移量 (分钟)。').default(new Date().getTimezoneOffset()),\n  stackTraceLimit: Schema.natural().description('报错的调用堆栈深度。').default(10),\n  plugins: Schema.object({}).hidden(),\n})\n\nfunction handleException(error: any) {\n  new Logger('app').error(error)\n  process.exit(1)\n}\n\nprocess.on('uncaughtException', handleException)\n\nprocess.on('unhandledRejection', (error) => {\n  new Logger('app').warn(error)\n})\n\nconst loader = new Loader(process.env.KOISHI_CONFIG_FILE)\nconst config = loader.readConfig()\n\nlogger.prepare(config.logger)\n\nif (config.timezoneOffset !== undefined) {\n  Time.setTimezoneOffset(config.timezoneOffset)\n}\n\nif (config.stackTraceLimit !== undefined) {\n  Error.stackTraceLimit = config.stackTraceLimit\n}\n\nnamespace addons {\n  export const name = 'CLI'\n\n  export function apply(ctx: Context, config: Context.Config) {\n    logger.apply(ctx.root)\n    ctx.plugin(daemon, config)\n\n    if (process.env.KOISHI_WATCH_ROOT !== undefined) {\n      (config.watch ??= {}).root = process.env.KOISHI_WATCH_ROOT\n      ctx.plugin(Watcher, config.watch)\n    }\n  }\n}\n\nasync function start() {\n  const app = await loader.createApp()\n  app.plugin(addons, app.config)\n  await app.start()\n}\n\nstart().catch(handleException)\n", "import { Context, noop } from 'koishi'\n\nexport interface Config {\n  exitCommand?: boolean\n  autoRestart?: boolean\n}\n\ninterface Message {\n  type: 'send'\n  body: any\n}\n\nexport const name = 'daemon'\n\nexport function apply(ctx: Context, config: Config = {}) {\n  const { exitCommand, autoRestart = true } = config\n\n  function handleSignal(signal: NodeJS.Signals) {\n    // prevent restarting when child process is exiting\n    if (autoRestart) {\n      process.send({ type: 'start', body: { autoRestart: false } })\n    }\n    ctx.logger('app').info(`terminated by ${signal}`)\n    ctx.parallel('exit', signal).finally(() => process.exit())\n  }\n\n  if (exitCommand) {\n    ctx.i18n.define('zh', require('../locales/zh'))\n    ctx.i18n.define('ja', require('../locales/ja'))\n    ctx.i18n.define('fr', require('../locales/fr'))\n    ctx.i18n.define('zh-tw', require('../locales/zh-tw'))\n\n    ctx\n      .command('exit', { authority: 4 })\n      .option('restart', '-r')\n      .action(async ({ options, session }) => {\n        const { channelId, guildId, sid } = session\n        if (!options.restart) {\n          await session.send(session.text('.exiting')).catch(noop)\n          process.exit()\n        }\n        process.send({ type: 'queue', body: { channelId, guildId, sid, message: session.text('.restarted') } })\n        await session.send(session.text('.restarting')).catch(noop)\n        process.exit(51)\n      })\n  }\n\n  ctx.on('ready', () => {\n    process.send({ type: 'start', body: { autoRestart } })\n    process.on('SIGINT', handleSignal)\n    process.on('SIGTERM', handleSignal)\n  })\n\n  process.on('message', (data: Message) => {\n    if (data.type === 'send') {\n      const { channelId, guildId, sid, message } = data.body\n      const dispose = ctx.on('bot-status-updated', (bot) => {\n        if (bot.sid !== sid || bot.status !== 'online') return\n        bot.sendMessage(channelId, message, guildId)\n        dispose()\n      })\n    }\n  })\n}\n", "import { Context, defineProperty, Logger, remove, Schema, version } from 'koishi'\n\ninterface LogLevelConfig {\n  // a little different from @koishijs/utils\n  // we don't enforce user to provide a base here\n  base?: number\n  [K: string]: LogLevel\n}\n\ntype LogLevel = number | LogLevelConfig\n\nexport interface Config {\n  levels?: LogLevel\n  showDiff?: boolean\n  showTime?: string | boolean\n}\n\nexport const Config: Schema<Config> = Schema.object({\n  levels: Schema.any().description('默认的日志输出等级。'),\n  showDiff: Schema.boolean().description('标注相邻两次日志输出的时间差。'),\n  showTime: Schema.union([Boolean, String]).default(true).description('输出日志所使用的时间格式。'),\n}).description('日志设置').hidden()\n\ndefineProperty(Context.Config, 'logger', Config)\n\nContext.Config.list.push(Schema.object({\n  logger: Config,\n}))\n\nconst prologue: string[] = []\n\nconst target: Logger.Target = {\n  colors: 3,\n  showTime: 'yyyy-MM-dd hh:mm:ss',\n  print: text => prologue.push(text),\n}\n\nexport function prepare(config: Config = {}) {\n  const { levels } = config\n  // configurate logger levels\n  if (typeof levels === 'object') {\n    Logger.levels = levels as any\n  } else if (typeof levels === 'number') {\n    Logger.levels.base = levels\n  }\n\n  let showTime = config.showTime\n  if (showTime === true) showTime = 'yyyy-MM-dd hh:mm:ss'\n  if (showTime) Logger.targets[0].showTime = showTime\n  Logger.targets[0].showDiff = config.showDiff\n\n  // cli options have higher precedence\n  if (process.env.KOISHI_LOG_LEVEL) {\n    Logger.levels.base = +process.env.KOISHI_LOG_LEVEL\n  }\n\n  function ensureBaseLevel(config: Logger.LevelConfig, base: number) {\n    config.base ??= base\n    Object.values(config).forEach((value) => {\n      if (typeof value !== 'object') return\n      ensureBaseLevel(value, config.base)\n    })\n  }\n\n  ensureBaseLevel(Logger.levels, 2)\n\n  if (process.env.KOISHI_DEBUG) {\n    for (const name of process.env.KOISHI_DEBUG.split(',')) {\n      new Logger(name).level = Logger.DEBUG\n    }\n  }\n\n  Logger.targets.push(target)\n\n  new Logger('app').info('%C', `Koishi/${version}`)\n  Logger.timestamp = Date.now()\n}\n\nexport function apply(app: Context) {\n  app.prologue = prologue\n  app.on('ready', () => {\n    remove(Logger.targets, target)\n  })\n}\n", "import { coerce, Context, Dict, Logger, makeArray, Runtime, Schema } from 'koishi'\nimport { FSWatcher, watch, WatchOptions } from 'chokidar'\nimport { relative, resolve } from 'path'\nimport { debounce } from 'throttle-debounce'\nimport { unwrapExports } from '@koishijs/loader'\n\nfunction loadDependencies(filename: string, ignored: Set<string>) {\n  const dependencies = new Set<string>()\n  function traverse({ filename, children }: NodeJS.Module) {\n    if (ignored.has(filename) || dependencies.has(filename) || filename.includes('/node_modules/')) return\n    dependencies.add(filename)\n    children.forEach(traverse)\n  }\n  traverse(require.cache[filename])\n  return dependencies\n}\n\nconst logger = new Logger('watch')\n\nclass Watcher {\n  private root: string\n  private watcher: FSWatcher\n\n  /**\n   * changes from externals E will always trigger a full reload\n   *\n   * - root R -> external E -> none of plugin Q\n   */\n  private externals: Set<string>\n\n  /**\n   * files X that should be reloaded\n   *\n   * - including all stashed files S\n   * - some plugin P -> file X -> some change C\n   */\n  private accepted: Set<string>\n\n  /**\n   * files X that should not be reloaded\n   *\n   * - including all externals E\n   * - some change C -> file X -> none of change D\n   */\n  private declined: Set<string>\n\n  /** stashed changes */\n  private stashed = new Set<string>()\n\n  constructor(private ctx: Context, private config: Watcher.Config) {\n    ctx.root.watcher = this\n    ctx.on('ready', () => this.start())\n    ctx.on('dispose', () => this.stop())\n  }\n\n  start() {\n    const { loader } = this.ctx\n    const { root = '', ignored = [] } = this.config\n    this.root = resolve(loader.baseDir, root)\n    this.watcher = watch(this.root, {\n      ...this.config,\n      ignored: ['**/node_modules/**', '**/.git/**', '**/logs/**', ...makeArray(ignored)],\n    })\n\n    // files independent from any plugins will trigger a full reload\n    this.externals = loadDependencies(__filename, new Set(Object.values(loader.cache)))\n    const triggerLocalReload = debounce(this.config.debounce, () => this.triggerLocalReload())\n\n    this.watcher.on('change', (path) => {\n      const isEntry = path === loader.filename || path === loader.envfile\n      if (loader.suspend && isEntry) {\n        loader.suspend = false\n        return\n      }\n\n      logger.debug('change detected:', relative(this.root, path))\n\n      if (isEntry) {\n        if (require.cache[path]) {\n          this.ctx.loader.fullReload()\n        } else {\n          const config = loader.readConfig()\n          this.ctx.root.state.update(config)\n        }\n      } else {\n        if (this.externals.has(path)) {\n          this.ctx.loader.fullReload()\n        } else if (require.cache[path]) {\n          this.stashed.add(path)\n          triggerLocalReload()\n        }\n      }\n    })\n  }\n\n  stop() {\n    return this.watcher.close()\n  }\n\n  private analyzeChanges() {\n    /** files pending classification */\n    const pending: string[] = []\n\n    this.accepted = new Set(this.stashed)\n    this.declined = new Set(this.externals)\n\n    this.stashed.forEach((filename) => {\n      const { children } = require.cache[filename]\n      for (const { filename } of children) {\n        if (this.accepted.has(filename) || this.declined.has(filename) || filename.includes('/node_modules/')) continue\n        pending.push(filename)\n      }\n    })\n\n    while (pending.length) {\n      let index = 0, hasUpdate = false\n      while (index < pending.length) {\n        const filename = pending[index]\n        const { children } = require.cache[filename]\n        let isDeclined = true, isAccepted = false\n        for (const { filename } of children) {\n          // ignore all declined children\n          if (this.declined.has(filename) || filename.includes('/node_modules/')) continue\n          if (this.accepted.has(filename)) {\n            // mark the module as accepted if any child is accepted\n            isAccepted = true\n            break\n          } else {\n            // the child module is neither accepted nor declined\n            // so we need to perform further analysis\n            isDeclined = false\n            if (!pending.includes(filename)) {\n              hasUpdate = true\n              pending.push(filename)\n            }\n          }\n        }\n        if (isAccepted || isDeclined) {\n          hasUpdate = true\n          pending.splice(index, 1)\n          if (isAccepted) {\n            this.accepted.add(filename)\n          } else {\n            // mark the module as declined if all children are declined\n            this.declined.add(filename)\n          }\n        } else {\n          index++\n        }\n      }\n      // infinite loop\n      if (!hasUpdate) break\n    }\n\n    for (const filename of pending) {\n      this.declined.add(filename)\n    }\n  }\n\n  private triggerLocalReload() {\n    this.analyzeChanges()\n\n    /** plugins pending classification */\n    const pending = new Map<string, Runtime>()\n\n    /** plugins that should be reloaded */\n    const reloads = new Map<Runtime, string>()\n\n    // we assume that plugin entry files are \"atomic\"\n    // that is, reloading them will not cause any other reloads\n    for (const filename in require.cache) {\n      const module = require.cache[filename]\n      const plugin = unwrapExports(module.exports)\n      const runtime = this.ctx.registry.get(plugin)\n      if (!runtime || this.declined.has(filename)) continue\n      pending.set(filename, runtime)\n      if (!plugin['sideEffect']) this.declined.add(filename)\n    }\n\n    for (const [filename, runtime] of pending) {\n      // check if it is a dependent of the changed file\n      this.declined.delete(filename)\n      const dependencies = [...loadDependencies(filename, this.declined)]\n      if (!runtime.plugin['sideEffect']) this.declined.add(filename)\n\n      // we only detect reloads at plugin level\n      // a plugin will be reloaded if any of its dependencies are accepted\n      if (!dependencies.some(dep => this.accepted.has(dep))) continue\n      dependencies.forEach(dep => this.accepted.add(dep))\n\n      // prepare for reload\n      let isMarked = false\n      const visited = new Set<Runtime>()\n      const queued = [runtime]\n      while (queued.length) {\n        const runtime = queued.shift()\n        if (visited.has(runtime)) continue\n        visited.add(runtime)\n        if (reloads.has(runtime)) {\n          isMarked = true\n          break\n        }\n        for (const state of runtime.children) {\n          queued.push(state.runtime)\n        }\n      }\n      if (!isMarked) reloads.set(runtime, filename)\n    }\n\n    // save require.cache for rollback\n    // and delete module cache before re-require\n    const backup: Dict<NodeJS.Module> = {}\n    for (const filename of this.accepted) {\n      backup[filename] = require.cache[filename]\n      delete require.cache[filename]\n    }\n\n    /** rollback require.cache */\n    function rollback() {\n      for (const filename in backup) {\n        require.cache[filename] = backup[filename]\n      }\n    }\n\n    // attempt to load entry files\n    const attempts = {}\n    try {\n      for (const [, filename] of reloads) {\n        attempts[filename] = unwrapExports(require(filename))\n      }\n    } catch (err) {\n      logger.warn(err)\n      return rollback()\n    }\n\n    try {\n      for (const [runtime, filename] of reloads) {\n        const path = relative(this.root, filename)\n        const states = runtime.children.slice()\n\n        try {\n          this.ctx.registry.delete(runtime.plugin)\n        } catch (err) {\n          logger.warn('failed to dispose plugin at %c\\n' + coerce(err), path)\n        }\n\n        try {\n          const plugin = attempts[filename]\n          for (const state of states) {\n            state.parent.plugin(plugin, state.config)\n          }\n          logger.info('reload plugin at %c', path)\n        } catch (err) {\n          logger.warn('failed to reload plugin at %c\\n' + coerce(err), path)\n          throw err\n        }\n      }\n    } catch {\n      // rollback require.cache and plugin states\n      rollback()\n      for (const [runtime, filename] of reloads) {\n        try {\n          this.ctx.registry.delete(attempts[filename])\n          runtime.parent.plugin(runtime.plugin, runtime.config)\n        } catch (err) {\n          logger.warn(err)\n        }\n      }\n      return\n    }\n\n    // reset stashed files\n    this.stashed = new Set()\n  }\n}\n\nnamespace Watcher {\n  export interface Config extends WatchOptions {\n    root?: string\n    debounce?: number\n    ignored?: string[]\n  }\n\n  export const Config: Schema<Config> = Schema.object({\n    root: Schema.string().description('要监听的根目录，相对于当前工作路径。'),\n    debounce: Schema.natural().role('ms').default(100).description('延迟触发更新的等待时间。'),\n    ignored: Schema.union([\n      Schema.array(String),\n      Schema.transform(String, (value) => [value]),\n    ]).description('要忽略的文件或目录。'),\n  }).description('热重载设置')\n\n  Context.Config.list.push(Schema.object({\n    watch: Config,\n  }))\n}\n\nexport default Watcher\n"],
  "mappings": "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",
  "names": ["Loader", "import_koishi", "import_loader", "config", "import_koishi", "config", "name", "apply", "import_koishi", "filename", "config", "loader", "module", "runtime", "Watcher", "Loader", "addons", "apply", "config"]
}
