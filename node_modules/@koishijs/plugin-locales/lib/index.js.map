{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { Context, Dict, I18n, Logger, Schema } from 'koishi'\nimport { DataService } from '@koishijs/plugin-console'\nimport { promises as fsp } from 'fs'\nimport { resolve } from 'path'\nimport { debounce } from 'throttle-debounce'\nimport { dump, load } from 'js-yaml'\n\ndeclare module '@koishijs/plugin-console' {\n  namespace Console {\n    interface Services {\n      locales: LocaleProvider\n    }\n  }\n\n  interface Events {\n    'l10n'(data: Dict<I18n.Store>): void\n  }\n}\n\nexport const name = 'locales'\n\nconst logger = new Logger('locales')\n\nexport interface Config {\n  root?: string\n}\n\nexport const Config: Schema<Config> = Schema.object({\n  root: Schema.string().default('locales').description('存放本地化文件的根目录。'),\n})\n\nexport function apply(ctx: Context, config: Config) {\n  ctx.plugin(LocaleProvider, config)\n\n  ctx.on('ready', async () => {\n    const folder = resolve(ctx.baseDir, config.root)\n    const created = await fsp.mkdir(folder, { recursive: true })\n    if (created) return\n    const files = await fsp.readdir(folder)\n    for (const file of files) {\n      if (!file.endsWith('.yml')) continue\n      logger.info('loading locale %s', file)\n      const content = await fsp.readFile(resolve(folder, file), 'utf8')\n      ctx.i18n.define('$' + file.split('.')[0], load(content) as any)\n    }\n  })\n}\n\nclass LocaleProvider extends DataService<Dict<I18n.Store>> {\n  static using = ['console'] as const\n\n  update = debounce(0, () => this.refresh())\n\n  constructor(ctx: Context, config: Config) {\n    super(ctx, 'locales', { authority: 4 })\n\n    ctx.on('internal/i18n', this.update)\n\n    ctx.console.addEntry({\n      dev: resolve(__dirname, '../client/index.ts'),\n      prod: resolve(__dirname, '../dist'),\n    })\n\n    ctx.console.addListener('l10n', async (data) => {\n      for (const locale in data) {\n        ctx.i18n.define('$' + locale, data[locale])\n        const content = dump(data[locale])\n        await fsp.writeFile(resolve(ctx.baseDir, config.root, locale + '.yml'), content)\n      }\n    })\n  }\n\n  async get() {\n    return this.ctx.i18n._data\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAoD;AACpD,4BAA4B;AAC5B,gBAAgC;AAChC,kBAAwB;AACxB,+BAAyB;AACzB,qBAA2B;AAcpB,IAAM,OAAO;AAEpB,IAAM,SAAS,IAAI,qBAAO,SAAS;AAM5B,IAAM,SAAyB,qBAAO,OAAO;AAAA,EAClD,MAAM,qBAAO,OAAO,EAAE,QAAQ,SAAS,EAAE,YAAY,cAAc;AACrE,CAAC;AAEM,SAAS,MAAM,KAAc,QAAgB;AAClD,MAAI,OAAO,gBAAgB,MAAM;AAEjC,MAAI,GAAG,SAAS,YAAY;AAC1B,UAAM,aAAS,qBAAQ,IAAI,SAAS,OAAO,IAAI;AAC/C,UAAM,UAAU,MAAM,UAAAA,SAAI,MAAM,QAAQ,EAAE,WAAW,KAAK,CAAC;AAC3D,QAAI;AAAS;AACb,UAAM,QAAQ,MAAM,UAAAA,SAAI,QAAQ,MAAM;AACtC,eAAW,QAAQ,OAAO;AACxB,UAAI,CAAC,KAAK,SAAS,MAAM;AAAG;AAC5B,aAAO,KAAK,qBAAqB,IAAI;AACrC,YAAM,UAAU,MAAM,UAAAA,SAAI,aAAS,qBAAQ,QAAQ,IAAI,GAAG,MAAM;AAChE,UAAI,KAAK,OAAO,MAAM,KAAK,MAAM,GAAG,EAAE,QAAI,qBAAK,OAAO,CAAQ;AAAA,IAChE;AAAA,EACF,CAAC;AACH;AAfgB;AAiBhB,IAAM,iBAAN,cAA6B,kCAA8B;AAAA,EAKzD,YAAY,KAAc,QAAgB;AACxC,UAAM,KAAK,WAAW,EAAE,WAAW,EAAE,CAAC;AAHxC,sBAAS,mCAAS,GAAG,MAAM,KAAK,QAAQ,CAAC;AAKvC,QAAI,GAAG,iBAAiB,KAAK,MAAM;AAEnC,QAAI,QAAQ,SAAS;AAAA,MACnB,SAAK,qBAAQ,WAAW,oBAAoB;AAAA,MAC5C,UAAM,qBAAQ,WAAW,SAAS;AAAA,IACpC,CAAC;AAED,QAAI,QAAQ,YAAY,QAAQ,OAAO,SAAS;AAC9C,iBAAW,UAAU,MAAM;AACzB,YAAI,KAAK,OAAO,MAAM,QAAQ,KAAK,OAAO;AAC1C,cAAM,cAAU,qBAAK,KAAK,OAAO;AACjC,cAAM,UAAAA,SAAI,cAAU,qBAAQ,IAAI,SAAS,OAAO,MAAM,SAAS,MAAM,GAAG,OAAO;AAAA,MACjF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,MAAM;AACV,WAAO,KAAK,IAAI,KAAK;AAAA,EACvB;AACF;AA3BM;AAAA,eACG,QAAQ,CAAC,SAAS;",
  "names": ["fsp"]
}
