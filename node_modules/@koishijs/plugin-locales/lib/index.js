var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// koishi/external/console/packages/locales/src/index.ts
var src_exports = {};
__export(src_exports, {
  Config: () => Config,
  apply: () => apply,
  name: () => name
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");
var import_plugin_console = require("@koishijs/plugin-console");
var import_fs = require("fs");
var import_path = require("path");
var import_throttle_debounce = require("throttle-debounce");
var import_js_yaml = require("js-yaml");
var name = "locales";
var logger = new import_koishi.Logger("locales");
var Config = import_koishi.Schema.object({
  root: import_koishi.Schema.string().default("locales").description("存放本地化文件的根目录。")
});
function apply(ctx, config) {
  ctx.plugin(LocaleProvider, config);
  ctx.on("ready", async () => {
    const folder = (0, import_path.resolve)(ctx.baseDir, config.root);
    const created = await import_fs.promises.mkdir(folder, { recursive: true });
    if (created)
      return;
    const files = await import_fs.promises.readdir(folder);
    for (const file of files) {
      if (!file.endsWith(".yml"))
        continue;
      logger.info("loading locale %s", file);
      const content = await import_fs.promises.readFile((0, import_path.resolve)(folder, file), "utf8");
      ctx.i18n.define("$" + file.split(".")[0], (0, import_js_yaml.load)(content));
    }
  });
}
__name(apply, "apply");
var LocaleProvider = class extends import_plugin_console.DataService {
  constructor(ctx, config) {
    super(ctx, "locales", { authority: 4 });
    this.update = (0, import_throttle_debounce.debounce)(0, () => this.refresh());
    ctx.on("internal/i18n", this.update);
    ctx.console.addEntry({
      dev: (0, import_path.resolve)(__dirname, "../client/index.ts"),
      prod: (0, import_path.resolve)(__dirname, "../dist")
    });
    ctx.console.addListener("l10n", async (data) => {
      for (const locale in data) {
        ctx.i18n.define("$" + locale, data[locale]);
        const content = (0, import_js_yaml.dump)(data[locale]);
        await import_fs.promises.writeFile((0, import_path.resolve)(ctx.baseDir, config.root, locale + ".yml"), content);
      }
    });
  }
  async get() {
    return this.ctx.i18n._data;
  }
};
__name(LocaleProvider, "LocaleProvider");
LocaleProvider.using = ["console"];
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Config,
  apply,
  name
});
//# sourceMappingURL=index.js.map
