var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// koishi/plugins/common/echo/src/locales/zh.yml
var require_zh = __commonJS({
  "koishi/plugins/common/echo/src/locales/zh.yml"(exports, module2) {
    module2.exports = { commands: { echo: { description: "向当前上下文发送消息", options: { anonymous: "匿名发送消息", forceAnonymous: "强制匿名发送消息", escape: "发送转义消息", unescape: "发送反转义消息", user: "发送到用户", channel: "发送到频道", guild: "指定群组编号" }, messages: { "expect-text": "请输入要发送的文本。", "platform-not-found": "找不到指定的平台。" } } } };
  }
});

// koishi/plugins/common/echo/src/index.ts
var src_exports = {};
__export(src_exports, {
  Config: () => Config,
  apply: () => apply,
  name: () => name
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");
var import_helpers = require("@koishijs/helpers");
var name = "echo";
var Config = import_koishi.Schema.object({});
function apply(ctx) {
  ctx.i18n.define("zh", require_zh());
  ctx.command("echo <message:text>", { authority: 2 }).option("anonymous", "-a", { authority: 3 }).option("forceAnonymous", "-A", { authority: 3 }).option("escape", "-e", { authority: 3 }).option("unescape", "-E", { authority: 3 }).option("user", "-u [user:user]", { authority: 3 }).option("channel", "-c [channel:channel]", { authority: 3 }).option("guild", "-g [guild:string]", { authority: 3 }).action(async ({ options, session }, message) => {
    if (!message)
      return session.text(".expect-text");
    if (options.unescape) {
      message = import_koishi.segment.unescape(message);
    }
    if (options.escape) {
      message = import_koishi.segment.escape(message);
    }
    if (options.forceAnonymous) {
      message = (0, import_koishi.segment)("anonymous") + message;
    } else if (options.anonymous) {
      message = (0, import_koishi.segment)("anonymous", { ignore: true }) + message;
    }
    const target = options.user || options.channel;
    if (target) {
      const [platform, id] = (0, import_helpers.parsePlatform)(target);
      const bot = ctx.bots.find((bot2) => bot2.platform === platform);
      if (!bot) {
        return session.text(".platform-not-found");
      } else if (options.user) {
        await bot.sendPrivateMessage(id, message);
      } else {
        await bot.sendMessage(id, message, options.guild);
      }
      return;
    }
    return message;
  });
}
__name(apply, "apply");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Config,
  apply,
  name
});
//# sourceMappingURL=index.js.map
