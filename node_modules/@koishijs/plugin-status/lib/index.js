var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// koishi/external/console/packages/status/src/index.ts
var src_exports = {};
__export(src_exports, {
  Config: () => Config,
  ProfileProvider: () => profile_default,
  apply: () => apply,
  name: () => name,
  using: () => using
});
module.exports = __toCommonJS(src_exports);
var import_koishi2 = require("koishi");
var import_path = require("path");

// koishi/external/console/packages/status/src/profile.ts
var import_koishi = require("koishi");
var import_os = require("os");
var import_plugin_console = require("@koishijs/plugin-console");

// koishi/external/console/packages/status/src/locales/zh-CN.yml
var zh_CN_default = { commands: { status: { description: "查看运行状态", messages: { status: { online: "运行中", offline: "离线", connect: "正在连接", reconnect: "正在重连", disconnect: "正在断开" }, bot: '{username}：<i18n path={"commands.status.messages.status." + status}/>', epilog: "==========\nCPU 使用率：{ (cpu[0] * 100).toFixed() }% / { (cpu[1] * 100).toFixed() }%\n内存使用率：{ (memory[0] * 100).toFixed() }% / { (memory[1] * 100).toFixed() }%" } } } };

// koishi/external/console/packages/status/src/profile.ts
var TickCounter = class {
  constructor(ctx) {
    this.data = new Array(60).fill(0);
    this.tick = () => {
      this.data.unshift(0);
      this.data.splice(-1, 1);
    };
    this.stop = ctx.setInterval(() => this.tick(), import_koishi.Time.second);
  }
  add(value = 1) {
    this.data[0] += value;
  }
  get() {
    return this.data.reduce((prev, curr) => prev + curr, 0);
  }
  static initialize(bot, ctx) {
    bot._messageSent = new TickCounter(ctx);
    bot._messageReceived = new TickCounter(ctx);
  }
};
__name(TickCounter, "TickCounter");
var usage = getCpuUsage();
var appRate;
var usedRate;
async function memoryRate() {
  const total = (0, import_os.totalmem)();
  return [process.memoryUsage().rss / total, 1 - (0, import_os.freemem)() / total];
}
__name(memoryRate, "memoryRate");
function getCpuUsage() {
  let totalIdle = 0, totalTick = 0;
  const cpuInfo = (0, import_os.cpus)();
  const usage2 = process.cpuUsage().user;
  for (const cpu of cpuInfo) {
    for (const type in cpu.times) {
      totalTick += cpu.times[type];
    }
    totalIdle += cpu.times.idle;
  }
  return {
    app: usage2 / 1e3,
    used: totalTick - totalIdle,
    total: totalTick
  };
}
__name(getCpuUsage, "getCpuUsage");
function updateCpuUsage() {
  const newUsage = getCpuUsage();
  const totalDifference = newUsage.total - usage.total;
  appRate = (newUsage.app - usage.app) / totalDifference;
  usedRate = (newUsage.used - usage.used) / totalDifference;
  usage = newUsage;
}
__name(updateCpuUsage, "updateCpuUsage");
var ProfileProvider = class extends import_plugin_console.DataService {
  constructor(ctx, config) {
    super(ctx, "profile");
    this.config = config;
    ctx.i18n.define("zh", zh_CN_default);
    const { tickInterval } = config;
    ctx.on("ready", () => {
      ctx.setInterval(() => {
        updateCpuUsage();
        this.refresh();
      }, tickInterval);
    });
    ctx.any().before("send", (session) => {
      session.bot._messageSent.add(1);
    });
    ctx.any().on("message", (session) => {
      session.bot._messageReceived.add(1);
    });
    ctx.bots.forEach((bot) => TickCounter.initialize(bot, ctx));
    ctx.on("bot-added", (bot) => {
      TickCounter.initialize(bot, ctx);
      process.nextTick(() => this.refresh());
    });
    ctx.on("bot-removed", (bot) => {
      process.nextTick(() => this.refresh());
      bot._messageSent.stop();
      bot._messageReceived.stop();
    });
    ctx.on("bot-status-updated", () => {
      this.refresh();
    });
    ctx.command("status").action(async ({ session }) => {
      const data = await this.get();
      const output = Object.values(data.bots).map((bot) => {
        return session.text(".bot", bot);
      });
      output.push(session.text(".epilog", data));
      return output.join("\n");
    });
  }
  async get(forced = false) {
    var _a;
    if (this.cached && !forced)
      return this.cached;
    const memory = await memoryRate();
    const cpu = [appRate, usedRate];
    const bots = {};
    for (const bot of this.ctx.bots) {
      if (bot.hidden)
        continue;
      bots[bot.ctx.state.uid] = {
        ...(0, import_koishi.pick)(bot, ["platform", "selfId", "avatar", "username", "status"]),
        error: (_a = bot.error) == null ? void 0 : _a.message,
        messageSent: bot._messageSent.get(),
        messageReceived: bot._messageReceived.get()
      };
    }
    return { memory, cpu, bots };
  }
};
__name(ProfileProvider, "ProfileProvider");
((ProfileProvider2) => {
  ProfileProvider2.Config = import_koishi.Schema.object({
    tickInterval: import_koishi.Schema.natural().role("ms").description("性能数据推送的时间间隔。").default(import_koishi.Time.second * 5)
  });
})(ProfileProvider || (ProfileProvider = {}));
var profile_default = ProfileProvider;

// koishi/external/console/packages/status/src/index.ts
var name = "status";
var using = ["console"];
var Config = import_koishi2.Schema.intersect([
  profile_default.Config
]);
function apply(ctx, config) {
  ctx.console.addEntry({
    dev: (0, import_path.resolve)(__dirname, "../client/index.ts"),
    prod: (0, import_path.resolve)(__dirname, "../dist")
  });
  ctx.plugin(profile_default, config);
}
__name(apply, "apply");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Config,
  ProfileProvider,
  apply,
  name,
  using
});
//# sourceMappingURL=index.js.map
