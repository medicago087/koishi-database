{
  "version": 3,
  "sources": ["../src/index.ts", "../src/profile.ts"],
  "sourcesContent": ["import { Context, Schema } from 'koishi'\nimport { resolve } from 'path'\nimport {} from '@koishijs/plugin-console'\nimport ProfileProvider from './profile'\n\nexport type Activity = Record<number, number>\n\ndeclare module 'koishi' {\n  interface Channel {\n    name: string\n    activity: Activity\n  }\n}\n\ndeclare module '@koishijs/plugin-console' {\n  namespace Console {\n    interface Services {\n      profile: ProfileProvider\n    }\n  }\n}\n\nexport {\n  ProfileProvider,\n}\n\nexport * from './profile'\n\nexport const name = 'status'\nexport const using = ['console'] as const\n\nexport interface Config extends ProfileProvider.Config {}\n\nexport const Config: Schema<Config> = Schema.intersect([\n  ProfileProvider.Config,\n])\n\nexport function apply(ctx: Context, config: Config) {\n  ctx.console.addEntry({\n    dev: resolve(__dirname, '../client/index.ts'),\n    prod: resolve(__dirname, '../dist'),\n  })\n\n  ctx.plugin(ProfileProvider, config)\n}\n", "import { Bot, Context, Dict, pick, Schema, Time } from 'koishi'\nimport { cpus, freemem, totalmem } from 'os'\nimport { DataService } from '@koishijs/plugin-console'\nimport zhCN from './locales/zh-CN.yml'\n\ndeclare module 'koishi' {\n  interface Bot {\n    _messageSent: TickCounter\n    _messageReceived: TickCounter\n  }\n}\n\nclass TickCounter {\n  public stop: () => void\n\n  private data = new Array(60).fill(0)\n\n  private tick = () => {\n    this.data.unshift(0)\n    this.data.splice(-1, 1)\n  }\n\n  constructor(ctx: Context) {\n    this.stop = ctx.setInterval(() => this.tick(), Time.second)\n  }\n\n  public add(value = 1) {\n    this.data[0] += value\n  }\n\n  public get() {\n    return this.data.reduce((prev, curr) => prev + curr, 0)\n  }\n\n  static initialize(bot: Bot, ctx: Context) {\n    bot._messageSent = new TickCounter(ctx)\n    bot._messageReceived = new TickCounter(ctx)\n  }\n}\n\nexport type LoadRate = [app: number, total: number]\n\nlet usage = getCpuUsage()\nlet appRate: number\nlet usedRate: number\n\nasync function memoryRate(): Promise<LoadRate> {\n  const total = totalmem()\n  return [process.memoryUsage().rss / total, 1 - freemem() / total]\n}\n\nfunction getCpuUsage() {\n  let totalIdle = 0, totalTick = 0\n  const cpuInfo = cpus()\n  const usage = process.cpuUsage().user\n\n  for (const cpu of cpuInfo) {\n    for (const type in cpu.times) {\n      totalTick += cpu.times[type]\n    }\n    totalIdle += cpu.times.idle\n  }\n\n  return {\n    // microsecond values\n    app: usage / 1000,\n    used: totalTick - totalIdle,\n    total: totalTick,\n  }\n}\n\nfunction updateCpuUsage() {\n  const newUsage = getCpuUsage()\n  const totalDifference = newUsage.total - usage.total\n  appRate = (newUsage.app - usage.app) / totalDifference\n  usedRate = (newUsage.used - usage.used) / totalDifference\n  usage = newUsage\n}\n\nclass ProfileProvider extends DataService<ProfileProvider.Payload> {\n  cached: ProfileProvider.Payload\n\n  constructor(ctx: Context, private config: ProfileProvider.Config) {\n    super(ctx, 'profile')\n\n    ctx.i18n.define('zh', zhCN)\n\n    const { tickInterval } = config\n    ctx.on('ready', () => {\n      ctx.setInterval(() => {\n        updateCpuUsage()\n        this.refresh()\n      }, tickInterval)\n    })\n\n    ctx.any().before('send', (session) => {\n      session.bot._messageSent.add(1)\n    })\n\n    ctx.any().on('message', (session) => {\n      session.bot._messageReceived.add(1)\n    })\n\n    ctx.bots.forEach(bot => TickCounter.initialize(bot, ctx))\n\n    ctx.on('bot-added', (bot) => {\n      TickCounter.initialize(bot, ctx)\n      process.nextTick(() => this.refresh())\n    })\n\n    ctx.on('bot-removed', (bot) => {\n      process.nextTick(() => this.refresh())\n      bot._messageSent.stop()\n      bot._messageReceived.stop()\n    })\n\n    ctx.on('bot-status-updated', () => {\n      this.refresh()\n    })\n\n    ctx.command('status')\n      .action(async ({ session }) => {\n        const data = await this.get()\n        const output = Object.values(data.bots).map((bot) => {\n          return session.text('.bot', bot)\n        })\n        output.push(session.text('.epilog', data))\n        return output.join('\\n')\n      })\n  }\n\n  async get(forced = false) {\n    if (this.cached && !forced) return this.cached\n    const memory = await memoryRate()\n    const cpu: LoadRate = [appRate, usedRate]\n    const bots: Dict<ProfileProvider.BotData> = {}\n    for (const bot of this.ctx.bots) {\n      if (bot.hidden) continue\n      bots[bot.ctx.state.uid] = {\n        ...pick(bot, ['platform', 'selfId', 'avatar', 'username', 'status']),\n        error: bot.error?.message,\n        messageSent: bot._messageSent.get(),\n        messageReceived: bot._messageReceived.get(),\n      }\n    }\n    return { memory, cpu, bots }\n  }\n}\n\nnamespace ProfileProvider {\n  export interface Config {\n    tickInterval?: number\n  }\n\n  export const Config: Schema<Config> = Schema.object({\n    tickInterval: Schema.natural().role('ms').description('性能数据推送的时间间隔。').default(Time.second * 5),\n  })\n\n  export interface BotData extends Pick<Bot, 'platform' | 'selfId' | 'avatar' | 'username' | 'status'> {\n    error?: string\n    messageSent: number\n    messageReceived: number\n  }\n\n  export interface Payload {\n    memory: LoadRate\n    cpu: LoadRate\n    bots: Dict<BotData>\n  }\n}\n\nexport default ProfileProvider\n"],
  "mappings": "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",
  "names": ["import_koishi", "usage", "ProfileProvider"]
}
