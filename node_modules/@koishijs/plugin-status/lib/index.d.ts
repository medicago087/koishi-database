import { Assets, Context, Schema, Bot, Dict, Channel } from 'koishi';
import { DataService } from '@koishijs/plugin-console';
declare module 'koishi' {
    interface User {
        lastCall: Date;
    }
}
declare class MetaProvider extends DataService<MetaProvider.Payload> {
    private config;
    timestamp: number;
    cached: Promise<MetaProvider.Payload>;
    callbacks: MetaProvider.Extension[];
    constructor(ctx: Context, config: MetaProvider.Config);
    get(): Promise<any>;
    extend(callback: MetaProvider.Extension): void;
}
declare namespace MetaProvider {
    interface Config {
        metaInterval?: number;
    }
    const Config: Schema<Config>;
    interface Payload extends Assets.Stats {
        activeUsers: number;
        activeGuilds: number;
        databaseSize: number;
    }
    type Extension = () => Promise<Partial<Payload>>;
}
declare module '@satorijs/core' {
    interface Bot {
        _messageSent: TickCounter;
        _messageReceived: TickCounter;
    }
}
declare class TickCounter {
    stop: () => void;
    private data;
    private tick;
    constructor(ctx: Context);
    add(value?: number): void;
    get(): any;
    static initialize(bot: Bot, ctx: Context): void;
}
export type LoadRate = [app: number, total: number];
declare class ProfileProvider extends DataService<ProfileProvider.Payload> {
    private config;
    cached: ProfileProvider.Payload;
    constructor(ctx: Context, config: ProfileProvider.Config);
    get(forced?: boolean): Promise<ProfileProvider.Payload>;
}
declare namespace ProfileProvider {
    interface Config {
        tickInterval?: number;
    }
    const Config: Schema<Config>;
    interface BotData extends Pick<Bot, 'platform' | 'selfId' | 'avatar' | 'username' | 'status'> {
        error?: string;
        messageSent: number;
        messageReceived: number;
    }
    interface Payload {
        memory: LoadRate;
        cpu: LoadRate;
        bots: Dict<BotData>;
    }
}
declare module 'koishi' {
    interface Session {
        _sendType?: 'command' | 'dialogue';
    }
    interface Tables {
        stats_daily: Record<StatisticsProvider.DailyField, Dict<number>> & {
            time: Date;
        };
        stats_hourly: Record<StatisticsProvider.HourlyField, number> & {
            time: Date;
        };
        stats_longterm: Record<StatisticsProvider.LongtermField, number> & {
            time: Date;
        };
    }
}
export const RECENT_LENGTH = 5;
export function average(stats: {}[]): Dict<number, string>;
export interface GuildData {
    name: string;
    platform: string;
    assignee: string;
    memberCount?: number;
    value: number;
    last: number;
}
declare class StatisticsProvider extends DataService<StatisticsProvider.Payload> {
    private config;
    static using: readonly ["database"];
    lastUpdate: Date;
    updateHour: number;
    callbacks: StatisticsProvider.Extension[];
    cachedDate: number;
    cachedData: Promise<StatisticsProvider.Payload>;
    average: typeof average;
    guilds: Dict<Dict<number>>;
    daily: Record<StatisticsProvider.DailyField, Dict<number>>;
    hourly: Record<StatisticsProvider.HourlyField, number>;
    longterm: Record<StatisticsProvider.LongtermField, number>;
    constructor(ctx: Context, config?: StatisticsProvider.Config);
    private clear;
    addDaily(field: StatisticsProvider.DailyField, key: string | number): void;
    private _uploadDaily;
    private _uploadHourly;
    private _uploadLongterm;
    private _uploadGuilds;
    upload(forced?: boolean): Promise<void>;
    extend(callback: StatisticsProvider.Extension): void;
    private extendBasic;
    private extendGuilds;
    download(): Promise<StatisticsProvider.Payload>;
    get(): Promise<StatisticsProvider.Payload>;
}
declare namespace StatisticsProvider {
    type DailyField = typeof dailyFields[number];
    const dailyFields: readonly ["command", "dialogue", "botSend", "botReceive", "group"];
    type HourlyField = typeof hourlyFields[number];
    const hourlyFields: readonly ["total", "group", "private", "command", "dialogue"];
    type LongtermField = typeof longtermFields[number];
    const longtermFields: readonly ["message"];
    interface Data {
        extension?: StatisticsProvider.Payload;
        guilds: Pick<Channel, 'id' | 'platform' | 'name' | 'assignee'>[];
        daily: Record<DailyField, Dict<number>>[];
        hourly: ({
            time: Date;
        } & Record<HourlyField, number>)[];
        longterm: ({
            time: Date;
        } & Record<LongtermField, number>)[];
    }
    interface Payload {
        history: Dict<number>;
        commands: Dict<number>;
        hours: Dict<number>[];
        guilds: GuildData[];
        botSend: Dict<number>;
        botReceive: Dict<number>;
    }
    interface Config {
        statsInternal?: number;
    }
    const Config: Schema<Config>;
    type Extension = (payload: Payload, data: StatisticsProvider.Data) => Promise<void>;
}
export type Activity = Record<number, number>;
declare module 'koishi' {
    interface Channel {
        name: string;
        activity: Activity;
    }
}
declare module '@koishijs/plugin-console' {
    namespace Console {
        interface Services {
            meta: MetaProvider;
            profile: ProfileProvider;
            stats: StatisticsProvider;
        }
    }
}
export { MetaProvider, ProfileProvider, StatisticsProvider, };
export const name = "status";
export const using: readonly ["console"];
export interface Config extends MetaProvider.Config, ProfileProvider.Config, StatisticsProvider.Config {
}
export const Config: Schema<Config>;
export function apply(ctx: Context, config: Config): void;
