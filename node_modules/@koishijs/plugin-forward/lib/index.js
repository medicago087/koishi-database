var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// plugins/common/forward/src/locales/zh.yml
var require_zh = __commonJS({
  "plugins/common/forward/src/locales/zh.yml"(exports, module2) {
    module2.exports = { commands: { forward: { description: "设置消息转发", usage: "当前频道 ID：{cid}" }, "forward.add": { description: "添加目标频道", messages: { unchanged: "{0} 已经是当前频道的目标频道。", updated: "已成功添加目标频道 {0}。" } }, "forward.remove": { description: "移除目标频道", messages: { unchanged: "{0} 不是当前频道的目标频道。", updated: "已成功移除目标频道 {0}。" } }, "forward.clear": { description: "移除全部目标频道", messages: { updated: "已成功移除全部目标频道。" } }, "forward.list": { description: "查看目标频道列表", messages: { empty: "当前频道没有设置目标频道。", header: "当前频道的目标频道列表为：" } } } };
  }
});

// plugins/common/forward/src/index.ts
var src_exports = {};
__export(src_exports, {
  Config: () => Config,
  Rule: () => Rule,
  apply: () => apply,
  name: () => name
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");
var import_helpers = require("@koishijs/helpers");
var Rule = import_koishi.Schema.object({
  source: import_koishi.Schema.string().required().description("来源频道。"),
  target: import_koishi.Schema.string().required().description("目标频道。"),
  selfId: import_koishi.Schema.string().required().description("负责推送的机器人账号。"),
  guildId: import_koishi.Schema.string().description("目标频道的群组编号。")
}).description("转发规则。");
var name = "forward";
var Config = import_koishi.Schema.union([
  import_koishi.Schema.object({
    rules: import_koishi.Schema.array(Rule).description("转发规则列表。"),
    interval: import_koishi.Schema.natural().role("ms").default(import_koishi.Time.hour).description("推送消息不再响应回复的时间。")
  }),
  import_koishi.Schema.transform(import_koishi.Schema.array(Rule), (rules) => ({ rules, interval: import_koishi.Time.hour }))
]);
function apply(ctx, { rules, interval }) {
  ctx.i18n.define("zh", require_zh());
  const relayMap = {};
  async function sendRelay(session, rule) {
    const { author, parsed } = session;
    if (!parsed.content)
      return;
    try {
      const [platform, channelId] = (0, import_helpers.parsePlatform)(rule.target);
      if (!rule.selfId) {
        const channel = await ctx.database.getChannel(platform, channelId, ["assignee", "guildId"]);
        if (!channel || !channel.assignee)
          return;
        rule.selfId = channel.assignee;
        rule.guildId = channel.guildId;
      }
      const bot = ctx.bots[`${platform}:${rule.selfId}`];
      const chain = import_koishi.segment.parse(parsed.content);
      if (chain.some((item) => item.type === "at")) {
        const dict = await session.bot.getGuildMemberMap(session.guildId);
        chain.forEach((item, index) => {
          if (item.type === "at") {
            const content2 = "@" + dict[item.attrs.id];
            chain.splice(index, 1, (0, import_koishi.segment)("text", { content: content2 }));
          }
        });
      }
      const content = `${author.nickname || author.username}: ${chain.join("")}`;
      await bot.sendMessage(channelId, content, rule.guildId).then((ids) => {
        for (const id of ids) {
          relayMap[id] = {
            source: rule.target,
            target: session.cid,
            selfId: session.selfId,
            guildId: session.guildId
          };
          ctx.setTimeout(() => delete relayMap[id], interval);
        }
      });
    } catch (error) {
      ctx.logger("forward").warn(error);
    }
  }
  __name(sendRelay, "sendRelay");
  ctx.before("attach-channel", (session, fields) => {
    fields.add("forward");
  });
  ctx.middleware(async (session, next) => {
    const { quote = {}, subtype } = session;
    if (subtype !== "group")
      return;
    const data = relayMap[quote.messageId];
    if (data)
      return sendRelay(session, data);
    const tasks = [];
    if (ctx.database) {
      for (const target of session.channel.forward) {
        tasks.push(sendRelay(session, { target }));
      }
    } else {
      for (const rule of rules) {
        if (session.cid !== rule.source)
          continue;
        tasks.push(sendRelay(session, rule));
      }
    }
    const [result] = await Promise.all([next(), ...tasks]);
    return result;
  });
  ctx.model.extend("channel", {
    forward: "list"
  });
  ctx.using(["database"], (ctx2) => {
    const cmd = ctx2.command("forward [operation:string] <channel:channel>", { authority: 3 }).alias("fwd");
    const register = /* @__PURE__ */ __name((def, callback) => cmd.subcommand(def, { authority: 3, checkArgCount: true }).channelFields(["forward"]).action(callback), "register");
    register(".add <channel:channel>", async ({ session }, id) => {
      const { forward } = session.channel;
      if (forward.includes(id)) {
        return session.text(".unchanged", [id]);
      } else {
        forward.push(id);
        return session.text(".updated", [id]);
      }
    });
    register(".remove <channel:channel>", async ({ session }, id) => {
      const { forward } = session.channel;
      const index = forward.indexOf(id);
      if (index >= 0) {
        forward.splice(index, 1);
        return session.text(".updated", [id]);
      } else {
        return session.text(".unchanged", [id]);
      }
    }).alias("forward.rm");
    register(".clear", async ({ session }) => {
      session.channel.forward = [];
      return session.text(".updated");
    });
    register(".list", async ({ session }) => {
      const { forward } = session.channel;
      if (!forward.length)
        return session.text(".empty");
      return [session.text(".header"), ...forward].join("\n");
    }).alias("forward.ls");
  });
}
__name(apply, "apply");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Config,
  Rule,
  apply,
  name
});
//# sourceMappingURL=index.js.map
