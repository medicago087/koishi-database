{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { distance } from 'fastest-levenshtein'\nimport { Awaitable, Context, Next, Schema, Session } from 'koishi'\n\ndeclare module 'koishi' {\n  interface Context {\n    $suggest: SuggestionService\n  }\n\n  interface Session {\n    suggest(options: SuggestOptions): Promise<void>\n  }\n}\n\nContext.service('$suggest')\n\nexport interface SuggestOptions {\n  target: string\n  items: string[]\n  next?: Next\n  prefix?: string\n  suffix: string\n  minSimilarity?: number\n  apply: (this: Session, suggestion: string, next: Next) => Awaitable<void | string>\n}\n\nSession.prototype.suggest = function suggest(this: Session, options) {\n  const {\n    target,\n    items,\n    prefix = '',\n    suffix,\n    apply,\n    next = Next.compose,\n    minSimilarity = this.app.$suggest.config.minSimilarity,\n  } = options\n\n  const sendNext = async (callback: Next) => {\n    const result = await next(callback)\n    if (result) await this.send(result)\n  }\n\n  let suggestions: string[], minDistance = Infinity\n  for (const name of items) {\n    const dist = distance(name, target)\n    if (name.length <= 2 || dist > name.length * minSimilarity) continue\n    if (dist === minDistance) {\n      suggestions.push(name)\n    } else if (dist < minDistance) {\n      suggestions = [name]\n      minDistance = dist\n    }\n  }\n  if (!suggestions) return sendNext(async () => prefix)\n\n  const scope = this.scope\n  return sendNext(async () => {\n    const message = prefix + this.text('suggest.hint', [suggestions.map(text => {\n      return this.text('general.quote', [text])\n    }).join(this.text('general.or'))])\n    if (suggestions.length > 1) return message\n\n    const dispose = this.middleware((session, next) => {\n      dispose()\n      const message = session.content.trim()\n      if (message && message !== '.' && message !== '。') return next()\n      return session.withScope(scope, () => {\n        return apply.call(session, suggestions[0], next)\n      })\n    })\n\n    return message + suffix\n  })\n}\n\nclass SuggestionService {\n  constructor(public ctx: Context, public config: SuggestionService.Config) {\n    ctx.$suggest = this\n\n    ctx.i18n.define('zh', require('./locales/zh'))\n    ctx.i18n.define('en', require('./locales/en'))\n    ctx.i18n.define('ja', require('./locales/ja'))\n    ctx.i18n.define('fr', require('./locales/fr'))\n    ctx.i18n.define('zh-tw', require('./locales/zh-tw'))\n\n    ctx.middleware((session, next) => {\n      // use `!prefix` instead of `prefix === null` to prevent from blocking other middlewares\n      // we need to make sure that the user truly has the intension to call a command\n      const { argv, quote, subtype, parsed: { content, prefix, appel } } = session\n      if (argv.command || subtype !== 'private' && !prefix && !appel) return next()\n      const target = content.split(/\\s/, 1)[0].toLowerCase()\n      if (!target) return next()\n\n      return session.suggest({\n        target,\n        next,\n        items: this.getCommandNames(session),\n        prefix: session.text('suggest.command-prefix'),\n        suffix: session.text('suggest.command-suffix'),\n        async apply(suggestion, next) {\n          const newMessage = suggestion + content.slice(target.length) + (quote ? ' ' + quote.content : '')\n          return this.execute(newMessage, next)\n        },\n      })\n    })\n  }\n\n  getCommandNames(session: Session) {\n    return this.ctx.$commander._commandList\n      .filter(cmd => cmd.match(session) && !cmd.config.hidden)\n      .flatMap(cmd => cmd._aliases)\n  }\n}\n\nnamespace SuggestionService {\n  export interface Config {\n    minSimilarity?: number\n  }\n\n  export const Config: Schema<Config> = Schema.object({\n    minSimilarity: Schema.percent().default(0.4).description('用于模糊匹配的相似系数，应该是一个 0 到 1 之间的数值。数值越高，模糊匹配越严格。设置为 1 可以完全禁用模糊匹配。'),\n  })\n}\n\nexport default SuggestionService\n"],
  "mappings": "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",
  "names": ["next", "message", "SuggestionService"]
}
