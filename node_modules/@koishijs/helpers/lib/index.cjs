var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// packages/helpers/src/locales/zh.yml
var require_zh = __commonJS({
  "packages/helpers/src/locales/zh.yml"(exports, module2) {
    module2.exports = { internal: { "error-encountered": "发生未知错误：{0}" }, admin: { "user-option": "指定目标用户", "user-not-found": "未找到指定的用户。", "user-unchanged": "用户数据未改动。", "user-updated": "用户数据已修改。", "channel-option": "指定目标频道", "channel-not-found": "未找到指定的频道。", "channel-unchanged": "频道数据未改动。", "channel-updated": "频道数据已修改。", "not-in-group": "当前不在群组上下文中，请使用 -c 参数指定目标频道。" } };
  }
});

// packages/helpers/src/locales/en.yml
var require_en = __commonJS({
  "packages/helpers/src/locales/en.yml"(exports, module2) {
    module2.exports = { internal: { "error-encountered": "An unknown error has occurred: {0}" }, admin: { "user-not-found": "User not found.", "user-unchanged": "User data unchanged.", "user-updated": "User data updated.", "channel-not-found": "Channel not found.", "channel-unchanged": "Channel data unchanged.", "channel-updated": "Channel data updated.", "not-in-group": "Not in guild context, use -c to specify target channel." } };
  }
});

// packages/helpers/src/locales/ja.yml
var require_ja = __commonJS({
  "packages/helpers/src/locales/ja.yml"(exports, module2) {
    module2.exports = { internal: { "error-encountered": "不明なエラーが発生しました：{0}" }, admin: { "user-option": "特定のユーザーを指定する", "user-not-found": "指定されたユーザーが見つかりません。", "user-unchanged": "ユーザーデータは変更されていません。", "user-updated": "ユーザーデータが変更されました。", "channel-option": "特定のチャンネルを指定する", "channel-not-found": "指定されたチャンネルが見つかりません。", "channel-unchanged": "チャンネルデータは変更されていません。", "channel-updated": "チャンネルデータが変更されました。", "not-in-group": "ギルドコンテキストではありません。-c を使用して特定のチャンネルを指定します。" } };
  }
});

// packages/helpers/src/locales/fr.yml
var require_fr = __commonJS({
  "packages/helpers/src/locales/fr.yml"(exports, module2) {
    module2.exports = { internal: { "error-encountered": "Une erreur inconnue s'est produite : {0}" }, admin: { "user-not-found": "Utilisateur introuvable.", "user-unchanged": "Les données utilisateur n'ont pas été modifiées.", "user-updated": "Les données utilisateur ont été changées.", "channel-not-found": "Canel introuvable.", "channel-unchanged": "Les données du canel n'ont pas été modifiées.", "channel-updated": "Les données du canel ont été changées.", "not-in-group": "Vous n'êtes pas dans le contexte du groupe, tapez -c pour spécifier le canel cible." } };
  }
});

// packages/helpers/src/locales/zh-tw.yml
var require_zh_tw = __commonJS({
  "packages/helpers/src/locales/zh-tw.yml"(exports, module2) {
    module2.exports = { internal: { "error-encountered": "出現未知錯誤：{0}" }, admin: { "user-not-found": "找不到指定的用戶。", "user-unchanged": "用戶資料未更新。", "user-updated": "用戶資料已更新。", "channel-option": "指定目標頻道", "channel-not-found": "找不到指定的頻道。", "channel-unchanged": "頻道資料未更新。", "channel-updated": "頻道資料已更新。", "not-in-group": "當前不在群組上下文中，請使用 -c 參數指定目標頻道。" } };
  }
});

// packages/helpers/src/index.ts
var src_exports = {};
__export(src_exports, {
  adminChannel: () => adminChannel,
  adminUser: () => adminUser,
  handleError: () => handleError,
  parsePlatform: () => parsePlatform
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");
function parsePlatform(target) {
  const index = target.indexOf(":");
  const platform = target.slice(0, index);
  const id = target.slice(index + 1);
  return [platform, id];
}
__name(parsePlatform, "parsePlatform");
var refs = /* @__PURE__ */ new WeakSet();
function loadI18n(app) {
  if (refs.has(app))
    return;
  refs.add(app);
  app.i18n.define("zh", require_zh());
  app.i18n.define("en", require_en());
  app.i18n.define("ja", require_ja());
  app.i18n.define("fr", require_fr());
  app.i18n.define("zh-tw", require_zh_tw());
}
__name(loadI18n, "loadI18n");
function handleError(cmd, handler) {
  loadI18n(cmd.ctx.app);
  return cmd.action(async (argv, ...args) => {
    try {
      return await argv.next();
    } catch (error) {
      if (handler)
        return handler(error, argv);
      return argv.session.text("internal.error-encountered", error.message);
    }
  }, true);
}
__name(handleError, "handleError");
function adminUser(cmd) {
  let notFound = false;
  loadI18n(cmd.ctx.app);
  async function setTarget(argv) {
    const { options, session } = argv;
    const { user, app } = session;
    if (!options.user)
      return;
    const [platform, userId] = parsePlatform(options.user);
    if (session.user[platform] === userId)
      return;
    const fields = session.collect("user", argv);
    const data = await app.database.getUser(platform, userId, [...fields]);
    if (!data) {
      notFound = true;
      const temp = app.model.tables.user.create();
      temp[platform] = userId;
      session.user = (0, import_koishi.observe)(temp, async (diff) => {
        await app.database.createUser(platform, userId, diff);
      }, `user ${options.user}`);
    } else if (user.authority <= data.authority) {
      return session.text("internal.low-authority");
    } else {
      session.user = (0, import_koishi.observe)(data, async (diff) => {
        await app.database.setUser(platform, userId, diff);
      }, `user ${options.user}`);
    }
  }
  __name(setTarget, "setTarget");
  return cmd.option("user", "-u [user:user]", { authority: 3, descPath: "admin.user-option" }).userFields(["authority"]).userFields(({ session, options }, fields) => {
    const platform = options.user ? options.user.split(":")[0] : session.platform;
    fields.add(platform);
  }).action(async (argv, ...args) => {
    const { session, next } = argv;
    const user = session.user;
    const output = await setTarget(argv);
    if (output)
      return output;
    try {
      const diffKeys = Object.keys(session.user.$diff);
      const result = await next();
      if (notFound && !session.user.authority) {
        return session.text("admin.user-not-found");
      } else if (typeof result === "string") {
        return result;
      } else if (!(0, import_koishi.difference)(Object.keys(session.user.$diff), diffKeys).length) {
        return session.text("admin.user-unchanged");
      } else if (session.user !== user && session.user.authority >= user.authority) {
        return session.text("internal.low-authority");
      }
      await session.user.$update();
      return session.text("admin.user-updated");
    } finally {
      session.user = user;
    }
  }, true);
}
__name(adminUser, "adminUser");
function adminChannel(cmd) {
  let notFound = false;
  loadI18n(cmd.ctx.app);
  async function setTarget(argv) {
    const { options, session } = argv;
    const { app } = session;
    if (session.subtype === "private" && !options.channel) {
      return session.text("admin.not-in-group");
    }
    const { channel = session.cid } = options;
    if (channel === session.cid && !session.channel["$detached"])
      return;
    const [platform, channelId] = parsePlatform(channel);
    const fields = argv.session.collect("channel", argv);
    const data = await app.database.getChannel(platform, channelId, [...fields]);
    if (!data) {
      notFound = true;
      const temp = app.model.tables.channel.create();
      temp.platform = platform;
      temp.id = channelId;
      session.channel = (0, import_koishi.observe)(temp, async (diff) => {
        await app.database.createChannel(platform, channelId, diff);
      }, `channel ${channel}`);
    } else {
      session.channel = (0, import_koishi.observe)(data, async (diff) => {
        await app.database.setChannel(platform, channelId, diff);
      }, `channel ${channel}`);
    }
  }
  __name(setTarget, "setTarget");
  return cmd.channelFields(["assignee"]).option("channel", "-c [channel:channel]", { authority: 3, descPath: "admin.channel-option" }).action(async (argv, ...args) => {
    const { session, next } = argv;
    const channel = session.channel;
    const output = await setTarget(argv);
    if (output)
      return output;
    try {
      const diffKeys = Object.keys(session.channel.$diff);
      const result = await next();
      if (notFound && !session.channel.assignee) {
        return session.text("admin.channel-not-found");
      } else if (typeof result === "string") {
        return result;
      } else if (!(0, import_koishi.difference)(Object.keys(session.channel.$diff), diffKeys).length) {
        return session.text("admin.channel-unchanged");
      }
      await session.channel.$update();
      return session.text("admin.channel-updated");
    } finally {
      session.channel = channel;
    }
  }, true);
}
__name(adminChannel, "adminChannel");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  adminChannel,
  adminUser,
  handleError,
  parsePlatform
});
//# sourceMappingURL=index.cjs.map
