{
  "version": 3,
  "sources": ["../src/index.ts", "../src/bot.ts"],
  "sourcesContent": ["import { Context, Dict, observe, Schema, User } from 'koishi'\nimport { DataService, SocketHandle } from '@koishijs/plugin-console'\nimport { resolve } from 'path'\nimport { SandboxBot, words } from './bot'\nimport zh from './locales/zh.yml'\n\ndeclare module 'koishi' {\n  interface User {\n    sandbox: string\n  }\n\n  namespace Session {\n    interface Payload {\n      handle: SocketHandle\n    }\n  }\n}\n\ndeclare module '@koishijs/plugin-console' {\n  interface SocketHandle {\n    sandbox: SandboxBot\n  }\n\n  interface Events {\n    'sandbox/message'(this: SocketHandle, user: string, channel: string, content: string): void\n    'sandbox/user'(this: SocketHandle, name: string, data: Partial<User>): void\n  }\n\n  namespace Console {\n    interface Services {\n      users: UserProvider\n    }\n  }\n}\n\nexport interface Message {\n  user: string\n  channel: string\n  content: string\n}\n\nexport class UserProvider extends DataService<Dict<User>> {\n  static using = ['database'] as const\n  private task: Promise<Dict<User.Observed>>\n\n  constructor(ctx: Context) {\n    super(ctx, 'users', { authority: 4 })\n\n    ctx.console.addListener('sandbox/user', async (name, data) => {\n      const users = await this.get()\n      if (!users[name]) {\n        if (!data) return\n        const user = await this.ctx.database.createUser('sandbox', name, {\n          authority: 1,\n          ...data,\n        })\n        return this.observe(user, users)\n      } else if (!data) {\n        delete users[name]\n        this.ctx.$internal._userCache.set('sandbox', 'sandbox:' + name, null)\n        return this.ctx.database.remove('user', { sandbox: name })\n      }\n      Object.assign(users[name], data)\n      return users[name].$update()\n    }, { authority: 4 })\n  }\n\n  observe(user: User, users: Dict<User.Observed>) {\n    const uid = 'sandbox:' + user.sandbox\n    users[user.sandbox] = observe(user, async (diff) => {\n      await this.ctx.database.setUser('sandbox', user.sandbox, diff)\n      this.refresh()\n    })\n    this.ctx.$internal._userCache.set('sandbox', uid, users[user.sandbox])\n  }\n\n  async prepare() {\n    const data = await this.ctx.database.getUser('sandbox', words)\n    const result: Dict<User.Observed> = {}\n    for (const user of data) {\n      this.observe(user, result)\n    }\n    return result\n  }\n\n  stop() {\n    // keep user cache active until disposed\n    this.ctx.$internal._userCache.delete('sandbox')\n  }\n\n  async get() {\n    return this.task ||= this.prepare()\n  }\n}\n\nexport const name = 'sandbox'\n\nexport const using = ['console']\n\nexport interface Config {}\n\nexport const Config: Schema<Config> = Schema.object({})\n\nexport function apply(ctx: Context, config: Config) {\n  ctx.plugin(SandboxBot)\n  ctx.plugin(UserProvider)\n\n  ctx.console.addEntry(process.env.KOISHI_BASE ? [\n    process.env.KOISHI_BASE + '/dist/index.js',\n    process.env.KOISHI_BASE + '/dist/style.css',\n  ] : process.env.KOISHI_ENV === 'browser' ? [\n    // @ts-ignore\n    import.meta.url.replace(/\\/src\\/[^/]+$/, '/client/index.ts'),\n  ] : {\n    dev: resolve(__dirname, '../client/index.ts'),\n    prod: resolve(__dirname, '../dist'),\n  })\n\n  ctx.i18n.define('zh', zh)\n\n  ctx.platform('sandbox').command('clear')\n    .action(({ session }) => {\n      session.handle.send({\n        type: 'sandbox/clear',\n      })\n    })\n}\n", "import { Bot, Context, defineProperty, Fragment, Messenger, Random, segment } from 'koishi'\n\nclass SandboxMessenger extends Messenger<SandboxBot> {\n  private buffer = ''\n\n  async flush() {\n    if (!this.buffer.trim()) return\n    const content = await segment.transformAsync(this.buffer.trim(), {\n      image: async (data) => {\n        if (data.url.startsWith('file://') && process.env.KOISHI_ENV !== 'browser') {\n          const file = await this.bot.ctx.http.file(data.url)\n          return segment.image(`data:${file.mime};base64,` + Buffer.from(file.data).toString('base64'))\n        }\n        // for backward compatibility\n        if (!data.url.startsWith('base64://')) return segment('image', data)\n        return segment.image('data:image/png;base64,' + data.url.slice(9))\n      },\n    })\n    const session = this.bot.session(this.session)\n    session.messageId = Random.id()\n    session.app.console.broadcast('sandbox', {\n      content,\n      user: 'Koishi',\n      channel: session.channelId,\n      id: session.messageId,\n    })\n    this.results.push(session)\n    this.buffer = ''\n  }\n\n  async visit(element: segment) {\n    const { type, children } = element\n    if (type === 'message' || type === 'figure') {\n      await this.flush()\n      await this.render(children)\n      await this.flush()\n    } else {\n      this.buffer += element.toString()\n    }\n  }\n}\n\nexport class SandboxBot extends Bot {\n  username = 'koishi'\n  hidden = true\n  internal = {}\n\n  constructor(public ctx: Context) {\n    super(ctx, {\n      platform: 'sandbox',\n      selfId: 'koishi',\n    })\n\n    const self = this\n    ctx.console.addListener('sandbox/message', async function (user, channel, content) {\n      const id = Random.id()\n      ctx.console.broadcast('sandbox', { id, content, user, channel })\n      const session = self.session({\n        userId: user,\n        content,\n        messageId: id,\n        channelId: channel,\n        guildId: channel === '@' + user ? undefined : channel,\n        type: 'message',\n        subtype: channel === '@' + user ? 'private' : 'group',\n        author: {\n          userId: user,\n          username: user,\n        },\n      })\n      defineProperty(session, 'handle', this)\n      self.dispatch(session)\n    }, { authority: 4 })\n  }\n\n  async sendMessage(channelId: string, fragment: Fragment, guildId?: string) {\n    return new SandboxMessenger(this, channelId, guildId).send(fragment)\n  }\n\n  async deleteMessage(channelId: string, messageId: string) {\n    this.ctx.console.broadcast('sandbox/delete', { id: messageId, channel: channelId })\n  }\n\n  async getGuildMemberList(guildId: string) {\n    return words.map((word) => ({\n      nickname: word,\n      userId: word,\n    }))\n  }\n}\n\nexport const words = [\n  'Alice', 'Bob', 'Carol', 'Dave', 'Eve', 'Frank', 'Grace',\n  'Hank', 'Ivy', 'Jack', 'Kathy', 'Lily', 'Mandy', 'Nancy',\n  'Oscar', 'Peggy', 'Quinn', 'Randy', 'Sandy', 'Toby',\n  'Uma', 'Vicky', 'Wendy', 'Xander', 'Yvonne', 'Zoe',\n]\n"],
  "mappings": "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",
  "names": ["import_koishi", "name"]
}
