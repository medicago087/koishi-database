import { Context, Dict, Schema, User } from 'koishi';
import { DataService, SocketHandle } from '@koishijs/plugin-console';
import { SandboxBot } from './bot';
declare module 'koishi' {
    interface User {
        sandbox: string;
    }
    namespace Session {
        interface Payload {
            handle: SocketHandle;
        }
    }
}
declare module '@koishijs/plugin-console' {
    interface SocketHandle {
        sandbox: SandboxBot;
    }
    interface Events {
        'sandbox/message'(this: SocketHandle, user: string, channel: string, content: string): void;
        'sandbox/user'(this: SocketHandle, name: string, data: Partial<User>): void;
    }
    namespace Console {
        interface Services {
            users: UserProvider;
        }
    }
}
export interface Message {
    user: string;
    channel: string;
    content: string;
}
export declare class UserProvider extends DataService<Dict<User>> {
    static using: readonly ["database"];
    private task;
    constructor(ctx: Context);
    observe(user: User, users: Dict<User.Observed>): void;
    prepare(): Promise<Dict<User.Observed<keyof User>, string>>;
    stop(): void;
    get(): Promise<Dict<User.Observed<keyof User>, string>>;
}
export declare const name = "sandbox";
export declare const using: string[];
export interface Config {
}
export declare const Config: Schema<Config>;
export declare function apply(ctx: Context, config: Config): void;
