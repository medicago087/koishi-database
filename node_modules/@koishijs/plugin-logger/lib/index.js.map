{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { Context, Logger, remove, Schema, Time } from 'koishi'\nimport { DataService } from '@koishijs/plugin-console'\nimport { resolve } from 'path'\nimport { promises as fsp, mkdirSync, readdirSync } from 'fs'\nimport { FileHandle } from 'fs/promises'\nimport {} from '@koishijs/cli'\n\nconst { open, rm } = fsp\n\ndeclare module '@koishijs/plugin-console' {\n  namespace Console {\n    interface Services {\n      logs: LogProvider\n    }\n  }\n}\n\nclass LogProvider extends DataService<string[]> {\n  static using = ['console'] as const\n\n  root: string\n  date: string\n  files: number[] = []\n  writer: FileWriter\n\n  constructor(ctx: Context, private config: LogProvider.Config = {}) {\n    super(ctx, 'logs', { authority: 4 })\n\n    ctx.console.addEntry({\n      dev: resolve(__dirname, '../client/index.ts'),\n      prod: resolve(__dirname, '../dist'),\n    })\n\n    this.ctx.on('ready', () => {\n      this.prepareWriter()\n      this.prepareLogger()\n    }, true)\n  }\n\n  prepareWriter() {\n    this.root = resolve(this.ctx.baseDir, this.config.root)\n    mkdirSync(this.root, { recursive: true })\n\n    for (const filename of readdirSync(this.root)) {\n      if (!filename.endsWith('.log')) continue\n      this.files.push(Time.getDateNumber(new Date(filename.slice(0, -4)), 0))\n    }\n\n    this.createFile()\n\n    this.ctx.on('dispose', () => {\n      this.writer?.close()\n      this.writer = null\n    })\n  }\n\n  createFile() {\n    this.date = Time.template('yyyy-MM-dd')\n    this.writer = new FileWriter(`${this.root}/${this.date}.log`)\n\n    const { maxAge } = this.config\n    if (!maxAge) return\n\n    const current = Time.getDateNumber(new Date(), 0)\n    this.files = this.files.filter((date) => {\n      if (date >= current - maxAge) return true\n      rm(`${this.root}/${Time.template('yyyy-MM-dd', Time.fromDateNumber(date, 0))}.log`)\n    })\n  }\n\n  prepareLogger() {\n    if (this.ctx.prologue) {\n      for (const line of this.ctx.prologue) {\n        this.printText(line)\n      }\n      this.ctx.root.prologue = null\n    }\n\n    const target: Logger.Target = {\n      colors: 3,\n      showTime: 'yyyy-MM-dd hh:mm:ss',\n      print: this.printText.bind(this),\n    }\n\n    Logger.targets.push(target)\n\n    this.ctx.on('dispose', () => {\n      remove(Logger.targets, target)\n    })\n  }\n\n  printText(text: string) {\n    if (!text.startsWith(this.date)) {\n      this.writer.close()\n      this.createFile()\n    }\n    this.writer.write(text)\n    this.patch([text])\n  }\n\n  async get() {\n    return this.writer?.read()\n  }\n}\n\nnamespace LogProvider {\n  export interface Config {\n    root?: string\n    maxAge?: number\n  }\n\n  export const Config: Schema<Config> = Schema.object({\n    root: Schema.string().default('logs').description('存放输出日志的本地目录。'),\n    maxAge: Schema.natural().default(30).description('日志文件保存的最大天数。'),\n  })\n}\n\nexport default LogProvider\n\nclass FileWriter {\n  private task: Promise<FileHandle>\n  private content: string[] = []\n\n  constructor(path: string) {\n    this.task = open(path, 'a+').then(async (handle) => {\n      const text = await handle.readFile('utf-8')\n      if (text) this.content = text.split(/\\n(?=\\S)/g)\n      return handle\n    })\n  }\n\n  async read() {\n    await this.task\n    return this.content\n  }\n\n  async write(text: string) {\n    const handle = await this.task\n    await handle.write(text + '\\n')\n    this.content.push(text)\n  }\n\n  async close() {\n    const handle = await this.task\n    await handle.close()\n  }\n}\n"],
  "mappings": "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",
  "names": ["fsp", "LogProvider"]
}
