import { Context, Dict, EffectScope, MainScope, Schema } from 'koishi';
import { DataService } from '@koishijs/plugin-console';
import { Manifest, PackageJson } from '@koishijs/registry';
export declare abstract class PackageProvider extends DataService<Dict<PackageProvider.Data>> {
    constructor(ctx: Context);
    abstract getManifest(name: string): Promise<Manifest>;
    update(state: EffectScope): void;
    parseRuntime(runtime: MainScope, result: PackageProvider.Data): void;
}
export declare namespace PackageProvider {
    interface Data extends Partial<PackageJson> {
        id?: number;
        portable?: boolean;
        forkable?: boolean;
        shortname?: string;
        schema?: Schema;
        usage?: string;
        workspace?: boolean;
        manifest?: Manifest;
    }
}
