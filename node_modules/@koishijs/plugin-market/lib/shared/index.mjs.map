{
  "version": 3,
  "sources": ["../../src/shared/market.ts", "../../src/shared/packages.ts", "../../src/shared/service.ts", "../../src/shared/writer.ts"],
  "sourcesContent": ["import { Context, Dict, Logger } from 'koishi'\nimport { DataService } from '@koishijs/plugin-console'\nimport { AnalyzedPackage, MarketResult } from '@koishijs/registry'\n\ndeclare module '@koishijs/plugin-console' {\n  interface Events {\n    'market/refresh'(): void\n  }\n}\n\nconst logger = new Logger('market')\n\nexport abstract class MarketProvider extends DataService<MarketProvider.Payload> {\n  private _task: Promise<any>\n  protected _error: any\n\n  constructor(ctx: Context) {\n    super(ctx, 'market', { authority: 4 })\n\n    ctx.console.addListener('market/refresh', () => this.start(), { authority: 4 })\n  }\n\n  start() {\n    this._task = null\n  }\n\n  abstract collect(): Promise<void | MarketResult>\n\n  async prepare(): Promise<MarketResult> {\n    return this._task ||= this.collect().catch((error) => {\n      logger.warn(error)\n      this._error = error\n    })\n  }\n}\n\nexport namespace MarketProvider {\n  export interface Payload {\n    data: Dict<AnalyzedPackage>\n    total: number\n    failed: number\n    progress: number\n    gravatar?: string\n  }\n}\n", "import { Context, Dict, EffectScope, MainScope, Schema } from 'koishi'\nimport { DataService } from '@koishijs/plugin-console'\nimport { Manifest, PackageJson } from '@koishijs/registry'\n\nexport abstract class PackageProvider extends DataService<Dict<PackageProvider.Data>> {\n  constructor(ctx: Context) {\n    super(ctx, 'packages', { authority: 4 })\n\n    ctx.on('internal/runtime', (runtime) => {\n      this.update(runtime)\n    })\n\n    ctx.on('internal/fork', (fork) => {\n      this.update(fork)\n    })\n  }\n\n  abstract getManifest(name: string): Promise<Manifest>\n\n  update(state: EffectScope) {\n    this.refresh()\n  }\n\n  parseRuntime(runtime: MainScope, result: PackageProvider.Data) {\n    result.id = runtime.uid\n    result.forkable = runtime.isForkable\n  }\n}\n\nexport namespace PackageProvider {\n  export interface Data extends Partial<PackageJson> {\n    id?: number\n    portable?: boolean\n    forkable?: boolean\n    shortname?: string\n    schema?: Schema\n    usage?: string\n    workspace?: boolean\n    manifest?: Manifest\n  }\n}\n", "import { DataService } from '@koishijs/plugin-console'\nimport { Context, Dict } from 'koishi'\n\nexport class ServiceProvider extends DataService<Dict<string>> {\n  constructor(ctx: Context) {\n    super(ctx, 'services')\n    ctx.on('internal/service', () => this.refresh())\n  }\n\n  async get() {\n    const services = {} as Dict<string>\n    const descriptors = Object.getOwnPropertyDescriptors(Context.prototype)\n    for (const key in descriptors) {\n      const desc = descriptors[key]\n      if ('value' in desc) continue\n      const uid = this.ctx[key]?.[Context.source]?.state.uid\n      if (uid) services[key] = uid\n    }\n    return services\n  }\n}\n", "import { DataService } from '@koishijs/plugin-console'\nimport { Context, remove } from 'koishi'\nimport { Loader } from '@koishijs/loader'\n\ndeclare module '@koishijs/plugin-console' {\n  interface Events {\n    'manager/app-reload'(config: any): void\n    'manager/teleport'(source: string, target: string, index: number): void\n    'manager/reload'(path: string, config: any, key?: string): void\n    'manager/unload'(path: string, config: any, key?: string): void\n    'manager/remove'(path: string): void\n    'manager/group'(path: string): void\n    'manager/alias'(path: string, alias: string): void\n    'manager/meta'(path: string, config: any): void\n  }\n}\n\nexport function splitPath(path: string) {\n  return path.split(/\\/?(@[\\w-]+\\/[\\w:-]+|[\\w:-]+)\\/?/).filter(Boolean)\n}\n\nfunction insertKey(object: {}, temp: {}, rest: string[]) {\n  for (const key of rest) {\n    temp[key] = object[key]\n    delete object[key]\n  }\n  Object.assign(object, temp)\n}\n\nfunction rename(object: any, old: string, neo: string, value: any) {\n  const keys = Object.keys(object)\n  const index = keys.findIndex(key => key === old || key === '~' + old)\n  const rest = index < 0 ? [] : keys.slice(index + 1)\n  const temp = { [neo]: value }\n  delete object[old]\n  delete object['~' + old]\n  insertKey(object, temp, rest)\n}\n\nfunction dropKey(plugins: {}, name: string) {\n  if (!(name in plugins)) {\n    name = '~' + name\n  }\n  const value = plugins[name]\n  delete plugins[name]\n  return { [name]: value }\n}\n\nexport class ConfigWriter extends DataService<Context.Config> {\n  static using = ['console.packages']\n\n  protected loader: Loader\n  protected plugins: {}\n\n  constructor(ctx: Context) {\n    super(ctx, 'config', { authority: 4 })\n    this.loader = ctx.loader\n    this.plugins = ctx.loader.config.plugins\n\n    ctx.console.addListener('manager/app-reload', (config) => {\n      this.reloadApp(config)\n    }, { authority: 4 })\n\n    for (const key of ['teleport', 'reload', 'unload', 'remove', 'group', 'meta', 'alias'] as const) {\n      ctx.console.addListener(`manager/${key}`, this[key].bind(this), { authority: 4 })\n    }\n\n    ctx.on('config', () => this.refresh())\n  }\n\n  getGroup(plugins: any, ctx: Context) {\n    const result = { ...plugins }\n    for (const key in plugins) {\n      if (key.startsWith('$')) continue\n      const value = plugins[key]\n      const name = key.split(':', 1)[0].replace(/^~/, '')\n\n      // handle plugin groups\n      if (name === 'group') {\n        const fork = ctx.state[Loader.kRecord][key]\n        result[key] = this.getGroup(value, fork.ctx)\n      }\n    }\n    return result\n  }\n\n  async get() {\n    const result = { ...this.loader.config }\n    result.plugins = this.getGroup(result.plugins, this.loader.entry)\n    return result\n  }\n\n  reloadApp(config: any) {\n    this.loader.config = config\n    this.loader.config.plugins = this.plugins\n    this.loader.writeConfig()\n    this.loader.fullReload()\n  }\n\n  private resolve(path: string) {\n    const segments = splitPath(path)\n    if (path.endsWith('/')) segments.push('')\n    let ctx = this.loader.entry\n    let name = segments.shift()\n    while (segments.length) {\n      ctx = ctx.state[Loader.kRecord][name].ctx\n      name = segments.shift()\n    }\n    return [ctx.state, name] as const\n  }\n\n  alias(path: string, alias: string) {\n    const [parent, oldKey] = this.resolve(path)\n    let config: any\n    let newKey = oldKey.split(':', 1)[0] + (alias ? ':' : '') + alias\n    const record = parent[Loader.kRecord]\n    const fork = record[oldKey]\n    if (fork) {\n      delete record[oldKey]\n      record[newKey] = fork\n      fork.alias = alias\n      fork.ctx.emit('internal/fork', fork)\n      config = parent.config[oldKey]\n    } else {\n      newKey = '~' + newKey\n      config = parent.config['~' + oldKey]\n    }\n    rename(parent.config, oldKey, newKey, config)\n    this.loader.writeConfig()\n  }\n\n  meta(path: string, config: any) {\n    const [parent, name] = this.resolve(path)\n    const target = path ? parent.config[name] : parent.config\n    for (const key of Object.keys(config)) {\n      if (config[key] === null) {\n        delete target[key]\n      } else {\n        target[key] = config[key]\n      }\n    }\n    this.loader.writeConfig()\n  }\n\n  async reload(path: string, config: any, newKey?: string) {\n    const [parent, oldKey] = this.resolve(path)\n    if (newKey) {\n      this.loader.unloadPlugin(parent.ctx, oldKey)\n    }\n    await this.loader.reloadPlugin(parent.ctx, newKey || oldKey, config)\n    rename(parent.config, oldKey, newKey || oldKey, config)\n    this.loader.writeConfig()\n    this.refresh()\n  }\n\n  unload(path: string, config = {}, newKey?: string) {\n    const [parent, oldKey] = this.resolve(path)\n    this.loader.unloadPlugin(parent.ctx, oldKey)\n    rename(parent.config, oldKey, '~' + (newKey || oldKey), config)\n    this.loader.writeConfig()\n    this.refresh()\n  }\n\n  remove(path: string) {\n    const [parent, key] = this.resolve(path)\n    this.loader.unloadPlugin(parent.ctx, key)\n    delete parent.config[key]\n    delete parent.config['~' + key]\n    this.loader.writeConfig()\n    this.refresh()\n  }\n\n  async group(path: string) {\n    const [parent, oldKey] = this.resolve(path)\n    const config = parent.config[oldKey] = {}\n    await this.loader.reloadPlugin(parent.ctx, oldKey, config)\n    this.loader.writeConfig()\n    this.refresh()\n  }\n\n  teleport(source: string, target: string, index: number) {\n    const [parentS, oldKey] = this.resolve(source)\n    const [parentT] = this.resolve(target ? target + '/' : '')\n\n    // teleport fork\n    const fork = parentS[Loader.kRecord][oldKey]\n    if (fork && parentS !== parentT) {\n      delete parentS[Loader.kRecord][oldKey]\n      parentT[Loader.kRecord][oldKey] = fork\n      remove(parentS.disposables, fork.dispose)\n      parentT.disposables.push(fork.dispose)\n      fork.parent = parentT.ctx\n      Object.setPrototypeOf(fork.ctx, parentT.ctx)\n      fork.ctx.emit('internal/fork', fork)\n      if (fork.runtime.using.some(name => parentS[name] !== parentT[name])) {\n        fork.restart()\n      }\n    }\n\n    // teleport config\n    const temp = dropKey(parentS.config, oldKey)\n    const rest = Object.keys(parentT.config).slice(index)\n    insertKey(parentT.config, temp, rest)\n    this.loader.writeConfig()\n  }\n}\n"],
  "mappings": "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",
  "names": ["DataService", "DataService", "DataService", "Context", "DataService", "Context", "DataService", "DataService"]
}
