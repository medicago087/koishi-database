import { DataService } from '@koishijs/plugin-console';
import { Context } from 'koishi';
import { Loader } from '@koishijs/loader';
declare module '@koishijs/plugin-console' {
    interface Events {
        'manager/app-reload'(config: any): void;
        'manager/teleport'(source: string, target: string, index: number): void;
        'manager/reload'(path: string, config: any, key?: string): void;
        'manager/unload'(path: string, config: any, key?: string): void;
        'manager/remove'(path: string): void;
        'manager/group'(path: string): void;
        'manager/alias'(path: string, alias: string): void;
        'manager/meta'(path: string, config: any): void;
    }
}
export declare function splitPath(path: string): string[];
export declare class ConfigWriter extends DataService<Context.Config> {
    static using: string[];
    protected loader: Loader;
    protected plugins: {};
    constructor(ctx: Context);
    getGroup(plugins: any, ctx: Context): any;
    get(): Promise<{
        assets?: Context.Config.Assets;
        name?: string;
        plugins?: import("cosmokit").Dict<any, string>;
        timezoneOffset?: number;
        stackTraceLimit?: number;
        logger?: import("@koishijs/cli/lib/worker/logger").Config;
        watch?: import("@koishijs/cli/lib/worker/watcher").default.Config;
        locale?: string;
        prefix?: import("koishi").Computed<string | string[]>;
        nickname?: string | string[];
        autoAssign?: import("koishi").Computed<boolean | Promise<boolean>>;
        autoAuthorize?: import("koishi").Computed<number | Promise<number>>;
        delay?: Context.Config.DelayConfig;
        maxListeners?: number;
        prettyErrors?: boolean;
        request?: import("cordis-axios").Quester.Config;
        host?: string;
        port?: number;
        maxPort?: number;
        selfUrl?: string;
        exitCommand?: boolean;
        autoRestart?: boolean;
    }>;
    reloadApp(config: any): void;
    private resolve;
    alias(path: string, alias: string): void;
    meta(path: string, config: any): void;
    reload(path: string, config: any, newKey?: string): Promise<void>;
    unload(path: string, config?: {}, newKey?: string): void;
    remove(path: string): void;
    group(path: string): Promise<void>;
    teleport(source: string, target: string, index: number): void;
}
