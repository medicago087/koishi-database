import { Context, Dict, Quester, Schema } from 'koishi';
import { DataService } from '@koishijs/plugin-console';
import { PackageJson } from '@koishijs/registry';
declare module '@koishijs/plugin-console' {
    interface Events {
        'market/install'(deps: Dict<string>): Promise<number>;
    }
}
export interface Dependency {
    /**
     * requested semver range
     * @example `^1.2.3` -> `1.2.3`
     */
    request: string;
    /**
     * installed package version
     * @example `1.2.5`
     */
    resolved?: string;
    /** whether it is a workspace package */
    workspace?: boolean;
    /** all available versions */
    versions?: Dict<Partial<PackageJson>>;
    /** latest version */
    latest?: string;
    /** valid (unsupported) syntax */
    invalid?: boolean;
}
declare class Installer extends DataService<Dict<Dependency>> {
    ctx: Context;
    config: Installer.Config;
    http: Quester;
    registry: string;
    private agent;
    private manifest;
    private task;
    constructor(ctx: Context, config: Installer.Config);
    get cwd(): string;
    prepare(): Promise<void>;
    start(): Promise<void>;
    private _get;
    get(force?: boolean): Promise<Dict<Dependency, string>>;
    exec(command: string, args: string[]): Promise<number>;
    override(deps: Dict<string>): Promise<void>;
    install(): Promise<number>;
    installDep: (deps: Dict<string>) => Promise<number>;
}
declare namespace Installer {
    interface Config {
        endpoint?: string;
        timeout?: number;
    }
    const Config: Schema<Config>;
}
export default Installer;
