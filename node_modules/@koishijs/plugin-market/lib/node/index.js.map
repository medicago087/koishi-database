{
  "version": 3,
  "sources": ["../../src/node/index.ts", "../../src/node/installer.ts", "../../src/node/utils.ts", "../../src/node/market.ts", "../../src/node/packages.ts"],
  "sourcesContent": ["import { Context, Schema } from 'koishi'\nimport { resolve } from 'path'\nimport Installer from './installer'\nimport MarketProvider from './market'\nimport PackageProvider from './packages'\nimport { ConfigWriter, ServiceProvider } from '../shared'\n\nexport * from '../shared'\n\nexport { Installer }\n\ndeclare module '@koishijs/plugin-console' {\n  namespace Console {\n    interface Services {\n      dependencies: Installer\n    }\n  }\n}\n\nexport const name = 'manager'\nexport const using = ['console', 'loader'] as const\n\nexport interface Config {\n  registry?: Installer.Config\n  search?: MarketProvider.Config\n}\n\nexport const Config: Schema<Config> = Schema.intersect([\n  Schema.object({\n    registry: Installer.Config,\n    search: MarketProvider.Config,\n  }),\n])\n\nexport function apply(ctx: Context, config: Config) {\n  if (!ctx.loader.writable) {\n    return ctx.logger('manager').warn('manager is only available for json/yaml config file')\n  }\n\n  ctx.plugin(Installer, config.registry)\n  ctx.plugin(MarketProvider, config.search)\n  ctx.plugin(PackageProvider)\n  ctx.plugin(ServiceProvider)\n  ctx.plugin(ConfigWriter)\n\n  ctx.console.addEntry({\n    dev: resolve(__dirname, '../../client/index.ts'),\n    prod: resolve(__dirname, '../../dist'),\n  })\n}\n", "import { Context, Dict, Logger, pick, Quester, Schema, Time, valueMap } from 'koishi'\nimport { DataService } from '@koishijs/plugin-console'\nimport { PackageJson, Registry } from '@koishijs/registry'\nimport { resolve } from 'path'\nimport { promises as fsp } from 'fs'\nimport { loadManifest } from './utils'\nimport { compare, satisfies, valid } from 'semver'\nimport {} from '@koishijs/loader'\nimport getRegistry from 'get-registry'\nimport which from 'which-pm-runs'\nimport spawn from 'execa'\nimport pMap from 'p-map'\n\ndeclare module '@koishijs/plugin-console' {\n  interface Events {\n    'market/install'(deps: Dict<string>): Promise<number>\n  }\n}\n\nconst logger = new Logger('market')\n\nexport interface Dependency {\n  /**\n   * requested semver range\n   * @example `^1.2.3` -> `1.2.3`\n   */\n  request: string\n  /**\n   * installed package version\n   * @example `1.2.5`\n   */\n  resolved?: string\n  /** whether it is a workspace package */\n  workspace?: boolean\n  /** all available versions */\n  versions?: Dict<Partial<PackageJson>>\n  /** latest version */\n  latest?: string\n  /** valid (unsupported) syntax */\n  invalid?: boolean\n}\n\nclass Installer extends DataService<Dict<Dependency>> {\n  public http: Quester\n  public registry: string\n\n  private agent = which()?.name || 'npm'\n  private manifest: PackageJson\n  private task: Promise<Dict<Dependency>>\n\n  constructor(public ctx: Context, public config: Installer.Config) {\n    super(ctx, 'dependencies', { authority: 4 })\n    this.manifest = loadManifest(this.cwd)\n\n    ctx.console.addListener('market/install', this.installDep, { authority: 4 })\n  }\n\n  get cwd() {\n    return this.ctx.baseDir\n  }\n\n  async prepare() {\n    const { endpoint, timeout } = this.config\n    this.registry = endpoint || await getRegistry()\n    this.http = this.ctx.http.extend({ endpoint: this.registry, timeout })\n  }\n\n  async start() {\n    await this.prepare()\n  }\n\n  private async _get() {\n    const result = valueMap(this.manifest.dependencies, (request) => {\n      return { request: request.replace(/^[~^]/, '') } as Dependency\n    })\n    await pMap(Object.keys(result), async (name) => {\n      try {\n        // some dependencies may be left with no local installation\n        const meta = loadManifest(name)\n        result[name].resolved = meta.version\n        result[name].workspace = meta.$workspace\n        if (meta.$workspace) return\n      } catch {}\n\n      if (!valid(result[name].request)) {\n        result[name].invalid = true\n        return\n      }\n\n      try {\n        const registry = await this.http.get<Registry>(`/${name}`)\n        const entries = Object.values(registry.versions)\n          .map(item => [item.version, pick(item, ['peerDependencies', 'peerDependenciesMeta'])] as const)\n          .sort(([a], [b]) => compare(b, a))\n        result[name].latest = entries[0][0]\n        result[name].versions = Object.fromEntries(entries)\n      } catch (e) {\n        logger.warn(e.message)\n      }\n    }, { concurrency: 10 })\n    return result\n  }\n\n  async get(force = false) {\n    if (!force && this.task) return this.task\n    return this.task = this._get()\n  }\n\n  async exec(command: string, args: string[]) {\n    return new Promise<number>((resolve) => {\n      const child = spawn(command, args, { cwd: this.cwd })\n      child.on('exit', (code) => resolve(code))\n      child.on('error', () => resolve(-1))\n      child.stderr.on('data', (data) => {\n        data = data.toString().trim()\n        if (!data) return\n        for (const line of data.split('\\n')) {\n          logger.warn(line)\n        }\n      })\n      child.stdout.on('data', (data) => {\n        data = data.toString().trim()\n        if (!data) return\n        for (const line of data.split('\\n')) {\n          logger.info(line)\n        }\n      })\n    })\n  }\n\n  async override(deps: Dict<string>) {\n    const filename = resolve(this.cwd, 'package.json')\n    for (const key in deps) {\n      if (deps[key]) {\n        this.manifest.dependencies[key] = deps[key]\n      } else {\n        delete this.manifest.dependencies[key]\n      }\n    }\n    this.manifest.dependencies = Object.fromEntries(Object.entries(this.manifest.dependencies).sort((a, b) => a[0].localeCompare(b[0])))\n    await fsp.writeFile(filename, JSON.stringify(this.manifest, null, 2))\n  }\n\n  install() {\n    const args: string[] = []\n    if (this.agent !== 'yarn') args.push('install')\n    args.push('--registry', this.registry)\n    return this.exec(this.agent, args)\n  }\n\n  installDep = async (deps: Dict<string>) => {\n    const oldPayload = await this.get()\n    await this.override(deps)\n\n    let shouldInstall = false\n    for (const name in deps) {\n      const { resolved } = oldPayload[name] || {}\n      if (deps[name] && resolved && satisfies(resolved, deps[name], { includePrerelease: true })) continue\n      shouldInstall = true\n      break\n    }\n\n    if (shouldInstall) {\n      const code = await this.install()\n      if (code) return code\n    }\n\n    await this.refresh()\n    const newPayload = await this.get()\n    for (const name in oldPayload) {\n      const { resolved, workspace } = oldPayload[name]\n      if (workspace || !newPayload[name]) continue\n      if (newPayload[name].resolved === resolved) continue\n      if (!(require.resolve(name) in require.cache)) continue\n      this.ctx.loader.fullReload()\n    }\n    this.ctx.console.packages.refresh()\n    return 0\n  }\n}\n\nnamespace Installer {\n  export interface Config {\n    endpoint?: string\n    timeout?: number\n  }\n\n  export const Config: Schema<Config> = Schema.object({\n    endpoint: Schema.string().role('link').description('插件的下载源。默认跟随当前项目的 npm config。'),\n    timeout: Schema.number().role('time').default(Time.second * 5).description('获取插件数据的超时时间。'),\n  }).description('插件源设置')\n}\n\nexport default Installer\n", "import { readFileSync } from 'fs'\nimport { PackageJson } from '@koishijs/registry'\nimport { defineProperty } from 'koishi'\n\nexport interface LocalPackage extends PackageJson {\n  private?: boolean\n  $workspace?: boolean\n}\n\nexport function loadManifest(name: string) {\n  const filename = require.resolve(name + '/package.json')\n  const meta: LocalPackage = JSON.parse(readFileSync(filename, 'utf8'))\n  meta.dependencies ||= {}\n  defineProperty(meta, '$workspace', !filename.includes('node_modules'))\n  return meta\n}\n", "import { Context, Dict, pick, Quester, Schema, Time, valueMap } from 'koishi'\nimport Scanner, { AnalyzedPackage, SearchResult } from '@koishijs/registry'\nimport { MarketProvider as BaseMarketProvider } from '../shared'\nimport { throttle } from 'throttle-debounce'\n\nclass MarketProvider extends BaseMarketProvider {\n  static using = ['console.dependencies']\n\n  private http: Quester\n  private failed: string[] = []\n  private scanner: Scanner\n  private fullCache: Dict<AnalyzedPackage> = {}\n  private tempCache: Dict<AnalyzedPackage> = {}\n\n  constructor(ctx: Context, public config: MarketProvider.Config) {\n    super(ctx)\n    if (config.endpoint) this.http = ctx.http.extend(config)\n  }\n\n  async start() {\n    super.start()\n    this.failed = []\n    this.fullCache = {}\n    this.tempCache = {}\n    this.ctx.console.dependencies.refresh()\n    await this.prepare()\n    this.refresh()\n  }\n\n  stop() {\n    this.flushData.cancel()\n  }\n\n  flushData = throttle(500, () => {\n    this.ctx.console.broadcast('market/patch', {\n      data: this.tempCache,\n      failed: this.failed.length,\n      total: this.scanner.total,\n      progress: this.scanner.progress,\n    })\n    this.tempCache = {}\n  })\n\n  async collect() {\n    const { timeout } = this.config\n    this.failed = []\n    this.scanner = new Scanner(this.ctx.console.dependencies.http.get)\n    if (this.http) {\n      const result = await this.http.get<SearchResult>('')\n      this.scanner.objects = result.objects.filter(object => !object.ignored)\n      this.scanner.total = this.scanner.objects.length\n    } else {\n      await this.scanner.collect({ timeout })\n    }\n\n    this.scanner.analyze({\n      version: '4',\n      onFailure: (name) => {\n        this.failed.push(name)\n      },\n      onSuccess: (item) => {\n        const { name, versions } = item\n        this.tempCache[name] = this.fullCache[name] = {\n          ...item,\n          versions: valueMap(versions, item => pick(item, ['peerDependencies', 'peerDependenciesMeta'])),\n        }\n      },\n      after: () => this.flushData(),\n    })\n    return null\n  }\n\n  async get() {\n    await this.prepare()\n    if (this._error) return { data: {}, failed: 0, total: 0, progress: 0 }\n    return {\n      data: this.fullCache,\n      failed: this.failed.length,\n      total: this.scanner.total,\n      progress: this.scanner.progress,\n      gravatar: process.env.GRAVATAR_MIRROR,\n    }\n  }\n}\n\nnamespace MarketProvider {\n  export interface Config {\n    endpoint?: string\n    timeout?: number\n  }\n\n  export const Config: Schema<Config> = Schema.object({\n    endpoint: Schema.string().role('link').description('用于搜索插件市场的网址。默认跟随 registry 设置。'),\n    timeout: Schema.number().role('time').default(Time.second * 30).description('搜索插件市场的超时时间。'),\n    proxyAgent: Schema.string().role('link').description('用于搜索插件市场的代理。'),\n  }).description('搜索设置')\n}\n\nexport default MarketProvider\n", "import { Context, Dict, EffectScope, Logger, pick, remove, Schema } from 'koishi'\nimport { conclude, Manifest, PackageJson } from '@koishijs/registry'\nimport { promises as fsp } from 'fs'\nimport { dirname } from 'path'\nimport { unwrapExports } from '@koishijs/loader'\nimport { loadManifest } from './utils'\nimport { PackageProvider as BasePackageProvider } from '../shared'\n\nconst logger = new Logger('market')\n\n/** require without affecting the dependency tree */\nfunction getExports(id: string) {\n  const path = require.resolve(id)\n  const keys = Object.keys(require.cache)\n  let result = require.cache[path]\n  if (!result) {\n    require(path)\n    result = require.cache[path]\n    remove(module.children, result)\n    for (const key in require.cache) {\n      if (!keys.includes(key)) {\n        delete require.cache[key]\n      }\n    }\n  }\n  return unwrapExports(result.exports)\n}\n\nclass PackageProvider extends BasePackageProvider {\n  cache: Dict<PackageProvider.Data> = {}\n  task: Promise<void>\n\n  update(state: EffectScope) {\n    const entry = Object.keys(require.cache).find((key) => {\n      return unwrapExports(require.cache[key].exports) === state.runtime.plugin\n    })\n    if (!this.cache[entry]) return\n    const data = this.cache[entry]\n    this.parseRuntime(state.runtime, data)\n    this.refresh()\n  }\n\n  async prepare() {\n    this.cache = {}\n    let { baseDir } = this.ctx\n    const tasks: Promise<void>[] = []\n    while (1) {\n      tasks.push(this.loadDirectory(baseDir))\n      const parent = dirname(baseDir)\n      if (baseDir === parent) break\n      baseDir = parent\n    }\n    await Promise.all(tasks)\n  }\n\n  async get(forced = false) {\n    if (forced) delete this.task\n    await (this.task ||= this.prepare())\n\n    // add app config\n    const packages = Object.values(this.cache)\n    packages.unshift({\n      name: '',\n      shortname: '',\n      schema: Context.Config,\n    })\n\n    return Object.fromEntries(packages.filter(x => x).map(data => [data.name, data]))\n  }\n\n  private async loadDirectory(baseDir: string) {\n    const base = baseDir + '/node_modules'\n    const files = await fsp.readdir(base).catch(() => [])\n    for (const name of files) {\n      const base2 = base + '/' + name\n      if (name.startsWith('@')) {\n        const files = await fsp.readdir(base2).catch(() => [])\n        for (const name2 of files) {\n          if (name === '@koishijs' && name2.startsWith('plugin-') || name2.startsWith('koishi-plugin-')) {\n            this.loadPackage(name + '/' + name2)\n          }\n        }\n      } else {\n        if (name.startsWith('koishi-plugin-')) {\n          this.loadPackage(name)\n        }\n      }\n    }\n  }\n\n  private loadPackage(name: string) {\n    try {\n      // require.resolve(name) may be different from require.resolve(path)\n      // because tsconfig-paths may resolve the path differently\n      this.cache[require.resolve(name)] = this.parsePackage(name)\n    } catch (error) {\n      logger.warn('failed to parse %c', name)\n      logger.warn(error)\n    }\n  }\n\n  private parsePackage(name: string) {\n    const data = loadManifest(name)\n    const result = pick(data, [\n      'name',\n      'version',\n      'description',\n    ]) as PackageProvider.Data\n\n    // workspace packages are followed by symlinks\n    result.workspace = data.$workspace\n    result.shortname = data.name.replace(/(koishi-|^@koishijs\\/)plugin-/, '')\n    result.manifest = conclude(data)\n    result.peerDependencies = { ...data.peerDependencies }\n\n    // check schema\n    const exports = getExports(name)\n    result.schema = exports?.Config || exports?.schema\n    result.usage = exports?.usage\n\n    // check plugin state\n    const runtime = this.ctx.registry.get(exports)\n    if (runtime) this.parseRuntime(runtime, result)\n\n    // make sure that result can be serialized into json\n    JSON.stringify(result)\n\n    return result\n  }\n\n  async getManifest(name: string) {\n    const filename = await this.ctx.loader.resolve(name + '/package.json')\n    return conclude(JSON.parse(await fsp.readFile(filename, 'utf8')))\n  }\n}\n\nnamespace PackageProvider {\n  export interface Config {}\n\n  export interface Data extends Partial<PackageJson> {\n    id?: number\n    forkable?: boolean\n    shortname?: string\n    schema?: Schema\n    usage?: string\n    workspace?: boolean\n    manifest?: Manifest\n  }\n}\n\nexport default PackageProvider\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,iBAAgC;AAChC,IAAAC,eAAwB;;;ACDxB,IAAAC,iBAA6E;AAC7E,4BAA4B;AAE5B,kBAAwB;AACxB,IAAAC,aAAgC;;;ACJhC,gBAA6B;AAE7B,oBAA+B;AAOxB,SAAS,aAAaC,OAAc;AACzC,QAAM,WAAW,QAAQ,QAAQA,QAAO;AACxC,QAAM,OAAqB,KAAK,UAAM,wBAAa,UAAU,MAAM,CAAC;AACpE,OAAK,iBAAL,KAAK,eAAiB,CAAC;AACvB,oCAAe,MAAM,cAAc,CAAC,SAAS,SAAS,cAAc,CAAC;AACrE,SAAO;AACT;AANgB;;;ADHhB,oBAA0C;AAE1C,0BAAwB;AACxB,2BAAkB;AAClB,mBAAkB;AAClB,mBAAiB;AAQjB,IAAM,SAAS,IAAI,sBAAO,QAAQ;AAnBlC;AA0CA,IAAM,YAAN,cAAwB,kCAA8B;AAAA,EAQpD,YAAmB,KAAqB,QAA0B;AAChE,UAAM,KAAK,gBAAgB,EAAE,WAAW,EAAE,CAAC;AAD1B;AAAqB;AAJxC,SAAQ,UAAQ,8BAAAC,SAAM,MAAN,mBAAS,SAAQ;AAwGjC,sBAAa,OAAO,SAAuB;AACzC,YAAM,aAAa,MAAM,KAAK,IAAI;AAClC,YAAM,KAAK,SAAS,IAAI;AAExB,UAAI,gBAAgB;AACpB,iBAAWC,SAAQ,MAAM;AACvB,cAAM,EAAE,SAAS,IAAI,WAAWA,UAAS,CAAC;AAC1C,YAAI,KAAKA,UAAS,gBAAY,yBAAU,UAAU,KAAKA,QAAO,EAAE,mBAAmB,KAAK,CAAC;AAAG;AAC5F,wBAAgB;AAChB;AAAA,MACF;AAEA,UAAI,eAAe;AACjB,cAAM,OAAO,MAAM,KAAK,QAAQ;AAChC,YAAI;AAAM,iBAAO;AAAA,MACnB;AAEA,YAAM,KAAK,QAAQ;AACnB,YAAM,aAAa,MAAM,KAAK,IAAI;AAClC,iBAAWA,SAAQ,YAAY;AAC7B,cAAM,EAAE,UAAU,UAAU,IAAI,WAAWA;AAC3C,YAAI,aAAa,CAAC,WAAWA;AAAO;AACpC,YAAI,WAAWA,OAAM,aAAa;AAAU;AAC5C,YAAI,EAAE,QAAQ,QAAQA,UAAS,QAAQ;AAAQ;AAC/C,aAAK,IAAI,OAAO,WAAW;AAAA,MAC7B;AACA,WAAK,IAAI,QAAQ,SAAS,QAAQ;AAClC,aAAO;AAAA,IACT;AA9HE,SAAK,WAAW,aAAa,KAAK,GAAG;AAErC,QAAI,QAAQ,YAAY,kBAAkB,KAAK,YAAY,EAAE,WAAW,EAAE,CAAC;AAAA,EAC7E;AAAA,EAEA,IAAI,MAAM;AACR,WAAO,KAAK,IAAI;AAAA,EAClB;AAAA,EAEA,MAAM,UAAU;AACd,UAAM,EAAE,UAAU,QAAQ,IAAI,KAAK;AACnC,SAAK,WAAW,YAAY,UAAM,oBAAAC,SAAY;AAC9C,SAAK,OAAO,KAAK,IAAI,KAAK,OAAO,EAAE,UAAU,KAAK,UAAU,QAAQ,CAAC;AAAA,EACvE;AAAA,EAEA,MAAM,QAAQ;AACZ,UAAM,KAAK,QAAQ;AAAA,EACrB;AAAA,EAEA,MAAc,OAAO;AACnB,UAAM,aAAS,yBAAS,KAAK,SAAS,cAAc,CAAC,YAAY;AAC/D,aAAO,EAAE,SAAS,QAAQ,QAAQ,SAAS,EAAE,EAAE;AAAA,IACjD,CAAC;AACD,cAAM,aAAAC,SAAK,OAAO,KAAK,MAAM,GAAG,OAAOF,UAAS;AAC9C,UAAI;AAEF,cAAM,OAAO,aAAaA,KAAI;AAC9B,eAAOA,OAAM,WAAW,KAAK;AAC7B,eAAOA,OAAM,YAAY,KAAK;AAC9B,YAAI,KAAK;AAAY;AAAA,MACvB,QAAE;AAAA,MAAO;AAET,UAAI,KAAC,qBAAM,OAAOA,OAAM,OAAO,GAAG;AAChC,eAAOA,OAAM,UAAU;AACvB;AAAA,MACF;AAEA,UAAI;AACF,cAAM,WAAW,MAAM,KAAK,KAAK,IAAc,IAAIA,OAAM;AACzD,cAAM,UAAU,OAAO,OAAO,SAAS,QAAQ,EAC5C,IAAI,UAAQ,CAAC,KAAK,aAAS,qBAAK,MAAM,CAAC,oBAAoB,sBAAsB,CAAC,CAAC,CAAU,EAC7F,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,UAAM,uBAAQ,GAAG,CAAC,CAAC;AACnC,eAAOA,OAAM,SAAS,QAAQ,GAAG;AACjC,eAAOA,OAAM,WAAW,OAAO,YAAY,OAAO;AAAA,MACpD,SAAS,GAAP;AACA,eAAO,KAAK,EAAE,OAAO;AAAA,MACvB;AAAA,IACF,GAAG,EAAE,aAAa,GAAG,CAAC;AACtB,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,IAAI,QAAQ,OAAO;AACvB,QAAI,CAAC,SAAS,KAAK;AAAM,aAAO,KAAK;AACrC,WAAO,KAAK,OAAO,KAAK,KAAK;AAAA,EAC/B;AAAA,EAEA,MAAM,KAAK,SAAiB,MAAgB;AAC1C,WAAO,IAAI,QAAgB,CAACG,aAAY;AACtC,YAAM,YAAQ,aAAAC,SAAM,SAAS,MAAM,EAAE,KAAK,KAAK,IAAI,CAAC;AACpD,YAAM,GAAG,QAAQ,CAAC,SAASD,SAAQ,IAAI,CAAC;AACxC,YAAM,GAAG,SAAS,MAAMA,SAAQ,EAAE,CAAC;AACnC,YAAM,OAAO,GAAG,QAAQ,CAAC,SAAS;AAChC,eAAO,KAAK,SAAS,EAAE,KAAK;AAC5B,YAAI,CAAC;AAAM;AACX,mBAAW,QAAQ,KAAK,MAAM,IAAI,GAAG;AACnC,iBAAO,KAAK,IAAI;AAAA,QAClB;AAAA,MACF,CAAC;AACD,YAAM,OAAO,GAAG,QAAQ,CAAC,SAAS;AAChC,eAAO,KAAK,SAAS,EAAE,KAAK;AAC5B,YAAI,CAAC;AAAM;AACX,mBAAW,QAAQ,KAAK,MAAM,IAAI,GAAG;AACnC,iBAAO,KAAK,IAAI;AAAA,QAClB;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,SAAS,MAAoB;AACjC,UAAM,eAAW,qBAAQ,KAAK,KAAK,cAAc;AACjD,eAAW,OAAO,MAAM;AACtB,UAAI,KAAK,MAAM;AACb,aAAK,SAAS,aAAa,OAAO,KAAK;AAAA,MACzC,OAAO;AACL,eAAO,KAAK,SAAS,aAAa;AAAA,MACpC;AAAA,IACF;AACA,SAAK,SAAS,eAAe,OAAO,YAAY,OAAO,QAAQ,KAAK,SAAS,YAAY,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,GAAG,cAAc,EAAE,EAAE,CAAC,CAAC;AACnI,UAAM,WAAAE,SAAI,UAAU,UAAU,KAAK,UAAU,KAAK,UAAU,MAAM,CAAC,CAAC;AAAA,EACtE;AAAA,EAEA,UAAU;AACR,UAAM,OAAiB,CAAC;AACxB,QAAI,KAAK,UAAU;AAAQ,WAAK,KAAK,SAAS;AAC9C,SAAK,KAAK,cAAc,KAAK,QAAQ;AACrC,WAAO,KAAK,KAAK,KAAK,OAAO,IAAI;AAAA,EACnC;AA+BF;AAzIM;AAAA,CA2IN,CAAUC,eAAV;AAMS,EAAMA,WAAA,SAAyB,sBAAO,OAAO;AAAA,IAClD,UAAU,sBAAO,OAAO,EAAE,KAAK,MAAM,EAAE,YAAY,8BAA8B;AAAA,IACjF,SAAS,sBAAO,OAAO,EAAE,KAAK,MAAM,EAAE,QAAQ,oBAAK,SAAS,CAAC,EAAE,YAAY,cAAc;AAAA,EAC3F,CAAC,EAAE,YAAY,OAAO;AAAA,GATd;AAYV,IAAO,oBAAQ;;;AEjMf,IAAAC,iBAAqE;AACrE,sBAAuD;AACvD,oBAAqD;AACrD,+BAAyB;AAEzB,IAAM,iBAAN,cAA6B,cAAAC,eAAmB;AAAA,EAS9C,YAAY,KAAqB,QAA+B;AAC9D,UAAM,GAAG;AADsB;AALjC,SAAQ,SAAmB,CAAC;AAE5B,SAAQ,YAAmC,CAAC;AAC5C,SAAQ,YAAmC,CAAC;AAqB5C,yBAAY,mCAAS,KAAK,MAAM;AAC9B,WAAK,IAAI,QAAQ,UAAU,gBAAgB;AAAA,QACzC,MAAM,KAAK;AAAA,QACX,QAAQ,KAAK,OAAO;AAAA,QACpB,OAAO,KAAK,QAAQ;AAAA,QACpB,UAAU,KAAK,QAAQ;AAAA,MACzB,CAAC;AACD,WAAK,YAAY,CAAC;AAAA,IACpB,CAAC;AAzBC,QAAI,OAAO;AAAU,WAAK,OAAO,IAAI,KAAK,OAAO,MAAM;AAAA,EACzD;AAAA,EAEA,MAAM,QAAQ;AACZ,UAAM,MAAM;AACZ,SAAK,SAAS,CAAC;AACf,SAAK,YAAY,CAAC;AAClB,SAAK,YAAY,CAAC;AAClB,SAAK,IAAI,QAAQ,aAAa,QAAQ;AACtC,UAAM,KAAK,QAAQ;AACnB,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,OAAO;AACL,SAAK,UAAU,OAAO;AAAA,EACxB;AAAA,EAYA,MAAM,UAAU;AACd,UAAM,EAAE,QAAQ,IAAI,KAAK;AACzB,SAAK,SAAS,CAAC;AACf,SAAK,UAAU,IAAI,gBAAAC,QAAQ,KAAK,IAAI,QAAQ,aAAa,KAAK,GAAG;AACjE,QAAI,KAAK,MAAM;AACb,YAAM,SAAS,MAAM,KAAK,KAAK,IAAkB,EAAE;AACnD,WAAK,QAAQ,UAAU,OAAO,QAAQ,OAAO,YAAU,CAAC,OAAO,OAAO;AACtE,WAAK,QAAQ,QAAQ,KAAK,QAAQ,QAAQ;AAAA,IAC5C,OAAO;AACL,YAAM,KAAK,QAAQ,QAAQ,EAAE,QAAQ,CAAC;AAAA,IACxC;AAEA,SAAK,QAAQ,QAAQ;AAAA,MACnB,SAAS;AAAA,MACT,WAAW,CAACC,UAAS;AACnB,aAAK,OAAO,KAAKA,KAAI;AAAA,MACvB;AAAA,MACA,WAAW,CAAC,SAAS;AACnB,cAAM,EAAE,MAAAA,OAAM,SAAS,IAAI;AAC3B,aAAK,UAAUA,SAAQ,KAAK,UAAUA,SAAQ;AAAA,UAC5C,GAAG;AAAA,UACH,cAAU,yBAAS,UAAU,CAAAC,cAAQ,qBAAKA,OAAM,CAAC,oBAAoB,sBAAsB,CAAC,CAAC;AAAA,QAC/F;AAAA,MACF;AAAA,MACA,OAAO,MAAM,KAAK,UAAU;AAAA,IAC9B,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,MAAM;AACV,UAAM,KAAK,QAAQ;AACnB,QAAI,KAAK;AAAQ,aAAO,EAAE,MAAM,CAAC,GAAG,QAAQ,GAAG,OAAO,GAAG,UAAU,EAAE;AACrE,WAAO;AAAA,MACL,MAAM,KAAK;AAAA,MACX,QAAQ,KAAK,OAAO;AAAA,MACpB,OAAO,KAAK,QAAQ;AAAA,MACpB,UAAU,KAAK,QAAQ;AAAA,MACvB,UAAU,QAAQ,IAAI;AAAA,IACxB;AAAA,EACF;AACF;AA9EM;AAAA,eACG,QAAQ,CAAC,sBAAsB;AAAA,CA+ExC,CAAUC,oBAAV;AAMS,EAAMA,gBAAA,SAAyB,sBAAO,OAAO;AAAA,IAClD,UAAU,sBAAO,OAAO,EAAE,KAAK,MAAM,EAAE,YAAY,+BAA+B;AAAA,IAClF,SAAS,sBAAO,OAAO,EAAE,KAAK,MAAM,EAAE,QAAQ,oBAAK,SAAS,EAAE,EAAE,YAAY,cAAc;AAAA,IAC1F,YAAY,sBAAO,OAAO,EAAE,KAAK,MAAM,EAAE,YAAY,cAAc;AAAA,EACrE,CAAC,EAAE,YAAY,MAAM;AAAA,GAVb;AAaV,IAAO,iBAAQ;;;AClGf,IAAAC,iBAAyE;AACzE,IAAAC,mBAAgD;AAChD,IAAAC,aAAgC;AAChC,IAAAC,eAAwB;AACxB,oBAA8B;AAE9B,IAAAC,iBAAuD;AAEvD,IAAMC,UAAS,IAAI,sBAAO,QAAQ;AAGlC,SAAS,WAAW,IAAY;AAC9B,QAAM,OAAO,QAAQ,QAAQ;AAC7B,QAAM,OAAO,OAAO,KAAK,QAAQ,KAAK;AACtC,MAAI,SAAS,QAAQ,MAAM;AAC3B,MAAI,CAAC,QAAQ;AACX,YAAQ;AACR,aAAS,QAAQ,MAAM;AACvB,+BAAO,OAAO,UAAU,MAAM;AAC9B,eAAW,OAAO,QAAQ,OAAO;AAC/B,UAAI,CAAC,KAAK,SAAS,GAAG,GAAG;AACvB,eAAO,QAAQ,MAAM;AAAA,MACvB;AAAA,IACF;AAAA,EACF;AACA,aAAO,6BAAc,OAAO,OAAO;AACrC;AAfS;AAiBT,IAAM,kBAAN,cAA8B,eAAAC,gBAAoB;AAAA,EAAlD;AAAA;AACE,iBAAoC,CAAC;AAAA;AAAA,EAGrC,OAAO,OAAoB;AACzB,UAAM,QAAQ,OAAO,KAAK,QAAQ,KAAK,EAAE,KAAK,CAAC,QAAQ;AACrD,iBAAO,6BAAc,QAAQ,MAAM,KAAK,OAAO,MAAM,MAAM,QAAQ;AAAA,IACrE,CAAC;AACD,QAAI,CAAC,KAAK,MAAM;AAAQ;AACxB,UAAM,OAAO,KAAK,MAAM;AACxB,SAAK,aAAa,MAAM,SAAS,IAAI;AACrC,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,MAAM,UAAU;AACd,SAAK,QAAQ,CAAC;AACd,QAAI,EAAE,QAAQ,IAAI,KAAK;AACvB,UAAM,QAAyB,CAAC;AAChC,WAAO,GAAG;AACR,YAAM,KAAK,KAAK,cAAc,OAAO,CAAC;AACtC,YAAM,aAAS,sBAAQ,OAAO;AAC9B,UAAI,YAAY;AAAQ;AACxB,gBAAU;AAAA,IACZ;AACA,UAAM,QAAQ,IAAI,KAAK;AAAA,EACzB;AAAA,EAEA,MAAM,IAAI,SAAS,OAAO;AACxB,QAAI;AAAQ,aAAO,KAAK;AACxB,WAAO,KAAK,SAAL,KAAK,OAAS,KAAK,QAAQ;AAGlC,UAAM,WAAW,OAAO,OAAO,KAAK,KAAK;AACzC,aAAS,QAAQ;AAAA,MACf,MAAM;AAAA,MACN,WAAW;AAAA,MACX,QAAQ,uBAAQ;AAAA,IAClB,CAAC;AAED,WAAO,OAAO,YAAY,SAAS,OAAO,OAAK,CAAC,EAAE,IAAI,UAAQ,CAAC,KAAK,MAAM,IAAI,CAAC,CAAC;AAAA,EAClF;AAAA,EAEA,MAAc,cAAc,SAAiB;AAC3C,UAAM,OAAO,UAAU;AACvB,UAAM,QAAQ,MAAM,WAAAC,SAAI,QAAQ,IAAI,EAAE,MAAM,MAAM,CAAC,CAAC;AACpD,eAAWC,SAAQ,OAAO;AACxB,YAAM,QAAQ,OAAO,MAAMA;AAC3B,UAAIA,MAAK,WAAW,GAAG,GAAG;AACxB,cAAMC,SAAQ,MAAM,WAAAF,SAAI,QAAQ,KAAK,EAAE,MAAM,MAAM,CAAC,CAAC;AACrD,mBAAWG,UAASD,QAAO;AACzB,cAAID,UAAS,eAAeE,OAAM,WAAW,SAAS,KAAKA,OAAM,WAAW,gBAAgB,GAAG;AAC7F,iBAAK,YAAYF,QAAO,MAAME,MAAK;AAAA,UACrC;AAAA,QACF;AAAA,MACF,OAAO;AACL,YAAIF,MAAK,WAAW,gBAAgB,GAAG;AACrC,eAAK,YAAYA,KAAI;AAAA,QACvB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,YAAYA,OAAc;AAChC,QAAI;AAGF,WAAK,MAAM,QAAQ,QAAQA,UAAS,KAAK,aAAaA,KAAI;AAAA,IAC5D,SAAS,OAAP;AACA,MAAAH,QAAO,KAAK,sBAAsBG,KAAI;AACtC,MAAAH,QAAO,KAAK,KAAK;AAAA,IACnB;AAAA,EACF;AAAA,EAEQ,aAAaG,OAAc;AACjC,UAAM,OAAO,aAAaA,KAAI;AAC9B,UAAM,aAAS,qBAAK,MAAM;AAAA,MACxB;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAGD,WAAO,YAAY,KAAK;AACxB,WAAO,YAAY,KAAK,KAAK,QAAQ,iCAAiC,EAAE;AACxE,WAAO,eAAW,2BAAS,IAAI;AAC/B,WAAO,mBAAmB,EAAE,GAAG,KAAK,iBAAiB;AAGrD,UAAM,UAAU,WAAWA,KAAI;AAC/B,WAAO,UAAS,mCAAS,YAAU,mCAAS;AAC5C,WAAO,QAAQ,mCAAS;AAGxB,UAAM,UAAU,KAAK,IAAI,SAAS,IAAI,OAAO;AAC7C,QAAI;AAAS,WAAK,aAAa,SAAS,MAAM;AAG9C,SAAK,UAAU,MAAM;AAErB,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,YAAYA,OAAc;AAC9B,UAAM,WAAW,MAAM,KAAK,IAAI,OAAO,QAAQA,QAAO,eAAe;AACrE,eAAO,2BAAS,KAAK,MAAM,MAAM,WAAAD,SAAI,SAAS,UAAU,MAAM,CAAC,CAAC;AAAA,EAClE;AACF;AA1GM;AA0HN,IAAO,mBAAQ;;;AJjJf,IAAAI,iBAA8C;AAE9C,yBAAc,sBAPd;AAmBO,IAAM,OAAO;AACb,IAAM,QAAQ,CAAC,WAAW,QAAQ;AAOlC,IAAM,SAAyB,sBAAO,UAAU;AAAA,EACrD,sBAAO,OAAO;AAAA,IACZ,UAAU,kBAAU;AAAA,IACpB,QAAQ,eAAe;AAAA,EACzB,CAAC;AACH,CAAC;AAEM,SAAS,MAAM,KAAc,QAAgB;AAClD,MAAI,CAAC,IAAI,OAAO,UAAU;AACxB,WAAO,IAAI,OAAO,SAAS,EAAE,KAAK,qDAAqD;AAAA,EACzF;AAEA,MAAI,OAAO,mBAAW,OAAO,QAAQ;AACrC,MAAI,OAAO,gBAAgB,OAAO,MAAM;AACxC,MAAI,OAAO,gBAAe;AAC1B,MAAI,OAAO,8BAAe;AAC1B,MAAI,OAAO,2BAAY;AAEvB,MAAI,QAAQ,SAAS;AAAA,IACnB,SAAK,sBAAQ,WAAW,uBAAuB;AAAA,IAC/C,UAAM,sBAAQ,WAAW,YAAY;AAAA,EACvC,CAAC;AACH;AAfgB;",
  "names": ["import_koishi", "import_path", "import_koishi", "import_fs", "name", "which", "name", "getRegistry", "pMap", "resolve", "spawn", "fsp", "Installer", "import_koishi", "BaseMarketProvider", "Scanner", "name", "item", "MarketProvider", "import_koishi", "import_registry", "import_fs", "import_path", "import_shared", "logger", "BasePackageProvider", "fsp", "name", "files", "name2", "import_shared"]
}
