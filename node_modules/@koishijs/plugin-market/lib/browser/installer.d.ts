import { Context, Dict } from 'koishi';
import { DataService } from '@koishijs/plugin-console';
import { PackageJson } from '@koishijs/registry';
declare module '@koishijs/plugin-console' {
    interface Events {
        'market/install'(deps: Dict<string>): Promise<number>;
    }
}
export interface Dependency {
    /**
     * requested semver range
     * @example `^1.2.3` -> `1.2.3`
     */
    request: string;
    /**
     * installed package version
     * @example `1.2.5`
     */
    resolved?: string;
    /** whether it is a workspace package */
    workspace?: boolean;
    /** all available versions */
    versions?: Dict<Partial<PackageJson>>;
    /** latest version */
    latest?: string;
}
declare class Installer extends DataService<Dict<Dependency>> {
    ctx: Context;
    static using: string[];
    constructor(ctx: Context);
    get(force?: boolean): Promise<{
        [k: string]: {
            request: string;
            resolved: string;
            versions: Dict<Partial<import("@koishijs/registry").RemotePackage>, string>;
            latest: string;
        };
    }>;
}
export default Installer;
