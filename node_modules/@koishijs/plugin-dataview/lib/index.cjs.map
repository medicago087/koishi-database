{
  "version": 3,
  "sources": ["../src/index.ts", "../src/utils.ts"],
  "sourcesContent": ["import { Context, Database, Dict, Driver, Field, Keys, Model, Schema } from 'koishi'\nimport { DataService } from '@koishijs/plugin-console'\nimport { resolve } from 'path'\nimport { deserialize, serialize } from './utils'\n\nexport * from './utils'\n\nexport type DbEvents = {\n  [M in Keys<Database, Function> as `database/${M}`]: (...args: string[]) => Promise<string>\n}\n\ndeclare module '@koishijs/plugin-console' {\n  namespace Console {\n    interface Services {\n      database: DatabaseProvider\n    }\n  }\n\n  interface Events extends DbEvents {}\n}\n\nexport interface TableInfo extends Driver.TableStats, Model.Config<any> {\n  fields: Field.Config\n}\n\nexport interface DatabaseInfo extends Driver.Stats {\n  tables: Dict<TableInfo>\n}\n\nclass DatabaseProvider extends DataService<DatabaseInfo> {\n  static using = ['console', 'database'] as const\n\n  task: Promise<DatabaseInfo>\n\n  addListener<K extends Keys<Database, Function>>(name: K, refresh = false) {\n    this.ctx.console.addListener(`database/${name}`, async (...args) => {\n      const result = await (this.ctx.database[name] as any)(...args.map(deserialize))\n      if (refresh) this.refresh()\n      return result === undefined ? result : serialize(result)\n    }, { authority: 4 })\n  }\n\n  constructor(ctx: Context) {\n    super(ctx, 'database', { authority: 4 })\n\n    ctx.console.addEntry(process.env.KOISHI_BASE ? [\n      process.env.KOISHI_BASE + '/dist/index.js',\n      process.env.KOISHI_BASE + '/dist/style.css',\n    ] : process.env.KOISHI_ENV === 'browser' ? [\n      // @ts-ignore\n      import.meta.url.replace(/\\/src\\/[^/]+$/, '/client/index.ts'),\n    ] : {\n      dev: resolve(__dirname, '../client/index.ts'),\n      prod: resolve(__dirname, '../dist'),\n    })\n\n    this.addListener('create', true)\n    this.addListener('eval', true)\n    this.addListener('get')\n    this.addListener('remove', true)\n    this.addListener('set')\n    this.addListener('stats')\n    this.addListener('upsert', true)\n\n    ctx.on('model', () => this.refresh())\n  }\n\n  async getInfo() {\n    const stats = await this.ctx.database.stats()\n    const result = { tables: {}, ...stats } as DatabaseInfo\n    const tableStats = result.tables\n    result.tables = {}\n    for (const name in this.ctx.model.tables) {\n      result.tables[name] = {\n        ...this.ctx.model.tables[name],\n        ...tableStats[name],\n      }\n    }\n    result.tables = Object.fromEntries(Object.entries(result.tables).sort(([a], [b]) => a.localeCompare(b)))\n    return result\n  }\n\n  get(forced = false) {\n    if (forced) delete this.task\n    return this.task ||= this.getInfo()\n  }\n}\n\nnamespace DatabaseProvider {\n  export interface Config {}\n\n  export const Config: Schema<Config> = Schema.object({})\n}\n\nexport default DatabaseProvider\n", "export function serialize(obj: unknown): string {\n  if (obj instanceof Date) return `\"d${obj.toJSON()}\"`\n  return JSON.stringify(obj, (_, value) => {\n    if (typeof value === 'string') return 's' + value\n    if (typeof value === 'object') {\n      if (value instanceof Date) return 'd' + new Date(value).toJSON()\n      if (value === null) return null\n      const o = Array.isArray(value) ? [] : {}\n      for (const k in value) {\n        if (value[k] instanceof Date) {\n          o[k] = new Date(value[k])\n          // Remove toJson so that it won't be converted to string in recursive calls\n          o[k].toJSON = undefined\n        } else {\n          o[k] = value[k]\n        }\n      }\n      return o\n    }\n    return value\n  })\n}\n\nexport function deserialize(str: string): unknown {\n  if (str === undefined) return undefined\n  return JSON.parse(str, (_, v) =>\n    typeof v === 'string'\n      ? v[0] === 's'\n        ? v.slice(1)\n        : new Date(v.slice(1))\n      : v,\n  )\n}\n"],
  "mappings": "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",
  "names": ["DatabaseProvider"]
}
