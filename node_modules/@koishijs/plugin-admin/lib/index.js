var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// koishi/plugins/a11y/admin/src/locales/zh.yml
var require_zh = __commonJS({
  "koishi/plugins/a11y/admin/src/locales/zh.yml"(exports, module2) {
    module2.exports = { commands: { user: { description: "用户管理" }, channel: { description: "频道管理" }, authorize: { description: "权限管理" }, assign: { description: "受理者账号" }, "user.locale": { description: "语言偏好" }, "user.flag": { description: "标记信息" }, "channel.locale": { description: "语言偏好" }, "channel.flag": { description: "标记信息" } }, admin: { "unknown-flag": "未找到标记 {0}。", "all-flags": "全部标记为：{0}。", "no-flags": "未设置任何标记。", "current-flags": "当前的标记为：{0}。", "user-expected": "请指定目标用户。", "invalid-assignee-platform": "代理者应与目标频道属于同一平台。", "current-locale": "当前语言偏好为：{0}。", "no-locale": "未设置语言偏好。", options: { remove: "重置设置", list: "查看全部", set: "添加项", unset: "删除项" } } };
  }
});

// koishi/plugins/a11y/admin/src/locales/en.yml
var require_en = __commonJS({
  "koishi/plugins/a11y/admin/src/locales/en.yml"(exports, module2) {
    module2.exports = { commands: { authorize: { description: "Authority management" } }, admin: { "unknown-flag": "Cannot find flag {0}.", "all-flags": "All flags: {0}.", "no-flags": "No flags set.", "current-flags": "Current flags: {0}.", "user-expected": "Please specify a target user.", "invalid-assignee-platform": "Invalid assignee platform." } };
  }
});

// koishi/plugins/a11y/admin/src/index.ts
var src_exports = {};
__export(src_exports, {
  Config: () => Config,
  apply: () => apply,
  name: () => name,
  using: () => using
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");
var import_helpers = require("@koishijs/helpers");
function adminFlag(cmd, map, key) {
  return cmd.option("list", "-l", { descPath: "admin.options.list" }).option("set", "-s", { authority: 4, descPath: "admin.options.set" }).option("unset", "-S", { authority: 4, descPath: "admin.options.unset" }).action(async ({ options, session }, ...args) => {
    const target = session[key];
    if (options.set || options.unset) {
      const notFound = (0, import_koishi.difference)(args, (0, import_koishi.enumKeys)(map));
      if (notFound.length)
        return session.text("admin.unknown-flag", [notFound.join(", ")]);
      for (const name2 of args) {
        options.set ? target.flag |= map[name2] : target.flag &= ~map[name2];
      }
      return;
    }
    if (options.list) {
      return session.text("admin.all-flags", [(0, import_koishi.enumKeys)(map).join(", ")]);
    }
    let flag = target.flag;
    const keys = [];
    while (flag) {
      const value = 2 ** Math.floor(Math.log2(flag));
      flag -= value;
      keys.unshift(map[value]);
    }
    if (!keys.length)
      return session.text("admin.no-flags");
    return session.text("admin.current-flags", [keys.join(", ")]);
  });
}
__name(adminFlag, "adminFlag");
function adminLocale(cmd, key) {
  return cmd.option("remove", "-r", { descPath: "admin.options.remove" }).action(async ({ session, options }, ...args) => {
    const target = session[key];
    if (options.remove) {
      target.locale = "";
    } else if (args[0]) {
      target.locale = args[0];
    } else if (target.locale) {
      return session.text("admin.current-locale", [target.locale]);
    } else {
      return session.text("admin.no-locale");
    }
  });
}
__name(adminLocale, "adminLocale");
var name = "admin";
var using = ["database"];
var Config = import_koishi.Schema.object({});
function apply(ctx) {
  ctx.i18n.define("zh", require_zh());
  ctx.i18n.define("en", require_en());
  ctx.command("user", { authority: 3 });
  ctx.command("channel", { authority: 3 });
  ctx.command("user/authorize <value:natural>", { authority: 4, checkUnknown: true }).alias("auth").use(import_helpers.adminUser).action(async ({ session }, authority) => {
    if (session.userId === session.user[session.platform])
      return session.text("admin.user-expected");
    session.user.authority = authority;
  });
  ctx.command("user.locale <lang>", { authority: 1, checkUnknown: true }).userFields(["locale"]).use(adminLocale, "user").use(import_helpers.adminUser);
  ctx.command("user.flag [...flags]", { authority: 3, checkUnknown: true }).userFields(["flag"]).use(adminFlag, import_koishi.User.Flag, "user").use(import_helpers.adminUser);
  ctx.command("channel/assign [bot:user]", { authority: 4, checkUnknown: true }).channelFields(["assignee"]).option("remove", "-r", { descPath: "admin.options.remove" }).use(import_helpers.adminChannel).action(async ({ session, options }, value) => {
    if (options.remove) {
      session.channel.assignee = "";
    } else if (!value) {
      session.channel.assignee = session.selfId;
    } else {
      const [platform, userId] = (0, import_helpers.parsePlatform)(value);
      if (platform !== (0, import_helpers.parsePlatform)(options.channel)[0]) {
        return session.text("admin.invalid-assignee-platform");
      }
      session.channel.assignee = userId;
    }
  });
  ctx.command("channel.locale <lang>", { authority: 3, checkUnknown: true }).channelFields(["locale"]).use(adminLocale, "channel").use(import_helpers.adminChannel);
  ctx.command("channel.flag [...flags]", { authority: 3, checkUnknown: true }).channelFields(["flag"]).use(adminFlag, import_koishi.Channel.Flag, "channel").use(import_helpers.adminChannel);
}
__name(apply, "apply");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Config,
  apply,
  name,
  using
});
//# sourceMappingURL=index.js.map
