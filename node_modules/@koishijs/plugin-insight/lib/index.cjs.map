{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { camelize, capitalize, Context, Fork, Plugin, Schema, State } from 'koishi'\nimport { debounce } from 'throttle-debounce'\nimport { DataService } from '@koishijs/plugin-console'\nimport { resolve } from 'path'\nimport {} from '@koishijs/loader'\n\ndeclare module '@koishijs/plugin-console' {\n  namespace Console {\n    interface Services {\n      insight: Insight\n    }\n  }\n}\n\nfunction format(name: string) {\n  return capitalize(camelize(name))\n}\n\nfunction getName(plugin: Plugin) {\n  if (!plugin) return 'App'\n  if (!plugin.name || plugin.name === 'apply') return 'Anonymous'\n  return format(plugin.name)\n}\n\nfunction getSourceId(child: Fork) {\n  const { state } = child.parent\n  if (state.runtime.isForkable) {\n    return state.uid\n  } else {\n    return state.runtime.uid\n  }\n}\n\nclass Insight extends DataService<Insight.Payload> {\n  constructor(ctx: Context) {\n    super(ctx, 'insight')\n\n    ctx.console.addEntry(process.env.KOISHI_BASE ? [\n      process.env.KOISHI_BASE + '/dist/index.js',\n      process.env.KOISHI_BASE + '/dist/style.css',\n    ] : process.env.KOISHI_ENV === 'browser' ? [\n      // @ts-ignore\n      import.meta.url.replace(/\\/src\\/[^/]+$/, '/client/index.ts'),\n    ] : {\n      dev: resolve(__dirname, '../client/index.ts'),\n      prod: resolve(__dirname, '../dist'),\n    })\n\n    ctx.on('internal/fork', this.update)\n    ctx.on('internal/runtime', this.update)\n    ctx.on('internal/service', this.update)\n  }\n\n  stop() {\n    this.update.cancel()\n  }\n\n  private update = debounce(0, () => {\n    this.refresh()\n  })\n\n  async get() {\n    const nodes: Insight.Node[] = []\n    const edges: Insight.Link[] = []\n\n    for (const runtime of this.ctx.registry.values()) {\n      // Suppose we have the following types of nodes:\n      // - A, B: parent plugin states\n      // - X, Y: target fork states\n      // - M:    target main state\n      // - S:    service dependencies\n\n      // We can divide plugins into three categories:\n      // 1. fully reusable plugins\n      //    will be displayed as A -> X -> S, B -> Y -> S\n      // 2. partially reusable plugins\n      //    will be displayed as A -> X -> M -> S, B -> Y -> M -> S\n      // 3. non-reusable plugins\n      //    will be displayed as A -> M -> S, B -> M -> S\n\n      function isActive(state: State) {\n        // exclude plugins that don't work due to missing dependencies\n        return runtime.using.every(name => state.ctx[name])\n      }\n\n      const name = getName(runtime.plugin)\n\n      function addNode(state: State) {\n        const { uid, alias, disposables } = state\n        const weight = disposables.length\n        const node = { uid, name, weight }\n        if (alias) node.name += ` <${format(alias)}>`\n        nodes.push(node)\n      }\n\n      function addEdge(type: 'dashed' | 'solid', source: number, target: number) {\n        edges.push({ type, source, target })\n      }\n\n      function addDeps(state: State) {\n        for (const name of runtime.using) {\n          const ctx = state.ctx[name][Context.source]\n          const uid = ctx?.state.uid\n          if (!uid) continue\n          addEdge('dashed', state.uid, uid)\n        }\n      }\n\n      const isReusable = runtime.plugin?.['reusable']\n      if (!isReusable) {\n        if (!isActive(runtime)) continue\n        addNode(runtime)\n        addDeps(runtime)\n      }\n\n      for (const fork of runtime.children) {\n        if (runtime.isForkable) {\n          if (!isActive(fork)) continue\n          addNode(fork)\n          addEdge('solid', getSourceId(fork), fork.uid)\n          if (!isReusable) {\n            addEdge('solid', fork.uid, runtime.uid)\n          } else {\n            addDeps(fork)\n          }\n        } else {\n          nodes[nodes.length - 1].weight += fork.disposables.length\n          addEdge('solid', getSourceId(fork), runtime.uid)\n        }\n      }\n    }\n\n    return { nodes, edges }\n  }\n}\n\nnamespace Insight {\n  export interface Payload {\n    nodes: Node[]\n    edges: Link[]\n  }\n\n  export interface Node {\n    uid: number\n    name: string\n    weight: number\n  }\n\n  export interface Link {\n    type: 'solid' | 'dashed'\n    source: number\n    target: number\n  }\n\n  export const using = ['console'] as const\n\n  export interface Config {}\n\n  export const Config: Schema<Config> = Schema.object({})\n}\n\nexport default Insight\n"],
  "mappings": "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",
  "names": ["name", "Insight"]
}
