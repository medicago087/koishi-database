var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// external/console/packages/insight/src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");
var import_throttle_debounce = require("throttle-debounce");
var import_plugin_console = require("@koishijs/plugin-console");
var import_path = require("path");
var import_meta = {};
function format(name) {
  return (0, import_koishi.capitalize)((0, import_koishi.camelize)(name));
}
__name(format, "format");
function getName(plugin) {
  if (!plugin)
    return "App";
  if (!plugin.name || plugin.name === "apply")
    return "Anonymous";
  return format(plugin.name);
}
__name(getName, "getName");
function getSourceId(child) {
  const { state } = child.parent;
  if (state.runtime.isForkable) {
    return state.uid;
  } else {
    return state.runtime.uid;
  }
}
__name(getSourceId, "getSourceId");
var Insight = class extends import_plugin_console.DataService {
  constructor(ctx) {
    super(ctx, "insight");
    this.update = (0, import_throttle_debounce.debounce)(0, () => {
      this.refresh();
    });
    ctx.console.addEntry(process.env.KOISHI_BASE ? [
      process.env.KOISHI_BASE + "/dist/index.js",
      process.env.KOISHI_BASE + "/dist/style.css"
    ] : process.env.KOISHI_ENV === "browser" ? [
      import_meta.url.replace(/\/src\/[^/]+$/, "/client/index.ts")
    ] : {
      dev: (0, import_path.resolve)(__dirname, "../client/index.ts"),
      prod: (0, import_path.resolve)(__dirname, "../dist")
    });
    ctx.on("internal/fork", this.update);
    ctx.on("internal/runtime", this.update);
    ctx.on("internal/service", this.update);
  }
  stop() {
    this.update.cancel();
  }
  async get() {
    var _a;
    const nodes = [];
    const edges = [];
    for (const runtime of this.ctx.registry.values()) {
      let isActive = function(state) {
        return runtime.using.every((name2) => state.ctx[name2]);
      }, addNode = function(state) {
        const { uid, alias, disposables } = state;
        const weight = disposables.length;
        const node = { uid, name, weight };
        if (alias)
          node.name += ` <${format(alias)}>`;
        nodes.push(node);
      }, addEdge = function(type, source, target) {
        edges.push({ type, source, target });
      }, addDeps = function(state) {
        for (const name2 of runtime.using) {
          const ctx = state.ctx[name2][import_koishi.Context.source];
          const uid = ctx == null ? void 0 : ctx.state.uid;
          if (!uid)
            continue;
          addEdge("dashed", state.uid, uid);
        }
      };
      __name(isActive, "isActive");
      __name(addNode, "addNode");
      __name(addEdge, "addEdge");
      __name(addDeps, "addDeps");
      const name = getName(runtime.plugin);
      const isReusable = (_a = runtime.plugin) == null ? void 0 : _a["reusable"];
      if (!isReusable) {
        if (!isActive(runtime))
          continue;
        addNode(runtime);
        addDeps(runtime);
      }
      for (const fork of runtime.children) {
        if (runtime.isForkable) {
          if (!isActive(fork))
            continue;
          addNode(fork);
          addEdge("solid", getSourceId(fork), fork.uid);
          if (!isReusable) {
            addEdge("solid", fork.uid, runtime.uid);
          } else {
            addDeps(fork);
          }
        } else {
          nodes[nodes.length - 1].weight += fork.disposables.length;
          addEdge("solid", getSourceId(fork), runtime.uid);
        }
      }
    }
    return { nodes, edges };
  }
};
__name(Insight, "Insight");
((Insight2) => {
  Insight2.using = ["console"];
  Insight2.Config = import_koishi.Schema.object({});
})(Insight || (Insight = {}));
var src_default = Insight;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
//# sourceMappingURL=index.cjs.map
