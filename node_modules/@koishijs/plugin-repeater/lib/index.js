var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// koishi/plugins/common/repeater/src/index.ts
var src_exports = {};
__export(src_exports, {
  Config: () => Config,
  apply: () => apply,
  name: () => name
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");
var RepeatHandler = import_koishi.Schema.object({
  minTimes: import_koishi.Schema.natural().min(2).default(2).required().description("最少重复次数。"),
  probability: import_koishi.Schema.percent().default(1).description("复读发生概率。")
});
function onRepeat(options) {
  if (!options || typeof options !== "object")
    return options;
  const { minTimes = 2, probability = 1 } = options;
  return ({ repeated, times, content }) => times >= minTimes && !repeated && import_koishi.Random.bool(probability) ? content : "";
}
__name(onRepeat, "onRepeat");
var name = "repeater";
var Config = import_koishi.Schema.object({
  onRepeat: import_koishi.Schema.union([RepeatHandler, Function]).description("响应复读消息"),
  onInterrupt: import_koishi.Schema.function().hidden().description("响应打断复读")
});
function apply(ctx, config = {}) {
  ctx = ctx.guild();
  const states = {};
  function getState(id) {
    return states[id] || (states[id] = {
      content: "",
      repeated: false,
      times: 0,
      users: {}
    });
  }
  __name(getState, "getState");
  ctx.before("send", ({ cid, content }) => {
    const state = getState(cid);
    state.repeated = true;
    if (state.content === content) {
      state.times += 1;
    } else {
      state.content = content;
      state.times = 1;
      state.users = {};
    }
  });
  ctx.middleware((session, next) => {
    const { content, uid, userId } = session;
    if (ctx.bots[uid])
      return;
    const state = getState(session.cid);
    const check = /* @__PURE__ */ __name((handle) => {
      const text = handle == null ? void 0 : handle(state, session);
      return text && next(text);
    }, "check");
    if (content === state.content) {
      state.times += 1;
      state.users[userId] = (state.users[userId] || 0) + 1;
      return check(onRepeat(config.onRepeat)) || next();
    }
    const result = check(config.onInterrupt);
    if (result)
      return result;
    state.content = content;
    state.repeated = false;
    state.times = 1;
    state.users = { [userId]: 1 };
    return next();
  });
}
__name(apply, "apply");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Config,
  apply,
  name
});
//# sourceMappingURL=index.js.map
