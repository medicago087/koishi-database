{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { Context, Dict, Random, Schema, Session } from 'koishi'\n\ninterface RepeatState {\n  content: string\n  repeated: boolean\n  times: number\n  users: Dict<number>\n}\n\ntype StateCallback = (state: RepeatState, session: Session) => void | string\n\ninterface RepeatHandler {\n  minTimes?: number\n  probability?: number\n}\n\nconst RepeatHandler: Schema<RepeatHandler> = Schema.object({\n  minTimes: Schema.natural().min(2).default(2).required().description('最少重复次数。'),\n  probability: Schema.percent().default(1).description('复读发生概率。'),\n})\n\nfunction onRepeat(options: RepeatHandler | StateCallback): StateCallback {\n  if (!options || typeof options !== 'object') return options as StateCallback\n  const { minTimes = 2, probability = 1 } = options\n  return ({ repeated, times, content }) => times >= minTimes && !repeated && Random.bool(probability) ? content : ''\n}\n\nexport interface Config {\n  onRepeat?: RepeatHandler | StateCallback\n  onInterrupt?: StateCallback\n}\n\nexport const name = 'repeater'\nexport const Config: Schema<Config> = Schema.object({\n  onRepeat: Schema.union([RepeatHandler, Function]).description('响应复读消息'),\n  onInterrupt: Schema.function().hidden().description('响应打断复读'),\n})\n\nexport function apply(ctx: Context, config: Config = {}) {\n  ctx = ctx.guild()\n\n  const states: Dict<RepeatState> = {}\n\n  function getState(id: string) {\n    return states[id] || (states[id] = {\n      content: '',\n      repeated: false,\n      times: 0,\n      users: {},\n    })\n  }\n\n  ctx.before('send', ({ cid, content }) => {\n    const state = getState(cid)\n    state.repeated = true\n    if (state.content === content) {\n      state.times += 1\n    } else {\n      state.content = content\n      state.times = 1\n      state.users = {}\n    }\n  })\n\n  ctx.middleware((session, next) => {\n    const { content, uid, userId } = session\n\n    // never respond to messages from self\n    if (ctx.bots[uid]) return\n\n    const state = getState(session.cid)\n    const check = (handle: StateCallback) => {\n      const text = handle?.(state, session)\n      return text && next(text)\n    }\n\n    // duplicate repeating & normal repeating\n    if (content === state.content) {\n      state.times += 1\n      state.users[userId] = (state.users[userId] || 0) + 1\n      return check(onRepeat(config.onRepeat)) || next()\n    }\n\n    // interrupt repeating\n    const result = check(config.onInterrupt)\n    if (result) return result\n\n    // unrepeated message\n    state.content = content\n    state.repeated = false\n    state.times = 1\n    state.users = { [userId]: 1 }\n    return next()\n  })\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAuD;AAgBvD,IAAM,gBAAuC,qBAAO,OAAO;AAAA,EACzD,UAAU,qBAAO,QAAQ,EAAE,IAAI,CAAC,EAAE,QAAQ,CAAC,EAAE,SAAS,EAAE,YAAY,SAAS;AAAA,EAC7E,aAAa,qBAAO,QAAQ,EAAE,QAAQ,CAAC,EAAE,YAAY,SAAS;AAChE,CAAC;AAED,SAAS,SAAS,SAAuD;AACvE,MAAI,CAAC,WAAW,OAAO,YAAY;AAAU,WAAO;AACpD,QAAM,EAAE,WAAW,GAAG,cAAc,EAAE,IAAI;AAC1C,SAAO,CAAC,EAAE,UAAU,OAAO,QAAQ,MAAM,SAAS,YAAY,CAAC,YAAY,qBAAO,KAAK,WAAW,IAAI,UAAU;AAClH;AAJS;AAWF,IAAM,OAAO;AACb,IAAM,SAAyB,qBAAO,OAAO;AAAA,EAClD,UAAU,qBAAO,MAAM,CAAC,eAAe,QAAQ,CAAC,EAAE,YAAY,QAAQ;AAAA,EACtE,aAAa,qBAAO,SAAS,EAAE,OAAO,EAAE,YAAY,QAAQ;AAC9D,CAAC;AAEM,SAAS,MAAM,KAAc,SAAiB,CAAC,GAAG;AACvD,QAAM,IAAI,MAAM;AAEhB,QAAM,SAA4B,CAAC;AAEnC,WAAS,SAAS,IAAY;AAC5B,WAAO,OAAO,QAAQ,OAAO,MAAM;AAAA,MACjC,SAAS;AAAA,MACT,UAAU;AAAA,MACV,OAAO;AAAA,MACP,OAAO,CAAC;AAAA,IACV;AAAA,EACF;AAPS;AAST,MAAI,OAAO,QAAQ,CAAC,EAAE,KAAK,QAAQ,MAAM;AACvC,UAAM,QAAQ,SAAS,GAAG;AAC1B,UAAM,WAAW;AACjB,QAAI,MAAM,YAAY,SAAS;AAC7B,YAAM,SAAS;AAAA,IACjB,OAAO;AACL,YAAM,UAAU;AAChB,YAAM,QAAQ;AACd,YAAM,QAAQ,CAAC;AAAA,IACjB;AAAA,EACF,CAAC;AAED,MAAI,WAAW,CAAC,SAAS,SAAS;AAChC,UAAM,EAAE,SAAS,KAAK,OAAO,IAAI;AAGjC,QAAI,IAAI,KAAK;AAAM;AAEnB,UAAM,QAAQ,SAAS,QAAQ,GAAG;AAClC,UAAM,QAAQ,wBAAC,WAA0B;AACvC,YAAM,OAAO,iCAAS,OAAO;AAC7B,aAAO,QAAQ,KAAK,IAAI;AAAA,IAC1B,GAHc;AAMd,QAAI,YAAY,MAAM,SAAS;AAC7B,YAAM,SAAS;AACf,YAAM,MAAM,WAAW,MAAM,MAAM,WAAW,KAAK;AACnD,aAAO,MAAM,SAAS,OAAO,QAAQ,CAAC,KAAK,KAAK;AAAA,IAClD;AAGA,UAAM,SAAS,MAAM,OAAO,WAAW;AACvC,QAAI;AAAQ,aAAO;AAGnB,UAAM,UAAU;AAChB,UAAM,WAAW;AACjB,UAAM,QAAQ;AACd,UAAM,QAAQ,EAAE,CAAC,SAAS,EAAE;AAC5B,WAAO,KAAK;AAAA,EACd,CAAC;AACH;AAxDgB;",
  "names": []
}
