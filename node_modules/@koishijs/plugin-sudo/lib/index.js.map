{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { Context, Schema, Session } from 'koishi'\nimport { parsePlatform } from '@koishijs/helpers'\n\nexport interface Config {}\n\nexport const name = 'sudo'\nexport const using = ['database'] as const\nexport const Config: Schema<Config> = Schema.object({})\n\nexport function apply(ctx: Context) {\n  ctx.i18n.define('zh', require('./locales/zh'))\n\n  ctx.command('sudo <command:text>', { authority: 3 })\n    .userFields(['authority'])\n    .option('user', '-u [id:user]')\n    .option('member', '-m [id:user]')\n    .option('channel', '-c [id:channel]')\n    .action(async ({ session, options }, message) => {\n      if (!message) return session.text('.expect-command')\n\n      if (options.member) {\n        if (session.subtype === 'private') {\n          return session.text('.invalid-private-member')\n        }\n        options.channel = session.cid\n        options.user = options.member\n      }\n\n      if (!options.user && !options.channel) {\n        return session.text('.expect-context')\n      }\n\n      const sess = new Session(session.bot, session)\n      sess.send = session.send.bind(session)\n      sess.sendQueued = session.sendQueued.bind(session)\n\n      if (!options.channel) {\n        sess.subtype = 'private'\n      } else if (options.channel !== session.cid) {\n        sess.channelId = parsePlatform(options.channel)[1]\n        sess.subtype = 'group'\n        await sess.observeChannel()\n      } else {\n        sess.channel = session.channel\n      }\n\n      if (options.user && options.user !== session.uid) {\n        sess.userId = sess.author.userId = parsePlatform(options.user)[1]\n        const user = await sess.observeUser(['authority'])\n        if (session.user.authority <= user.authority) {\n          return session.text('internal.low-authority')\n        }\n      } else {\n        sess.user = session.user\n      }\n\n      if (options.member) {\n        const info = await session.bot.getGuildMember?.(sess.guildId, sess.userId).catch(() => ({}))\n        Object.assign(sess.author, info)\n      } else if (options.user) {\n        const info = await session.bot.getUser?.(sess.userId).catch(() => ({}))\n        Object.assign(sess.author, info)\n      }\n\n      await sess.execute(message)\n    })\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAyC;AACzC,qBAA8B;AAIvB,IAAM,OAAO;AACb,IAAM,QAAQ,CAAC,UAAU;AACzB,IAAM,SAAyB,qBAAO,OAAO,CAAC,CAAC;AAE/C,SAAS,MAAM,KAAc;AAClC,MAAI,KAAK,OAAO,MAAM,YAAuB;AAE7C,MAAI,QAAQ,uBAAuB,EAAE,WAAW,EAAE,CAAC,EAChD,WAAW,CAAC,WAAW,CAAC,EACxB,OAAO,QAAQ,cAAc,EAC7B,OAAO,UAAU,cAAc,EAC/B,OAAO,WAAW,iBAAiB,EACnC,OAAO,OAAO,EAAE,SAAS,QAAQ,GAAG,YAAY;AAjBrD;AAkBM,QAAI,CAAC;AAAS,aAAO,QAAQ,KAAK,iBAAiB;AAEnD,QAAI,QAAQ,QAAQ;AAClB,UAAI,QAAQ,YAAY,WAAW;AACjC,eAAO,QAAQ,KAAK,yBAAyB;AAAA,MAC/C;AACA,cAAQ,UAAU,QAAQ;AAC1B,cAAQ,OAAO,QAAQ;AAAA,IACzB;AAEA,QAAI,CAAC,QAAQ,QAAQ,CAAC,QAAQ,SAAS;AACrC,aAAO,QAAQ,KAAK,iBAAiB;AAAA,IACvC;AAEA,UAAM,OAAO,IAAI,sBAAQ,QAAQ,KAAK,OAAO;AAC7C,SAAK,OAAO,QAAQ,KAAK,KAAK,OAAO;AACrC,SAAK,aAAa,QAAQ,WAAW,KAAK,OAAO;AAEjD,QAAI,CAAC,QAAQ,SAAS;AACpB,WAAK,UAAU;AAAA,IACjB,WAAW,QAAQ,YAAY,QAAQ,KAAK;AAC1C,WAAK,gBAAY,8BAAc,QAAQ,OAAO,EAAE;AAChD,WAAK,UAAU;AACf,YAAM,KAAK,eAAe;AAAA,IAC5B,OAAO;AACL,WAAK,UAAU,QAAQ;AAAA,IACzB;AAEA,QAAI,QAAQ,QAAQ,QAAQ,SAAS,QAAQ,KAAK;AAChD,WAAK,SAAS,KAAK,OAAO,aAAS,8BAAc,QAAQ,IAAI,EAAE;AAC/D,YAAM,OAAO,MAAM,KAAK,YAAY,CAAC,WAAW,CAAC;AACjD,UAAI,QAAQ,KAAK,aAAa,KAAK,WAAW;AAC5C,eAAO,QAAQ,KAAK,wBAAwB;AAAA,MAC9C;AAAA,IACF,OAAO;AACL,WAAK,OAAO,QAAQ;AAAA,IACtB;AAEA,QAAI,QAAQ,QAAQ;AAClB,YAAM,OAAO,QAAM,mBAAQ,KAAI,mBAAZ,4BAA6B,KAAK,SAAS,KAAK,QAAQ,MAAM,OAAO,CAAC;AACzF,aAAO,OAAO,KAAK,QAAQ,IAAI;AAAA,IACjC,WAAW,QAAQ,MAAM;AACvB,YAAM,OAAO,QAAM,mBAAQ,KAAI,YAAZ,4BAAsB,KAAK,QAAQ,MAAM,OAAO,CAAC;AACpE,aAAO,OAAO,KAAK,QAAQ,IAAI;AAAA,IACjC;AAEA,UAAM,KAAK,QAAQ,OAAO;AAAA,EAC5B,CAAC;AACL;AAzDgB;",
  "names": []
}
