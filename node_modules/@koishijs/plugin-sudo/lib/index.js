var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// plugins/a11y/sudo/src/locales/zh.yml
var require_zh = __commonJS({
  "plugins/a11y/sudo/src/locales/zh.yml"(exports, module2) {
    module2.exports = { commands: { sudo: { description: "在特定上下文中触发指令", options: { user: "使用用户私聊上下文", member: "使用当前频道成员上下文", channel: "指定目标频道上下文" }, messages: { "expect-command": "请输入要触发的指令。", "expect-context": "请提供新的上下文。", "invalid-private-member": "无法在私聊上下文使用 --member 选项。" } } } };
  }
});

// plugins/a11y/sudo/src/index.ts
var src_exports = {};
__export(src_exports, {
  Config: () => Config,
  apply: () => apply,
  name: () => name,
  using: () => using
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");
var import_helpers = require("@koishijs/helpers");
var name = "sudo";
var using = ["database"];
var Config = import_koishi.Schema.object({});
function apply(ctx) {
  ctx.i18n.define("zh", require_zh());
  ctx.command("sudo <command:text>", { authority: 3 }).userFields(["authority"]).option("user", "-u [id:user]").option("member", "-m [id:user]").option("channel", "-c [id:channel]").action(async ({ session, options }, message) => {
    var _a, _b, _c, _d;
    if (!message)
      return session.text(".expect-command");
    if (options.member) {
      if (session.subtype === "private") {
        return session.text(".invalid-private-member");
      }
      options.channel = session.cid;
      options.user = options.member;
    }
    if (!options.user && !options.channel) {
      return session.text(".expect-context");
    }
    const sess = new import_koishi.Session(session.bot, session);
    sess.send = session.send.bind(session);
    sess.sendQueued = session.sendQueued.bind(session);
    if (!options.channel) {
      sess.subtype = "private";
    } else if (options.channel !== session.cid) {
      sess.channelId = (0, import_helpers.parsePlatform)(options.channel)[1];
      sess.subtype = "group";
      await sess.observeChannel();
    } else {
      sess.channel = session.channel;
    }
    if (options.user && options.user !== session.uid) {
      sess.userId = sess.author.userId = (0, import_helpers.parsePlatform)(options.user)[1];
      const user = await sess.observeUser(["authority"]);
      if (session.user.authority <= user.authority) {
        return session.text("internal.low-authority");
      }
    } else {
      sess.user = session.user;
    }
    if (options.member) {
      const info = await ((_b = (_a = session.bot).getGuildMember) == null ? void 0 : _b.call(_a, sess.guildId, sess.userId).catch(() => ({})));
      Object.assign(sess.author, info);
    } else if (options.user) {
      const info = await ((_d = (_c = session.bot).getUser) == null ? void 0 : _d.call(_c, sess.userId).catch(() => ({})));
      Object.assign(sess.author, info);
    }
    await sess.execute(message);
  });
}
__name(apply, "apply");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Config,
  apply,
  name,
  using
});
//# sourceMappingURL=index.js.map
