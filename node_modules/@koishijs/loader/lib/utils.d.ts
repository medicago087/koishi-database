import { Context, MaybeArray } from 'koishi';
export declare function unwrapExports(module: any): any;
export interface Modifier {
    $filter?: Selection;
    $isolate?: string[];
}
declare const selectors: readonly ["user", "guild", "channel", "self", "private", "platform"];
export type SelectorType = typeof selectors[number];
export type SelectorValue = boolean | MaybeArray<string | number>;
export type BaseSelection = {
    [K in SelectorType]?: SelectorValue;
};
interface Selection extends BaseSelection {
    and?: Selection[];
    or?: Selection[];
    not?: Selection;
}
export declare function select(root: Context, options: Selection): Context;
export declare function patch(ctx: Context, config: Modifier): void;
export declare namespace patch {
    function filter(ctx: Context, filter: Selection): void;
    function isolate(ctx: Context, isolate: string[]): void;
}
export declare function stripModifier(config: any): {};
export {};
