{
  "version": 3,
  "sources": ["../src/shared.ts"],
  "sourcesContent": ["import { Context, Dict, EnvData, interpolate, isNullable, Logger, Plugin, resolveConfig, valueMap } from '@koishijs/core'\n\ndeclare module '@koishijs/core' {\n  interface Context {\n    loader: Loader\n  }\n\n  interface Events {\n    'config'(): void\n  }\n\n  namespace Context {\n    interface Config {\n      name?: string\n      plugins?: Dict\n    }\n  }\n}\n\ndeclare module 'cordis' {\n  // Theoretically, these properties will only appear on `ForkScope`.\n  // We define them directly on `EffectScope` for typing convenience.\n  interface EffectScope<C> {\n    [Loader.kRecord]?: Dict<ForkScope<C>>\n    alias?: string\n  }\n}\n\nexport function unwrapExports(module: any) {\n  return module?.default || module\n}\n\nexport interface Modifier {\n  $if?: boolean\n  $filter?: Selection\n}\n\nfunction separate(source: any, isGroup = false) {\n  const config: any = {}, meta: any = {}\n  for (const [key, value] of Object.entries(source || {})) {\n    if (key.startsWith('$')) {\n      meta[key] = value\n    } else {\n      config[key] = value\n    }\n  }\n  return [isGroup ? source : config, meta]\n}\n\nconst kUpdate = Symbol('update')\n\nContext.service('loader')\n\nconst logger = new Logger('app')\n\nconst group: Plugin.Object = {\n  name: 'group',\n  reusable: true,\n  apply(ctx, plugins) {\n    ctx.state[Loader.kRecord] ||= Object.create(null)\n\n    for (const name in plugins || {}) {\n      if (name.startsWith('~') || name.startsWith('$')) continue\n      ctx.lifecycle.queue(ctx.loader.reloadPlugin(ctx, name, plugins[name]))\n    }\n\n    ctx.accept((neo) => {\n      // update config reference\n      const old = ctx.state.config\n\n      // update inner plugins\n      for (const key in { ...old, ...neo }) {\n        if (key.startsWith('~') || key.startsWith('$')) continue\n        const fork = ctx.state[Loader.kRecord][key]\n        if (!fork) {\n          ctx.loader.reloadPlugin(ctx, key, neo[key])\n        } else if (!(key in neo)) {\n          ctx.loader.unloadPlugin(ctx, key)\n        } else {\n          ctx.loader.reloadPlugin(ctx, key, neo[key] || {})\n        }\n      }\n    }, { passive: true })\n  },\n}\n\nexport abstract class Loader {\n  static readonly kRecord = Symbol.for('koishi.loader.record')\n  static readonly exitCode = 51\n\n  public envData: EnvData\n  public ctxData = {}\n  public app: Context\n  public baseDir: string\n  public config: Context.Config\n  public entry: Context\n  public suspend = false\n  public filename: string\n  public writable = true\n  public envfile: string\n  public cache: Dict<string> = Object.create(null)\n\n  abstract readConfig(): Context.Config\n  abstract writeConfig(): void\n  abstract resolve(name: string): Promise<string>\n  abstract resolvePlugin(name: string): Promise<any>\n  abstract fullReload(): void\n\n  interpolate(source: any) {\n    if (!this.writable) return source\n    if (typeof source === 'string') {\n      return interpolate(source, this.ctxData, /\\$\\{\\{(.+?)\\}\\}/g)\n    } else if (!source || typeof source !== 'object') {\n      return source\n    } else if (Array.isArray(source)) {\n      return source.map(item => this.interpolate(item))\n    } else {\n      return valueMap(source, item => this.interpolate(item))\n    }\n  }\n\n  private async forkPlugin(name: string, config: any, parent: Context) {\n    const plugin = await this.resolvePlugin(name)\n    if (!plugin) return\n\n    resolveConfig(plugin, config)\n    return parent.plugin(plugin, this.interpolate(config))\n  }\n\n  isTruthyLike(expr: any) {\n    if (isNullable(expr)) return true\n    return !!this.interpolate(`\\${{ ${expr} }}`)\n  }\n\n  async reloadPlugin(parent: Context, key: string, source: any) {\n    let fork = parent.state[Loader.kRecord][key]\n    const name = key.split(':', 1)[0]\n    const [config, meta] = separate(source, name === 'group')\n    if (fork) {\n      if (!this.isTruthyLike(meta.$if)) {\n        this.unloadPlugin(parent, key)\n        return\n      }\n      fork[kUpdate] = true\n      fork.update(config)\n    } else {\n      if (!this.isTruthyLike(meta.$if)) return\n      logger.info(`apply plugin %c`, key)\n      const ctx = parent.extend()\n      if (name === 'group') {\n        fork = ctx.plugin(group, config)\n      } else {\n        fork = await this.forkPlugin(name, config, ctx)\n      }\n      if (!fork) return\n      fork.alias = key.slice(name.length + 1)\n      parent.state[Loader.kRecord][key] = fork\n    }\n    fork.parent.filter = (session) => {\n      return parent.filter(session) && (!meta.$filter || session.resolve(meta.$filter))\n    }\n    return fork\n  }\n\n  unloadPlugin(ctx: Context, key: string) {\n    const fork = ctx.state[Loader.kRecord][key]\n    if (fork) {\n      fork.dispose()\n      delete ctx.state[Loader.kRecord][key]\n      logger.info(`unload plugin %c`, key)\n    }\n  }\n\n  async createApp() {\n    const app = this.app = new Context(this.interpolate(this.config))\n    app.loader = this\n    app.baseDir = this.baseDir\n    app.envData = this.envData\n    app.state[Loader.kRecord] = Object.create(null)\n    const fork = await this.reloadPlugin(app, 'group:entry', this.config.plugins)\n    this.entry = fork.ctx\n\n    app.accept(['plugins'], (config) => {\n      this.reloadPlugin(app, 'group:entry', config.plugins)\n    }, { passive: true })\n\n    app.on('dispose', () => {\n      this.fullReload()\n    })\n\n    app.on('internal/update', (fork) => {\n      const record = fork.parent.state[Loader.kRecord]\n      if (!record) return\n      for (const name in record) {\n        if (record[name] !== fork) continue\n        logger.info(`reload plugin %c`, name)\n      }\n    })\n\n    app.on('internal/before-update', (fork, config) => {\n      if (fork[kUpdate]) return delete fork[kUpdate]\n      const record = fork.parent.state[Loader.kRecord]\n      if (!record) return\n      for (const name in record) {\n        if (record[name] !== fork) continue\n        const simplify = fork.runtime.schema?.simplify\n        fork.parent.state.config[name] = {\n          ...separate(fork.parent.state.config[name])[1],\n          ...simplify ? simplify(config) : config,\n        }\n      }\n    })\n\n    return app\n  }\n}\n"],
  "mappings": "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",
  "names": ["fork"]
}
