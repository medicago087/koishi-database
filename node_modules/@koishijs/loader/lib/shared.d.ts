import { Context, Dict } from 'koishi';
export * from './utils';
declare module 'koishi' {
    interface Context {
        loader: Loader;
        delimiter: symbol;
    }
    interface Events {
        'config'(): void;
    }
    namespace Context {
        interface Config {
            name?: string;
            plugins?: Dict;
        }
    }
}
declare module 'cordis' {
    interface State<C> {
        [Loader.kRecord]?: Dict<Fork<C>>;
        alias?: string;
    }
}
export declare abstract class Loader {
    static readonly kRecord: unique symbol;
    static readonly exitCode = 51;
    app: Context;
    baseDir: string;
    config: Context.Config;
    entry: Context;
    suspend: boolean;
    filename: string;
    writable: boolean;
    envfile: string;
    cache: Dict<string>;
    abstract readConfig(): Context.Config;
    abstract writeConfig(): void;
    abstract resolvePlugin(name: string): Promise<any>;
    abstract fullReload(): void;
    interpolate(source: any): any;
    private forkPlugin;
    reloadPlugin(parent: Context, key: string, config: any): Promise<import("cordis").Fork<Context>>;
    unloadPlugin(ctx: Context, key: string): void;
    createApp(): Promise<Context>;
}
