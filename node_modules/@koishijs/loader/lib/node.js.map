{
  "version": 3,
  "sources": ["../src/node.ts"],
  "sourcesContent": ["import { readdirSync, readFileSync, statSync, writeFileSync } from 'fs'\nimport { dirname, extname, resolve } from 'path'\nimport { Context, interpolate, Logger, valueMap } from 'koishi'\nimport { Loader, unwrapExports } from './shared'\nimport * as dotenv from 'dotenv'\nimport * as yaml from 'js-yaml'\nimport ns from 'ns-require'\n\nexport * from './shared'\n\nconst logger = new Logger('app')\n\nconst context = {\n  env: process.env,\n}\n\nconst writableExts = ['.json', '.yml', '.yaml']\nconst supportedExts = ['.js', '.json', '.ts', '.coffee', '.yaml', '.yml']\n\nexport default class NodeLoader extends Loader {\n  public baseDir = process.cwd()\n  public extname: string\n  public scope: ns.Scope\n\n  constructor(filename?: string) {\n    super()\n    if (filename) {\n      filename = resolve(this.baseDir, filename)\n      const stats = statSync(filename)\n      if (stats.isFile()) {\n        this.filename = filename\n        this.baseDir = dirname(filename)\n        this.extname = extname(filename)\n        if (!supportedExts.includes(this.extname)) {\n          throw new Error('extension not supported')\n        }\n      } else {\n        this.baseDir = filename\n        this.findConfig()\n      }\n    } else {\n      this.findConfig()\n    }\n    this.writable = writableExts.includes(this.extname)\n    this.envfile = resolve(this.baseDir, '.env')\n    this.scope = ns({\n      namespace: 'koishi',\n      prefix: 'plugin',\n      official: 'koishijs',\n      dirname: this.baseDir,\n    })\n  }\n\n  private findConfig() {\n    const files = readdirSync(this.baseDir)\n    for (const basename of ['koishi.config', 'koishi']) {\n      for (const extname of supportedExts) {\n        if (files.includes(basename + extname)) {\n          this.extname = extname\n          this.filename = this.baseDir + '/' + basename + extname\n          return\n        }\n      }\n    }\n    throw new Error('config file not found')\n  }\n\n  interpolate(source: any) {\n    if (typeof source === 'string') {\n      return interpolate(source, context, /\\$\\{\\{(.+?)\\}\\}/g)\n    } else if (!source || typeof source !== 'object') {\n      return source\n    } else if (Array.isArray(source)) {\n      return source.map(item => this.interpolate(item))\n    } else {\n      return valueMap(source, item => this.interpolate(item))\n    }\n  }\n\n  readConfig() {\n    // load .env file into process.env\n    dotenv.config({ path: this.envfile })\n\n    if (['.yaml', '.yml'].includes(this.extname)) {\n      this.config = yaml.load(readFileSync(this.filename, 'utf8')) as any\n    } else if (['.json'].includes(this.extname)) {\n      // we do not use require here because it will pollute require.cache\n      this.config = JSON.parse(readFileSync(this.filename, 'utf8')) as any\n    } else {\n      const module = require(this.filename)\n      this.config = module.default || module\n    }\n\n    let resolved = new Context.Config(this.config)\n    if (this.writable) {\n      // schemastery may change original config\n      // so we need to validate config twice\n      resolved = new Context.Config(this.interpolate(this.config))\n    }\n\n    return resolved\n  }\n\n  writeConfig() {\n    this.app.emit('config')\n    this.suspend = true\n    if (!this.writable) throw new Error('cannot overwrite readonly config')\n    if (this.extname === '.json') {\n      writeFileSync(this.filename, JSON.stringify(this.config, null, 2))\n    } else {\n      writeFileSync(this.filename, yaml.dump(this.config))\n    }\n  }\n\n  async resolvePlugin(name: string) {\n    try {\n      this.cache[name] ||= this.scope.resolve(name)\n    } catch (err) {\n      logger.error(err.message)\n      return\n    }\n    return unwrapExports(require(this.cache[name]))\n  }\n\n  fullReload() {\n    logger.info('trigger full reload')\n    process.exit(Loader.exitCode)\n  }\n}\n"],
  "mappings": "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",
  "names": ["ns", "extname", "module"]
}
