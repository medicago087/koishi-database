{
  "version": 3,
  "sources": ["../src/shared.ts", "../src/utils.ts"],
  "sourcesContent": ["import { Context, Dict, EnvData, interpolate, isNullable, Logger, Plugin, resolveConfig, valueMap } from '@koishijs/core'\nimport { Modifier, patch } from './utils'\n\nexport * from './utils'\n\ndeclare module '@koishijs/core' {\n  interface Context {\n    loader: Loader\n  }\n\n  interface Events {\n    'config'(): void\n  }\n\n  namespace Context {\n    interface Config {\n      name?: string\n      plugins?: Dict\n    }\n  }\n}\n\ndeclare module 'cordis' {\n  // Theoretically, these properties will only appear on `ForkScope`.\n  // We define them directly on `EffectScope` for typing convenience.\n  interface EffectScope<C> {\n    [Loader.kRecord]?: Dict<ForkScope<C>>\n    alias?: string\n  }\n}\n\nconst kUpdate = Symbol('update')\n\nContext.service('loader')\n\nconst logger = new Logger('app')\n\nconst group: Plugin.Object = {\n  name: 'group',\n  reusable: true,\n  apply(ctx, plugins) {\n    ctx.state[Loader.kRecord] ||= Object.create(null)\n\n    for (const name in plugins || {}) {\n      if (name.startsWith('~') || name.startsWith('$')) continue\n      ctx.lifecycle.queue(ctx.loader.reloadPlugin(ctx, name, plugins[name]))\n    }\n\n    ctx.accept((neo) => {\n      // update config reference\n      const old = ctx.state.config\n\n      // update inner plugins\n      for (const key in { ...old, ...neo }) {\n        if (key.startsWith('~') || key.startsWith('$')) continue\n        const fork = ctx.state[Loader.kRecord][key]\n        if (!fork) {\n          ctx.loader.reloadPlugin(ctx, key, neo[key])\n        } else if (!(key in neo)) {\n          ctx.loader.unloadPlugin(ctx, key)\n        } else {\n          ctx.loader.reloadPlugin(ctx, key, neo[key] || {})\n        }\n      }\n    }, { passive: true })\n  },\n}\n\nexport abstract class Loader {\n  static readonly kRecord = Symbol.for('koishi.loader.record')\n  static readonly exitCode = 51\n\n  public envData: EnvData\n  public ctxData = {}\n  public app: Context\n  public baseDir: string\n  public config: Context.Config\n  public entry: Context\n  public suspend = false\n  public filename: string\n  public writable = true\n  public envfile: string\n  public cache: Dict<string> = Object.create(null)\n\n  abstract readConfig(): Context.Config\n  abstract writeConfig(): void\n  abstract resolve(name: string): Promise<string>\n  abstract resolvePlugin(name: string): Promise<any>\n  abstract fullReload(): void\n\n  interpolate(source: any) {\n    if (!this.writable) return source\n    if (typeof source === 'string') {\n      return interpolate(source, this.ctxData, /\\$\\{\\{(.+?)\\}\\}/g)\n    } else if (!source || typeof source !== 'object') {\n      return source\n    } else if (Array.isArray(source)) {\n      return source.map(item => this.interpolate(item))\n    } else {\n      return valueMap(source, item => this.interpolate(item))\n    }\n  }\n\n  private async forkPlugin(name: string, config: any, parent: Context) {\n    const plugin = await this.resolvePlugin(name)\n    if (!plugin) return\n\n    resolveConfig(plugin, config)\n    return parent.plugin(plugin, this.interpolate(config))\n  }\n\n  isTruthyLike(expr: any) {\n    if (isNullable(expr)) return true\n    return !!this.interpolate(`\\${{ ${expr} }}`)\n  }\n\n  async reloadPlugin(parent: Context, key: string, config: any) {\n    let fork = parent.state[Loader.kRecord][key]\n    if (fork) {\n      if (!this.isTruthyLike(config?.$if)) {\n        this.unloadPlugin(parent, key)\n        return\n      }\n      patch(fork.parent, config)\n      fork[kUpdate] = true\n      if (fork.runtime.plugin !== group) {\n        config = Modifier.pick(config, false)\n      }\n      fork.update(config)\n    } else {\n      if (!this.isTruthyLike(config?.$if)) return\n      logger.info(`apply plugin %c`, key)\n      const name = key.split(':', 1)[0]\n      const ctx = parent.extend()\n      patch(ctx, config)\n      if (name === 'group') {\n        fork = ctx.plugin(group, config)\n      } else {\n        config = Modifier.pick(config, false)\n        fork = await this.forkPlugin(name, config, ctx)\n      }\n      if (!fork) return\n      fork.alias = key.slice(name.length + 1)\n      parent.state[Loader.kRecord][key] = fork\n    }\n    return fork\n  }\n\n  unloadPlugin(ctx: Context, key: string) {\n    const fork = ctx.state[Loader.kRecord][key]\n    if (fork) {\n      fork.dispose()\n      delete ctx.state[Loader.kRecord][key]\n      logger.info(`unload plugin %c`, key)\n    }\n  }\n\n  async createApp() {\n    const app = this.app = new Context(this.interpolate(this.config))\n    app.loader = this\n    app.baseDir = this.baseDir\n    app.envData = this.envData\n    app.state[Loader.kRecord] = Object.create(null)\n    const fork = await this.reloadPlugin(app, 'group:entry', this.config.plugins)\n    this.entry = fork.ctx\n\n    app.accept(['plugins'], (config) => {\n      this.reloadPlugin(app, 'group:entry', config.plugins)\n    }, { passive: true })\n\n    app.on('dispose', () => {\n      this.fullReload()\n    })\n\n    app.on('internal/update', (fork) => {\n      const record = fork.parent.state[Loader.kRecord]\n      if (!record) return\n      for (const name in record) {\n        if (record[name] !== fork) continue\n        logger.info(`reload plugin %c`, name)\n      }\n    })\n\n    app.on('internal/before-update', (fork, config) => {\n      if (fork[kUpdate]) return delete fork[kUpdate]\n      const record = fork.parent.state[Loader.kRecord]\n      if (!record) return\n      for (const name in record) {\n        if (record[name] !== fork) continue\n        const simplify = fork.runtime.schema?.simplify\n        fork.parent.state.config[name] = {\n          ...Modifier.pick(fork.parent.state.config[name], true),\n          ...simplify ? simplify(config) : config,\n        }\n      }\n    })\n\n    return app\n  }\n}\n", "import { Context, makeArray, MaybeArray } from '@koishijs/core'\n\nexport function unwrapExports(module: any) {\n  return module?.default || module\n}\n\nexport interface Modifier {\n  $if?: boolean\n  $filter?: Selection\n}\n\nexport namespace Modifier {\n  export function pick(config: any, positive = false) {\n    const result = {}\n    for (const [key, value] of Object.entries(config || {})) {\n      if (key.startsWith('$') !== positive) continue\n      result[key] = value\n    }\n    return result\n  }\n}\n\nconst selectors = ['user', 'guild', 'channel', 'self', 'private', 'platform'] as const\n\nexport type SelectorType = typeof selectors[number]\nexport type SelectorValue = boolean | MaybeArray<string | number>\nexport type BaseSelection = { [K in SelectorType]?: SelectorValue }\n\ninterface Selection extends BaseSelection {\n  and?: Selection[]\n  or?: Selection[]\n  not?: Selection\n}\n\nexport function select(root: Context, options: Selection) {\n  let ctx = root\n\n  // basic selectors\n  for (const type of selectors) {\n    const value = options[type]\n    if (value === true) {\n      ctx = ctx[type]()\n    } else if (value === false) {\n      ctx = ctx.exclude(ctx[type]())\n    } else if (value !== undefined) {\n      // we turn everything into string\n      ctx = ctx[type](...makeArray(value).map(item => '' + item))\n    }\n  }\n\n  // intersect\n  if (options.and) {\n    for (const selection of options.and) {\n      ctx = ctx.intersect(select(root, selection))\n    }\n  }\n\n  // union\n  if (options.or) {\n    let ctx2: Context = ctx.never()\n    for (const selection of options.or) {\n      ctx2 = ctx2.union(select(root, selection))\n    }\n    ctx = ctx.intersect(ctx2)\n  }\n\n  // exclude\n  if (options.not) {\n    ctx = ctx.exclude(select(root, options.not))\n  }\n\n  return ctx\n}\n\nexport function patch(ctx: Context, config: Modifier) {\n  config ??= {}\n  const parent = Object.getPrototypeOf(ctx)\n  if (config.$filter) {\n    ctx.filter = parent.intersect(select(ctx.root, config.$filter)).filter\n  } else {\n    delete ctx.filter\n  }\n}\n"],
  "mappings": "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",
  "names": ["import_core", "module", "Modifier", "fork"]
}
