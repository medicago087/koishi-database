var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// koishi/plugins/common/help/src/index.ts
var src_exports = {};
__export(src_exports, {
  Config: () => Config,
  apply: () => apply,
  enableHelp: () => enableHelp,
  name: () => name
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");

// koishi/plugins/common/help/src/locales/zh.yml
var zh_default = { commands: { help: { description: "显示帮助信息", options: { help: "显示此信息", authority: "显示权限设置", showHidden: "查看隐藏的选项和指令" }, messages: { "suggest-prefix": "指令未找到。", "suggest-suffix": "发送句号以使用推测的指令。", "hint-authority": "括号内为对应的最低权限等级", "hint-subcommand": "标有星号的表示含有子指令", "command-aliases": "别名：{0}。", "command-examples": "使用示例：", "command-authority": "最低权限：{0} 级。", "subcommand-prolog": "可用的子指令有{0}：", "global-prolog": "当前可用的指令有{0}：", "global-epilog": "输入“帮助 指令名”查看特定指令的语法和使用示例。", "available-options": "可用的选项有：", "available-options-with-authority": "可用的选项有（括号内为额外要求的权限等级）：" } } } };

// koishi/plugins/common/help/src/locales/en.yml
var en_default = { commands: { help: { description: "Show help", options: { help: "show this message", authority: "show authority requirements", showHidden: "show hidden options and commands" }, messages: { "suggest-prefix": "Command not found.", "suggest-suffix": "Send a period to apply the suggestion.", "hint-authority": "this minimum authority is marked in parentheses", "hint-subcommand": "those marked with an asterisk have subcommands", "command-aliases": "Aliases: {0}.", "command-examples": "Examples:", "command-authority": "Minimal authority: {0}.", "subcommand-prolog": "Available subcommands{0}:", "global-prolog": "Available commands{0}:", "global-epilog": 'Type "help <command>" to see syntax and examples for a specific command.', "available-options": "Available options:", "available-options-with-authority": "Available options (parentheses indicate additional authority requirement):" } } } };

// koishi/plugins/common/help/src/locales/ja.yml
var ja_default = { commands: { help: { description: "ヘルプを表示", options: { help: "このメッセージを表示", authority: "コマンドやオプションの権限を表示", showHidden: "隠しコマンドやオプションを表示" }, messages: { "suggest-prefix": "コマンドが見つかりません。", "suggest-suffix": "句点を送信してこの提案を実行します。", "hint-authority": "最低権限は括弧にで表示されています", "hint-subcommand": "サブコマンドがあるコマンドはアスタリスクで表示されています", "command-aliases": "別名: {0}。", "command-examples": "例：", "command-authority": "最低権限：{0}。", "subcommand-prolog": "利用可能なサブコマンド{0}：", "global-prolog": "利用可能なコマンド{0}：", "global-epilog": "「help <command>」を送信してコマンドの使い方を表示します。", "available-options": "利用可能なオプション：", "available-options-with-authority": "利用可能なオプション（必要な権限は括弧にで表示されています）：" } } } };

// koishi/plugins/common/help/src/locales/fr.yml
var fr_default = { commands: { help: { description: "Afficher l'aide", options: { help: "afficher cette aide", authority: "afficher les droits nécessaires", showHidden: "afficher les options et commandes cachées" }, messages: { "suggest-prefix": "Commande inconnue.", "suggest-suffix": "Tapez un point pour appliquer la suggestion.", "hint-authority": "les droits minimums sont indiqués entre parenthèses", "hint-subcommand": "ces commandes avec un astérisque ont des sous-commandes", "command-aliases": "Alias : {0}.", "command-examples": "Exemples :", "command-authority": "Droit minimum : {0}.", "subcommand-prolog": "Commandes disponibles{0} :", "global-prolog": "Commandes disponibles{0} :", "global-epilog": 'Tapez "help <commande>" pour voir la syntaxe et les exemples pour une commande spécifique.', "available-options": "Options disponibles :", "available-options-with-authority": "Options disponibles (les parenthèses indiquent un droit supplémentaire) :" } } } };

// koishi/plugins/common/help/src/locales/zh-tw.yml
var zh_tw_default = { commands: { help: { description: "顯示幫助信息", options: { help: "顯示當前信息", authority: "顯示權限設定", showHidden: "顯示隱藏的指令和選項" }, messages: { "suggest-prefix": "未找到指令。", "suggest-suffix": "發送句號可使用推測的指令。", "hint-authority": "括弧内為對應的最低權限", "hint-subcommand": "附有星號的表示其包含子指令", "command-aliases": "別名：{0}。", "command-examples": "使用示例：", "command-authority": "最低權限：{0} 級。", "subcommand-prolog": "可用的子指令有{0}：", "global-prolog": "當前可用的子指令有{0}：", "global-epilog": "輸入「help 指令名」檢視特定指令的語法及使用示例。", "available-options": "可用的選項有：", "available-options-with-authority": "可用的選項有（括弧表示額外的權限要求）：" } } } };

// koishi/plugins/common/help/src/index.ts
var Config = import_koishi.Schema.object({
  shortcut: import_koishi.Schema.boolean().default(true).description("是否启用快捷调用。"),
  options: import_koishi.Schema.boolean().default(true).description("是否为每个指令添加 `-h, --help` 选项。")
});
function enableHelp(cmd) {
  return cmd.option("help", "-h", {
    hidden: true,
    notUsage: true,
    descPath: "commands.help.options.help"
  });
}
__name(enableHelp, "enableHelp");
function executeHelp(session, name2) {
  if (!session.app.$commander.getCommand("help"))
    return;
  return session.execute({
    name: "help",
    args: [name2]
  });
}
__name(executeHelp, "executeHelp");
var name = "help";
function apply(ctx, config = {}) {
  ctx.i18n.define("zh", zh_default);
  ctx.i18n.define("en", en_default);
  ctx.i18n.define("ja", ja_default);
  ctx.i18n.define("fr", fr_default);
  ctx.i18n.define("zh-tw", zh_tw_default);
  if (config.options !== false) {
    ctx.$commander._commandList.forEach((cmd2) => cmd2.use(enableHelp));
    ctx.on("command-added", (cmd2) => cmd2.use(enableHelp));
  }
  ctx.before("command/execute", (argv) => {
    const { command, options, session } = argv;
    if (options["help"] && command._options.help) {
      return executeHelp(session, command.name);
    }
    if (command["_actions"].length)
      return;
    return executeHelp(session, command.name);
  });
  const $ = ctx.$commander;
  function findCommand(target) {
    const command = $.resolve(target);
    if (command)
      return command;
    const shortcut = $._shortcuts.find(({ name: name2 }) => {
      return typeof name2 === "string" ? name2 === target : name2.test(target);
    });
    if (shortcut)
      return shortcut.command;
  }
  __name(findCommand, "findCommand");
  const createCollector = /* @__PURE__ */ __name((key) => (argv, fields) => {
    const { args: [target], session } = argv;
    const command = findCommand(target);
    if (!command)
      return;
    session.collect(key, { ...argv, command, args: [], options: { help: true } }, fields);
  }, "createCollector");
  const cmd = ctx.command("help [command:string]", { authority: 0, ...config }).userFields(["authority"]).userFields(createCollector("user")).channelFields(createCollector("channel")).option("authority", "-a").option("showHidden", "-H").action(async ({ session, options }, target) => {
    if (!target) {
      const commands = $._commandList.filter((cmd2) => cmd2.parent === null);
      const output = formatCommands(".global-prolog", session, commands, options);
      const epilog = session.text(".global-epilog");
      if (epilog)
        output.push(epilog);
      return output.filter(Boolean).join("\n");
    }
    const command = findCommand(target);
    if (!(command == null ? void 0 : command.ctx.filter(session))) {
      if (!ctx.$suggest) {
        return session.text(".suggest-prefix");
      }
      return session.suggest({
        target,
        items: ctx.$suggest.getCommandNames(session),
        prefix: session.text(".suggest-prefix"),
        suffix: session.text(".suggest-suffix"),
        async apply(suggestion) {
          return showHelp($.getCommand(suggestion), this, options);
        }
      });
    }
    return showHelp(command, session, options);
  });
  if (config.shortcut !== false)
    cmd.shortcut("帮助", { fuzzy: true });
}
__name(apply, "apply");
function* getCommands(session, commands, showHidden = false) {
  for (const command of commands) {
    if (!showHidden && command.config.hidden)
      continue;
    if (command.match(session)) {
      yield command;
    } else {
      yield* getCommands(session, command.children, showHidden);
    }
  }
}
__name(getCommands, "getCommands");
function formatCommands(path, session, children, options) {
  const commands = Array.from(getCommands(session, children, options.showHidden)).sort((a, b) => a.displayName > b.displayName ? 1 : -1);
  if (!commands.length)
    return [];
  let hasSubcommand = false;
  const output = commands.map(({ name: name2, displayName, config, children: children2 }) => {
    let output2 = "    " + displayName;
    if (options.authority) {
      output2 += ` (${config.authority}${children2.length ? (hasSubcommand = true, "*") : ""})`;
    }
    output2 += "  " + session.text([`commands.${name2}.description`, ""]);
    return output2;
  });
  const hints = [];
  if (options.authority)
    hints.push(session.text(".hint-authority"));
  if (hasSubcommand)
    hints.push(session.text(".hint-subcommand"));
  const hintText = hints.length ? session.text("general.paren", [hints.join(session.text("general.comma"))]) : "";
  output.unshift(session.text(path, [hintText]));
  return output;
}
__name(formatCommands, "formatCommands");
function getOptionVisibility(option, session) {
  if (session.user && option.authority > session.user.authority)
    return false;
  return !session.resolveValue(option.hidden);
}
__name(getOptionVisibility, "getOptionVisibility");
function getOptions(command, session, config) {
  if (command.config.hideOptions && !config.showHidden)
    return [];
  const options = config.showHidden ? Object.values(command._options) : Object.values(command._options).filter((option) => getOptionVisibility(option, session));
  if (!options.length)
    return [];
  const output = [];
  Object.values(command._options).forEach((option) => {
    const authority = option.authority && config.authority ? `(${option.authority}) ` : "";
    function pushOption(option2, name2) {
      var _a;
      if (!config.showHidden && !getOptionVisibility(option2, session))
        return;
      let line = `${authority}${import_koishi.segment.escape(option2.syntax)}`;
      const description = session.text((_a = option2.descPath) != null ? _a : [`commands.${command.name}.options.${name2}`, ""]);
      if (description)
        line += "  " + description;
      line = command.ctx.chain("help/option", line, option2, command, session);
      output.push("    " + line);
    }
    __name(pushOption, "pushOption");
    if (!("value" in option))
      pushOption(option, option.name);
    for (const value in option.variants) {
      pushOption(option.variants[value], `${option.name}.${value}`);
    }
  });
  if (!output.length)
    return [];
  output.unshift(config.authority && options.some((o) => o.authority) ? session.text(".available-options-with-authority") : session.text(".available-options"));
  return output;
}
__name(getOptions, "getOptions");
async function showHelp(command, session, config) {
  const output = [command.displayName + import_koishi.segment.escape(command.declaration)];
  const description = session.text([`commands.${command.name}.description`, ""]);
  if (description)
    output.push(description);
  if (session.app.database) {
    const argv = { command, args: [], options: { help: true } };
    const userFields = session.collect("user", argv);
    await session.observeUser(userFields);
    if (session.subtype === "group") {
      const channelFields = session.collect("channel", argv);
      await session.observeChannel(channelFields);
    }
  }
  if (command._aliases.length > 1) {
    output.push(session.text(".command-aliases", [Array.from(command._aliases.slice(1)).join("，")]));
  }
  session.app.emit(session, "help/command", output, command, session);
  if (session.user && command.config.authority > 1) {
    output.push(session.text(".command-authority", [command.config.authority]));
  }
  if (command._usage) {
    output.push(typeof command._usage === "string" ? command._usage : await command._usage(session));
  } else {
    const text = session.text([`commands.${command.name}.usage`, ""]);
    if (text)
      output.push(text);
  }
  output.push(...getOptions(command, session, config));
  if (command._examples.length) {
    output.push(session.text(".command-examples"), ...command._examples.map((example) => "    " + example));
  } else {
    const text = session.text([`commands.${command.name}.examples`, ""]);
    if (text)
      output.push(...text.split("\n").map((line) => "    " + line));
  }
  output.push(...formatCommands(".subcommand-prolog", session, command.children, config));
  return output.filter(Boolean).join("\n");
}
__name(showHelp, "showHelp");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Config,
  apply,
  enableHelp,
  name
});
//# sourceMappingURL=index.js.map
