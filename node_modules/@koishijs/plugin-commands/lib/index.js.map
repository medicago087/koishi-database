{
  "version": 3,
  "sources": ["../src/index.ts", "../src/service.ts"],
  "sourcesContent": ["import { Argv, Command, Context, Dict, pick, remove, Schema } from 'koishi'\n// import CommandProvider from './service'\n\nexport * from './service'\n\nexport interface Override {\n  name?: string\n  alias?: string[]\n  create?: boolean\n  options?: Dict<Argv.OptionConfig>\n}\n\nexport const Override: Schema<Override> = Schema.object({\n  name: Schema.string(),\n  alias: Schema.array(String),\n  create: Schema.boolean(),\n})\n\ninterface Snapshot extends Command.Config {\n  name: string\n  parent: Command\n}\n\ninterface Config extends Override, Command.Config {}\n\nconst Config: Schema<string | Config, Config> = Schema.union([\n  Schema.intersect([Override, Command.Config]),\n  Schema.transform(String, (name) => ({ name, alias: [] })),\n])\n\nexport const schema: Schema<Dict<string | Config>, Dict<Config>> = Schema.dict(Config)\n\nexport const name = 'commands'\n\nexport function apply(ctx: Context, config: Dict<Config>) {\n  const snapshots: Dict<Snapshot> = {}\n\n  function teleport(command: Command, parent: Command = null) {\n    if (command.parent === parent) return\n    if (command.parent) {\n      remove(command.parent.children, command)\n    }\n    command.parent = parent\n    parent?.children.push(command)\n  }\n\n  function locate(command: Command, name: string) {\n    const capture = name.match(/.*(?=[./])/)\n    if (!capture) return name\n    const parent = ctx.$commander.resolve(capture[0])\n    if (capture[0] && !parent) {\n      ctx.logger('command').warn('cannot find parent command', capture[0])\n      return\n    }\n    teleport(command, parent)\n    const rest = name.slice(capture[0].length)\n    return rest[0] === '.' ? name : rest.slice(1)\n  }\n\n  function patch(target: Command) {\n    const command: Command = Object.create(target)\n    command._disposables = ctx.state.disposables\n    return command\n  }\n\n  function accept(target: Command, config: Config) {\n    const { name, create, options = {}, ...rest } = config\n    const command = create ? target : patch(target)\n\n    const snapshot: Snapshot = pick(target, ['name', 'parent'])\n    for (const key in rest) {\n      snapshot[key] = command.config[key]\n      command.config[key] = rest[key]\n    }\n\n    for (const key in options) {\n      const option = command._options[key]\n      if (!option) continue\n      Object.assign(option, options[key])\n    }\n\n    if (name) {\n      const _name = locate(target, name)\n      if (!_name) return\n      // directly modify name of prototype\n      command.displayName = _name\n    }\n\n    for (const name of config.alias) {\n      command.alias(name)\n    }\n\n    // save snapshot\n    snapshots[target.name] = snapshot\n  }\n\n  for (const key in config) {\n    const command = ctx.$commander.resolve(key)\n    if (command) {\n      accept(command, config[key])\n    } else if (config[key].create) {\n      const command = ctx.command(key)\n      accept(command, config[key])\n    }\n  }\n\n  ctx.on('command-added', (cmd) => {\n    for (const key in config) {\n      if (cmd === ctx.$commander.resolve(key)) {\n        return accept(cmd, config[key])\n      }\n    }\n  })\n\n  ctx.on('command-removed', (cmd) => {\n    delete snapshots[cmd.name]\n  })\n\n  ctx.on('dispose', () => {\n    for (const key in snapshots) {\n      const { name, parent, ...options } = snapshots[key]\n      const cmd = ctx.$commander.resolve(name)\n      Object.assign(cmd.config, options)\n      teleport(cmd, parent)\n    }\n  }, true)\n\n  // ctx.plugin(CommandProvider)\n}\n", "import { DataService } from '@koishijs/plugin-console'\nimport { debounce } from 'throttle-debounce'\nimport { Command, Context } from 'koishi'\nimport { resolve } from 'path'\n\ndeclare module '@koishijs/plugin-console' {\n  namespace Console {\n    interface Services {\n      commands: CommandProvider\n    }\n  }\n}\n\nexport interface CommandData extends Command.Config {\n  name: string\n  aliases: string[]\n  children: CommandData[]\n}\n\nfunction traverse(command: Command): CommandData {\n  return {\n    name: command.name,\n    aliases: command._aliases,\n    children: command.children.map(traverse),\n    ...command.config,\n  }\n}\n\nexport default class CommandProvider extends DataService<CommandData[]> {\n  static using = ['console'] as const\n\n  cached: CommandData[]\n  update = debounce(0, () => this.refresh())\n\n  constructor(ctx: Context) {\n    super(ctx, 'commands', { authority: 4 })\n\n    ctx.on('command-added', this.update)\n    ctx.on('command-removed', this.update)\n    ctx.on('dispose', this.update.cancel)\n\n    ctx.console.addEntry({\n      dev: resolve(__dirname, '../client/index.ts'),\n      prod: resolve(__dirname, '../dist'),\n    })\n  }\n\n  async get(forced = false) {\n    if (this.cached && !forced) return this.cached\n    this.cached = this.ctx.$commander._commandList.filter(cmd => !cmd.parent).map(traverse)\n    return this.cached\n  }\n}\n"],
  "mappings": "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",
  "names": ["name", "config", "command"]
}
