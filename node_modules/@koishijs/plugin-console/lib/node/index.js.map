{
  "version": 3,
  "sources": ["../../src/node/index.ts"],
  "sourcesContent": ["import { Context, noop, Schema, WebSocketLayer } from 'koishi'\nimport { Console, Entry, SocketHandle } from '../shared'\nimport { ViteDevServer } from 'vite'\nimport { extname, resolve } from 'path'\nimport { createReadStream, existsSync, promises as fsp, Stats } from 'fs'\nimport open from 'open'\n\nexport * from '../shared'\n\ninterface ClientConfig {\n  devMode: boolean\n  uiPath: string\n  endpoint: string\n  static?: boolean\n}\n\nclass NodeConsole extends Console {\n  private vite: ViteDevServer\n  public root: string\n  public global = {} as ClientConfig\n  readonly layer: WebSocketLayer\n\n  constructor(public ctx: Context, public config: NodeConsole.Config) {\n    super(ctx)\n\n    const { devMode, uiPath, apiPath, selfUrl } = config\n    this.global.devMode = devMode\n    this.global.uiPath = uiPath\n    this.global.endpoint = selfUrl + apiPath\n\n    this.layer = ctx.router.ws(config.apiPath, (socket) => {\n      // eslint-disable-next-line no-new\n      new SocketHandle(ctx, socket)\n    })\n\n    this.root = config.root || config.devMode\n      ? resolve(require.resolve('@koishijs/client/package.json'), '../app')\n      : resolve(__dirname, '../../dist')\n  }\n\n  async start() {\n    if (this.config.devMode) await this.createVite()\n    this.serveAssets()\n\n    if (this.config.open && !process.env.KOISHI_AGENT) {\n      const { host, port } = this.ctx.root.config\n      open(`http://${host || 'localhost'}:${port}${this.config.uiPath}`)\n    }\n  }\n\n  resolveEntry(entry: string | string[] | Entry) {\n    if (typeof entry === 'string' || Array.isArray(entry)) return entry\n    if (!this.config.devMode) return entry.prod\n    if (!existsSync(entry.dev)) return entry.prod\n    return entry.dev\n  }\n\n  async get() {\n    const { devMode, uiPath } = this.config\n    const filenames: string[] = []\n    for (const key in this.entries) {\n      for (const local of this.entries[key]) {\n        const filename = devMode ? '/vite/@fs/' + local : uiPath + '/' + key\n        if (extname(local)) {\n          filenames.push(filename)\n        } else {\n          filenames.push(filename + '/index.js')\n          if (existsSync(local + '/style.css')) {\n            filenames.push(filename + '/style.css')\n          }\n        }\n      }\n    }\n    return filenames\n  }\n\n  private serveAssets() {\n    const { uiPath } = this.config\n\n    this.ctx.router.get(uiPath + '(/.+)*', async (ctx, next) => {\n      await next()\n      if (ctx.body || ctx.response.body) return\n\n      // add trailing slash and redirect\n      if (ctx.path === uiPath && !uiPath.endsWith('/')) {\n        return ctx.redirect(ctx.path + '/')\n      }\n      const name = ctx.path.slice(uiPath.length).replace(/^\\/+/, '')\n      const sendFile = (filename: string) => {\n        ctx.type = extname(filename)\n        return ctx.body = createReadStream(filename)\n      }\n      if (name.startsWith('extension-')) {\n        const key = name.slice(0, 18)\n        // FIXME\n        if (this.entries[key]) return sendFile(this.entries[key][0] + name.slice(18))\n      }\n      const filename = resolve(this.root, name)\n      if (!filename.startsWith(this.root) && !filename.includes('node_modules')) {\n        return ctx.status = 403\n      }\n      const stats = await fsp.stat(filename).catch<Stats>(noop)\n      if (stats?.isFile()) return sendFile(filename)\n      const ext = extname(filename)\n      if (ext && ext !== '.html') return ctx.status = 404\n      const template = await fsp.readFile(resolve(this.root, 'index.html'), 'utf8')\n      ctx.type = 'html'\n      ctx.body = await this.transformHtml(template)\n    })\n  }\n\n  private async transformHtml(template: string) {\n    const { uiPath } = this.config\n    if (this.vite) {\n      template = await this.vite.transformIndexHtml(uiPath, template)\n    } else {\n      template = template.replace(/(href|src)=\"(?=\\/)/g, (_, $1) => `${$1}=\"${uiPath}`)\n    }\n    const headInjection = `<script>KOISHI_CONFIG = ${JSON.stringify(this.ctx.console.global)}</script>`\n    return template.replace('</title>', '</title>' + headInjection)\n  }\n\n  private async createVite() {\n    const { cacheDir } = this.config\n    const { createServer } = require('vite') as typeof import('vite')\n    const { default: vue } = require('@vitejs/plugin-vue') as typeof import('@vitejs/plugin-vue')\n\n    this.vite = await createServer({\n      root: this.root,\n      base: '/vite/',\n      cacheDir: resolve(this.ctx.baseDir, cacheDir),\n      server: {\n        middlewareMode: true,\n        fs: {\n          strict: false,\n        },\n      },\n      plugins: [vue()],\n      resolve: {\n        dedupe: ['vue', 'vue-router', 'element-plus', '@vueuse/core', '@popperjs/core'],\n        alias: {\n          '../client.js': '@koishijs/client',\n          '../vue.js': 'vue',\n          '../vue-router.js': 'vue-router',\n          '../vueuse.js': '@vueuse/core',\n        },\n      },\n      optimizeDeps: {\n        include: [\n          'vue',\n          'vue-router',\n          'element-plus',\n          '@vueuse/core',\n          '@popperjs/core',\n          // insight\n          'd3-force',\n          // market\n          'semver',\n          'spark-md5',\n          // logger\n          'ansi_up',\n        ],\n      },\n      build: {\n        rollupOptions: {\n          input: this.root + '/index.html',\n        },\n      },\n    })\n\n    this.ctx.router.all('/vite(/.+)*', (ctx) => new Promise((resolve) => {\n      this.vite.middlewares(ctx.req, ctx.res, resolve)\n    }))\n\n    this.ctx.on('dispose', () => this.vite.close())\n  }\n\n  stop() {\n    this.layer.close()\n  }\n}\n\nnamespace NodeConsole {\n  export interface Config {\n    root?: string\n    uiPath?: string\n    devMode?: boolean\n    cacheDir?: string\n    open?: boolean\n    selfUrl?: string\n    apiPath?: string\n  }\n\n  export const Config: Schema<Config> = Schema.object({\n    root: Schema.string().description('前端页面的根目录。').hidden(),\n    uiPath: Schema.string().description('前端页面呈现的路径。').default(''),\n    apiPath: Schema.string().description('后端 API 服务的路径。').default('/status'),\n    selfUrl: Schema.string().description('Koishi 服务暴露在公网的地址。').role('link').default(''),\n    open: Schema.boolean().description('在应用启动后自动在浏览器中打开控制台。'),\n    devMode: Schema.boolean().description('启用调试模式（仅供开发者使用）。').default(process.env.NODE_ENV === 'development').hidden(),\n    cacheDir: Schema.string().description('调试服务器缓存目录。').default('.vite').hidden(),\n  })\n}\n\nexport default NodeConsole\n"],
  "mappings": "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",
  "names": ["open", "filename", "fsp", "resolve", "NodeConsole"]
}
