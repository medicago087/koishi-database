var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// plugins/a11y/verifier/src/index.ts
var src_exports = {};
__export(src_exports, {
  Config: () => Config,
  apply: () => apply,
  name: () => name
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");
var RequestHandler = import_koishi.Schema.union([
  import_koishi.Schema.const(void 0).description("无操作"),
  import_koishi.Schema.const(true).description("全部通过"),
  import_koishi.Schema.const(false).description("全部拒绝"),
  import_koishi.Schema.natural().description("权限等级").default(0),
  import_koishi.Schema.string().hidden(),
  import_koishi.Schema.function().hidden()
]);
async function useGeneralHandler(handler, session, prefer) {
  const result = typeof handler === "function" ? await handler(session) : handler;
  if (typeof result === "string") {
    return [prefer, result];
  } else if (typeof result === "boolean") {
    return [result];
  }
}
__name(useGeneralHandler, "useGeneralHandler");
async function checkUserAuthority(session, authority) {
  const user = await session.observeUser(["authority"]);
  if (user.authority >= authority)
    return [true];
}
__name(checkUserAuthority, "checkUserAuthority");
async function checkChannelAuthority(session, authority) {
  const channel = await session.observeChannel(["assignee"]);
  if (channel.assignee)
    return [true];
  const user = await session.observeUser(["authority"]);
  if (user.authority >= authority) {
    channel.assignee = session.selfId;
    await channel.$update();
    return [true];
  }
}
__name(checkChannelAuthority, "checkChannelAuthority");
var name = "verifier";
var Config = import_koishi.Schema.object({
  onFriendRequest: RequestHandler.description("如何响应好友请求？"),
  onGuildMemberRequest: RequestHandler.description("如何响应入群申请？"),
  onGuildRequest: RequestHandler.description("如何响应入群邀请？")
});
function apply(ctx, config = {}) {
  const { onFriendRequest, onGuildRequest, onGuildMemberRequest } = config;
  ctx.on("friend-request", async (session) => {
    const result = typeof onFriendRequest === "number" ? await checkUserAuthority(session, onFriendRequest) : await useGeneralHandler(onFriendRequest, session, true);
    if (result)
      return session.bot.handleFriendRequest(session.messageId, ...result);
  });
  ctx.on("guild-request", async (session) => {
    const result = typeof onGuildRequest === "number" ? await checkChannelAuthority(session, onGuildRequest) : await useGeneralHandler(onGuildRequest, session, false);
    if (result)
      return session.bot.handleGuildRequest(session.messageId, ...result);
  });
  ctx.on("guild-member-request", async (session) => {
    const result = typeof onGuildMemberRequest === "number" ? await checkUserAuthority(session, onGuildMemberRequest) : await useGeneralHandler(onGuildMemberRequest, session, false);
    if (result)
      return session.bot.handleGuildMemberRequest(session.messageId, ...result);
  });
}
__name(apply, "apply");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Config,
  apply,
  name
});
//# sourceMappingURL=index.js.map
