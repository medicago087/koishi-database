var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// plugins/a11y/switch/src/locales/zh.yml
var require_zh = __commonJS({
  "plugins/a11y/switch/src/locales/zh.yml"(exports, module2) {
    module2.exports = { commands: { switch: { description: "启用和禁用指令", messages: { forbidden: "您无权修改 {0} 功能。", list: "当前禁用的功能有：{0}", none: "当前没有禁用功能。" } } } };
  }
});

// plugins/a11y/switch/src/index.ts
var src_exports = {};
__export(src_exports, {
  Config: () => Config,
  apply: () => apply,
  name: () => name,
  using: () => using
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");
var import_helpers = require("@koishijs/helpers");
var name = "switch";
var using = ["database"];
var Config = import_koishi.Schema.object({});
function apply(ctx, config = {}) {
  ctx.i18n.define("zh", require_zh());
  ctx.model.extend("channel", {
    disable: "list"
  });
  ctx.before("attach-channel", (session, fields) => {
    if (!session.argv)
      return;
    fields.add("disable");
  });
  ctx.before("command/execute", ({ session, command }) => {
    const { enable = [], disable = [] } = session.channel || {};
    while (command) {
      if (command.config.disabled) {
        if (enable.includes(command.name))
          return null;
        return "";
      } else {
        if (disable.includes(command.name))
          return "";
        command = command.parent;
      }
    }
  });
  ctx.command("switch <command...>", "启用和禁用功能", { authority: 3 }).channelFields(["disable"]).userFields(["authority"]).use(import_helpers.adminChannel).action(async ({ session }, ...names) => {
    const channel = session.channel;
    if (!names.length) {
      if (!channel.disable.length)
        return session.text(".none");
      return session.text(".list", [channel.disable.join(", ")]);
    }
    names = (0, import_koishi.deduplicate)(names);
    const forbidden = names.filter((name2) => {
      const command = ctx.$commander._commands.get(name2);
      return command && command.config.authority >= session.user.authority;
    });
    if (forbidden.length)
      return session.text(".forbidden", [forbidden.join(", ")]);
    const add = (0, import_koishi.difference)(names, channel.disable);
    const remove = (0, import_koishi.intersection)(names, channel.disable);
    const preserve = (0, import_koishi.difference)(channel.disable, names);
    const output = [];
    if (add.length)
      output.push(`禁用 ${add.join(", ")} 功能`);
    if (remove.length)
      output.push(`启用 ${remove.join(", ")} 功能`);
    channel.disable = [...preserve, ...add];
    await channel.$update();
    return `已${output.join("，")}。`;
  });
}
__name(apply, "apply");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Config,
  apply,
  name,
  using
});
//# sourceMappingURL=index.js.map
