import { Bot, Context, Service, Session, Universal } from 'koishi';
export interface Message {
    id?: number;
    content: string;
    messageId: string;
    platform: string;
    guildId: string;
    userId: string;
    timestamp: Date;
    quoteId?: string;
    username: string;
    nickname: string;
    channelId: string;
    selfId: string;
    lastUpdated?: Date;
    deleted?: number;
}
declare module 'koishi' {
    interface Tables {
        message: Message;
    }
    interface Context {
        messages: MessageService;
    }
    interface Events {
        'messages/synced'(cid: string): void;
        'messages/syncFailed'(cid: string, error: Error): void;
        'messages/syncing'(cid: string): void;
    }
}
export declare class MessageService extends Service {
    #private;
    constructor(ctx: Context);
    get syncingItem(): Partial<Session<never, never>>;
    start(): Promise<void>;
    stop(): Promise<void>;
    inSyncQueue(cid: string): boolean;
    addToSyncQueue(bot: Bot, guildId: string, channelId: string): void;
    removeFromSyncQueue(cid: string): void;
    getMessages(bot: Bot, guildId: string, channelId: string): Promise<Partial<Session>[]>;
    static adaptMessage(message: Partial<Session>, bot?: Bot, guildId?: string): Message;
    getMessageBetween(bot: Bot, channelId: string, from: string, to?: string): Promise<Universal.Message[]>;
}
