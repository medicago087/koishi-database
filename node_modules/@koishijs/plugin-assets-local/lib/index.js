var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// koishi/plugins/assets/local/src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_koishi = require("koishi");
var import_fs = require("fs");
var import_path = require("path");
var import_crypto = require("crypto");
var import_file_type = require("file-type");
var LocalAssets = class extends import_koishi.Assets {
  constructor(ctx, config) {
    super(ctx);
    this.config = config;
    this._stats = {
      assetCount: 0,
      assetSize: 0
    };
    this.path = (0, import_koishi.sanitize)(config.path || "/assets");
    if (config.root) {
      this.root = (0, import_path.resolve)(ctx.app.baseDir, config.root);
    } else {
      this.root = (0, import_path.resolve)(__dirname, "../public");
    }
    if (config.selfUrl) {
      this.selfUrl = (0, import_koishi.trimSlash)(config.selfUrl);
    } else if (!(this.selfUrl = ctx.root.config.selfUrl)) {
      throw new Error(`missing configuration "selfUrl"`);
    }
    ctx.router.get(this.path, async (ctx2) => {
      return ctx2.body = await this.stats();
    });
    ctx.router.get(this.path + "/:name", async (ctx2) => {
      var _a;
      const filename = (0, import_path.resolve)(this.root, (0, import_path.basename)(ctx2.params.name));
      const stream = await (0, import_file_type.stream)((0, import_fs.createReadStream)(filename));
      ctx2.type = (_a = stream.fileType) == null ? void 0 : _a.mime;
      return ctx2.body = stream;
    });
    ctx.router.post(this.path, async (ctx2) => {
      const { salt, sign, url, file } = ctx2.query;
      if (Array.isArray(file) || Array.isArray(url)) {
        return ctx2.status = 400;
      }
      if (config.secret) {
        if (!salt || !sign)
          return ctx2.status = 400;
        const hash = (0, import_crypto.createHmac)("sha1", config.secret).update(file + salt).digest("hex");
        if (hash !== sign)
          return ctx2.status = 403;
      }
      await this.upload(url, file);
      return ctx2.status = 200;
    });
    this._promise = this.init();
  }
  start() {
  }
  stop() {
  }
  async init() {
    await import_fs.promises.mkdir(this.root, { recursive: true });
    const filenames = await import_fs.promises.readdir(this.root);
    this._stats.assetCount = filenames.length;
    await Promise.all(filenames.map(async (file) => {
      const { size } = await import_fs.promises.stat((0, import_path.resolve)(this.root, file));
      this._stats.assetSize += size;
    }));
  }
  async write(buffer, filename) {
    await import_fs.promises.writeFile(filename, buffer);
    this._stats.assetCount += 1;
    this._stats.assetSize += buffer.byteLength;
  }
  async upload(url, file) {
    if (url.startsWith(this.selfUrl))
      return url;
    await this._promise;
    const { selfUrl, path, root } = this;
    const { buffer, filename } = await this.analyze(url, file);
    const savePath = (0, import_path.resolve)(root, filename);
    await this.write(buffer, savePath);
    return `${selfUrl}${path}/${filename}`;
  }
  async stats() {
    await this._promise;
    return this._stats;
  }
};
__name(LocalAssets, "LocalAssets");
((LocalAssets2) => {
  LocalAssets2.Config = import_koishi.Schema.object({
    root: import_koishi.Schema.string().description("本地存储资源文件的绝对路径。"),
    path: import_koishi.Schema.string().default("/files").description("静态图片暴露在服务器的路径。"),
    selfUrl: import_koishi.Schema.string().role("link").description("Koishi 服务暴露在公网的地址。缺省时将使用全局配置。"),
    secret: import_koishi.Schema.string().description("用于验证上传者的密钥，配合 assets-remote 使用。").role("secret")
  });
})(LocalAssets || (LocalAssets = {}));
var src_default = LocalAssets;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
//# sourceMappingURL=index.js.map
