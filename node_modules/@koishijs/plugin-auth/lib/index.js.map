{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["import { $, Awaitable, Context, isNullable, omit, pick, Schema, Time, User } from 'koishi'\nimport { DataService, SocketHandle } from '@koishijs/plugin-console'\nimport { createHash } from 'crypto'\nimport { resolve } from 'path'\nimport { v4 } from 'uuid'\n\ndeclare module 'koishi' {\n  interface User {\n    password: string\n    token: string\n    expire: number\n  }\n}\n\ndeclare module '@koishijs/plugin-console' {\n  interface SocketHandle {\n    user?: UserAuth\n  }\n\n  namespace Console {\n    interface Services {\n      user: AuthService\n    }\n  }\n\n  interface Events {\n    'login/platform'(this: SocketHandle, platform: string, userId: string, id?: number): Awaitable<UserLogin>\n    'login/password'(this: SocketHandle, name: string, password: string): void\n    'login/token'(this: SocketHandle, id: number, token: string): void\n    'user/update'(this: SocketHandle, data: UserUpdate): void\n    'user/logout'(this: SocketHandle): void\n  }\n}\n\nexport type UserAuth = Pick<User, AuthFields>\nexport type UserLogin = Pick<User, 'id' | 'name' | 'token' | 'expire'>\nexport type UserUpdate = Partial<Pick<User, 'name' | 'password'>>\n\ntype AuthFields = typeof authFields[number]\nconst authFields = ['name', 'authority', 'id', 'expire', 'token'] as const\n\nfunction setAuthUser(handle: SocketHandle, value: UserAuth, platforms: Set<any>) {\n  if (value) {\n    value = {\n      ...omit(value, ['password', ...platforms]),\n      accounts: Object.entries(pick(value, platforms))\n        .filter(([, value]) => value)\n        .map(([platform, id]) => ({ platform, id })),\n    } as any\n  }\n  handle.user = value\n  handle.send({ type: 'data', body: { key: 'user', value } })\n  handle.refresh()\n}\n\nclass AuthService extends DataService<UserAuth> {\n  static using = ['console', 'database'] as const\n\n  constructor(ctx: Context, private config: AuthService.Config) {\n    super(ctx, 'user')\n\n    ctx.model.extend('user', {\n      password: 'string(255)',\n      token: 'string(255)',\n      expire: 'unsigned(20)',\n    })\n\n    ctx.console.addEntry({\n      dev: resolve(__dirname, '../client/index.ts'),\n      prod: resolve(__dirname, '../dist'),\n    })\n\n    this.initLogin()\n  }\n\n  async start() {\n    // check if there is an authoized user\n    const count = await this.ctx.database.select('user', {\n      authority: { $gte: 4 },\n    }).execute(_ => $.count(_.id))\n    if (count) return\n    const password = createHash('sha256').update('123456').digest('hex')\n    await this.ctx.database.create('user', { id: 0, name: 'admin', authority: 5, password })\n  }\n\n  initLogin() {\n    const { ctx, config } = this\n    const states: Record<string, [string, number, SocketHandle, number]> = {}\n\n    let platforms: Set<never> = getPlatforms()\n    function getPlatforms() {\n      return new Set(ctx.bots.filter(bot => !bot.hidden).map(bot => bot.platform as never))\n    }\n\n    ctx.on('bot-added', () => {\n      platforms = getPlatforms()\n    })\n\n    ctx.on('bot-removed', () => {\n      platforms = getPlatforms()\n    })\n\n    ctx.console.addListener('login/password', async function (name, password) {\n      const user = await ctx.database.getUser('name', name, ['password', ...platforms, ...authFields])\n      if (!user || user.password !== password) throw new Error('用户名或密码错误。')\n      if (!user.expire || user.expire < Date.now()) {\n        user.token = v4()\n        user.expire = Date.now() + config.authTokenExpire\n        await ctx.database.setUser('name', name, pick(user, ['token', 'expire']))\n      }\n      setAuthUser(this, user, platforms)\n    })\n\n    ctx.console.addListener('login/token', async function (id, token) {\n      const [user] = await ctx.database.get('user', { id }, ['name', ...platforms, ...authFields])\n      if (!user) throw new Error('用户不存在。')\n      if (user.token !== token || user.expire <= Date.now()) throw new Error('令牌已失效。')\n      setAuthUser(this, user, platforms)\n    })\n\n    ctx.console.addListener('login/platform', async function (platform, userId, id) {\n      const user = await ctx.database.getUser(platform, userId, ['id', 'name'])\n      if (!user) throw new Error('找不到此账户。')\n      if (id === user.id) throw new Error('你已经绑定了此账户。')\n\n      const key = `${platform}:${userId}`\n      const token = v4()\n      const expire = Date.now() + config.loginTokenExpire\n      states[key] = [token, expire, this, id]\n\n      const listener = () => {\n        delete states[key]\n        dispose()\n        this.socket.removeEventListener('close', dispose)\n      }\n      const dispose = ctx.setTimeout(() => {\n        if (states[key]?.[1] >= Date.now()) listener()\n      }, config.loginTokenExpire)\n      this.socket.addEventListener('close', listener)\n\n      return { id: user.id, name: user.name, token, expire }\n    })\n\n    ctx.middleware(async (session, next) => {\n      const state = states[session.uid]\n      if (!state || state[0] !== session.content.trim()) {\n        return next()\n      }\n\n      if (!isNullable(state[3])) {\n        const old = await session.observeUser()\n        await ctx.database.remove('user', { [session.platform]: session.userId })\n        await ctx.database.set('user', { id: state[3] }, {\n          [session.platform]: session.userId,\n          ...omit(old, ['id', 'name', ...authFields, ...platforms] as any),\n        })\n        const [user] = await ctx.database.get('user', { id: state[3] }, ['name', ...platforms, ...authFields])\n        return setAuthUser(state[2], user, platforms)\n      }\n\n      const user = await session.observeUser(['name', ...platforms, ...authFields])\n      if (!user.expire || user.expire < Date.now()) {\n        user.token = v4()\n        user.expire = Date.now() + config.authTokenExpire\n        await user.$update()\n      }\n      return setAuthUser(state[2], user, platforms)\n    }, true)\n\n    ctx.on('console/intercept', (handle, listener) => {\n      if (!listener.authority) return false\n      if (!handle.user) return true\n      if (handle.user.expire <= Date.now()) return true\n      return handle.user.authority < listener.authority\n    })\n\n    ctx.console.addListener('user/logout', async function () {\n      setAuthUser(this, null, platforms)\n    })\n\n    ctx.console.addListener('user/update', async function (data) {\n      if (!this.user) throw new Error('请先登录。')\n      await ctx.database.set('user', { id: this.user.id }, data)\n      Object.assign(this.user, data)\n      setAuthUser(this, this.user, platforms)\n    })\n  }\n}\n\nnamespace AuthService {\n  export interface Config {\n    authTokenExpire?: number\n    loginTokenExpire?: number\n  }\n\n  export const Config: Schema<Config> = Schema.object({\n    authTokenExpire: Schema.natural().role('ms').default(Time.week).description('用户令牌有效期。'),\n    loginTokenExpire: Schema.natural().role('ms').default(Time.minute * 10).description('登录令牌有效期。'),\n  })\n}\n\nexport default AuthService\n"],
  "mappings": "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",
  "names": ["value", "user", "AuthService"]
}
