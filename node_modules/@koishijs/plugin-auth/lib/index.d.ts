import { Awaitable, Context, Schema, User } from 'koishi';
import { DataService } from '@koishijs/plugin-console';
declare module 'koishi' {
    interface User {
        password: string;
        token: string;
        expire: number;
    }
}
declare module '@koishijs/plugin-console' {
    interface SocketHandle {
        user?: UserAuth;
    }
    namespace Console {
        interface Services {
            user: AuthService;
        }
    }
    interface Events {
        'login/platform'(this: SocketHandle, platform: string, userId: string, id?: string): Awaitable<UserLogin>;
        'login/password'(this: SocketHandle, name: string, password: string): void;
        'login/token'(this: SocketHandle, id: string, token: string): void;
        'user/update'(this: SocketHandle, data: UserUpdate): void;
        'user/logout'(this: SocketHandle): void;
    }
}
export declare type UserAuth = Pick<User, AuthFields>;
export declare type UserLogin = Pick<User, 'id' | 'name' | 'token' | 'expire'>;
export declare type UserUpdate = Partial<Pick<User, 'name' | 'password'>>;
declare type AuthFields = typeof authFields[number];
declare const authFields: readonly ["name", "authority", "id", "expire", "token"];
declare class AuthService extends DataService<UserAuth> {
    private config;
    static using: readonly ["console", "database"];
    constructor(ctx: Context, config: AuthService.Config);
    start(): Promise<void>;
    initLogin(): void;
}
declare namespace AuthService {
    interface Config {
        authTokenExpire?: number;
        loginTokenExpire?: number;
    }
    const Config: Schema<Config>;
}
export default AuthService;
