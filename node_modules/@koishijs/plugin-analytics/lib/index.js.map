{
  "version": 3,
  "sources": ["../src/index.ts", "../src/meta.ts", "../src/stats.ts"],
  "sourcesContent": ["import { Context, Schema } from 'koishi'\nimport { resolve } from 'path'\nimport {} from '@koishijs/plugin-console'\nimport MetaProvider from './meta'\nimport StatisticsProvider from './stats'\n\nexport type Activity = Record<number, number>\n\ndeclare module 'koishi' {\n  interface Channel {\n    name: string\n    activity: Activity\n  }\n}\n\ndeclare module '@koishijs/plugin-console' {\n  namespace Console {\n    interface Services {\n      meta: MetaProvider\n      stats: StatisticsProvider\n    }\n  }\n}\n\nexport {\n  MetaProvider,\n  StatisticsProvider,\n}\n\nexport * from './meta'\nexport * from './stats'\n\nexport const name = 'status'\nexport const using = ['console'] as const\n\nexport interface Config extends MetaProvider.Config, StatisticsProvider.Config {}\n\nexport const Config: Schema<Config> = Schema.intersect([\n  MetaProvider.Config,\n  StatisticsProvider.Config,\n])\n\nexport function apply(ctx: Context, config: Config) {\n  ctx.console.addEntry({\n    dev: resolve(__dirname, '../client/index.ts'),\n    prod: resolve(__dirname, '../dist'),\n  })\n\n  ctx.plugin(MetaProvider, config)\n  ctx.plugin(StatisticsProvider, config)\n}\n", "import { $, Argv, Context, noop, Schema, Time } from 'koishi'\nimport { DataService } from '@koishijs/plugin-console'\nimport type Assets from '@koishijs/assets'\n\ndeclare module 'koishi' {\n  interface User {\n    lastCall: Date\n  }\n}\n\nclass MetaProvider extends DataService<MetaProvider.Payload> {\n  timestamp = 0\n  cached: Promise<MetaProvider.Payload>\n  callbacks: MetaProvider.Extension[] = []\n\n  constructor(ctx: Context, private config: MetaProvider.Config) {\n    super(ctx, 'meta')\n\n    this.extend(async () => ctx.assets?.stats())\n\n    this.extend(async () => {\n      const activeUsers = await ctx.database?.eval('user', row => $.count(row.id), {\n        lastCall: { $gt: new Date(new Date().getTime() - Time.day) },\n      })\n      return { activeUsers }\n    })\n\n    this.extend(async () => {\n      const activeGuilds = await ctx.database?.eval('channel', row => $.count(row.id), {\n        assignee: { $ne: null },\n      })\n      return { activeGuilds }\n    })\n\n    ctx.model.extend('user', {\n      lastCall: 'timestamp',\n    })\n\n    ctx.any().before('command/execute', ({ session }: Argv<'lastCall'>) => {\n      if (!ctx.database) return\n      session.user.lastCall = new Date()\n    })\n  }\n\n  async get() {\n    const now = Date.now()\n    if (this.timestamp > now) return this.cached\n    this.timestamp = now + this.config.metaInterval\n    return this.cached = Promise\n      .all(this.callbacks.map(cb => cb().catch(noop)))\n      .then(data => Object.assign({}, ...data))\n  }\n\n  extend(callback: MetaProvider.Extension) {\n    this.timestamp = 0\n    this.callbacks.push(callback)\n  }\n}\n\nnamespace MetaProvider {\n  export interface Config {\n    metaInterval?: number\n  }\n\n  export const Config: Schema<Config> = Schema.object({\n    metaInterval: Schema.natural().role('ms').description('元数据推送的时间间隔。').default(Time.hour),\n  })\n\n  export interface Payload extends Assets.Stats {\n    activeUsers: number\n    activeGuilds: number\n    databaseSize: number\n  }\n\n  export type Extension = () => Promise<Partial<Payload>>\n}\n\nexport default MetaProvider\n", "import { $, Bot, Channel, Context, Dict, Logger, Schema, Session, Time, valueMap } from 'koishi'\nimport { DataService } from '@koishijs/plugin-console'\n\ndeclare module 'koishi' {\n  interface Session {\n    _sendType?: 'command' | 'dialogue'\n  }\n\n  interface Tables {\n    stats_daily: Record<StatisticsProvider.DailyField, Dict<number>> & { time: Date }\n    stats_hourly: Record<StatisticsProvider.HourlyField, number> & { time: Date }\n    stats_longterm: Record<StatisticsProvider.LongtermField, number> & { time: Date }\n  }\n}\n\nconst logger = new Logger('stats')\n\nexport const RECENT_LENGTH = 5\n\nexport function average(stats: {}[]) {\n  const result: Dict<number> = {}\n  stats.slice(0, RECENT_LENGTH).forEach((stat) => {\n    for (const key in stat) {\n      if (typeof stat[key] !== 'number') continue\n      result[key] = (result[key] || 0) + stat[key]\n    }\n  })\n  for (const key in result) {\n    result[key] = +(result[key] / RECENT_LENGTH).toFixed(1)\n  }\n  return result\n}\n\nexport interface GuildData {\n  name: string\n  platform: string\n  assignee: string\n  memberCount?: number\n  value: number\n  last: number\n}\n\nconst send = Session.prototype.send\nSession.prototype.send = function (this: Session, ...args) {\n  if (args[0] && this._sendType && this.app.console) {\n    this.app.console.stats.hourly[this._sendType] += 1\n  }\n  return send.apply(this, args)\n}\n\nconst customTag = Symbol('custom-send')\nSession.prototype.send[customTag] = send\n\nclass StatisticsProvider extends DataService<StatisticsProvider.Payload> {\n  static using = ['database'] as const\n\n  lastUpdate = new Date()\n  updateHour = this.lastUpdate.getHours()\n  callbacks: StatisticsProvider.Extension[] = []\n  cachedDate: number\n  cachedData: Promise<StatisticsProvider.Payload>\n  average = average\n\n  guilds: Dict<Dict<number>>\n  daily: Record<StatisticsProvider.DailyField, Dict<number>>\n  hourly: Record<StatisticsProvider.HourlyField, number>\n  longterm: Record<StatisticsProvider.LongtermField, number>\n\n  constructor(ctx: Context, private config: StatisticsProvider.Config = {}) {\n    super(ctx, 'stats')\n\n    this.clear()\n\n    ctx.model.extend('channel', {\n      name: 'string(50)',\n      activity: 'json',\n    })\n\n    ctx.model.extend('stats_daily', {\n      time: 'date',\n      ...Object.fromEntries(StatisticsProvider.dailyFields.map((key) => [key, 'json'])),\n    }, { primary: 'time' })\n\n    ctx.model.extend('stats_hourly', {\n      time: 'timestamp',\n      ...Object.fromEntries(StatisticsProvider.hourlyFields.map((key) => [key, { type: 'integer', initial: 0 }])),\n    }, { primary: 'time' })\n\n    ctx.model.extend('stats_longterm', {\n      time: 'date',\n      ...Object.fromEntries(StatisticsProvider.longtermFields.map((key) => [key, { type: 'integer', initial: 0 }])),\n    }, { primary: 'time' })\n\n    ctx.on('exit', () => this.upload(true))\n\n    ctx.on('dispose', async () => {\n      // rollback to default implementation to prevent infinite call stack\n      if (Session.prototype.send[customTag]) {\n        Session.prototype.send = Session.prototype.send[customTag]\n      }\n      await this.upload(true)\n    })\n\n    ctx.before('command/execute', ({ command, session }) => {\n      if (command.parent?.name !== 'test') {\n        const [name] = command.name.split('.', 1)\n        this.addDaily('command', name)\n        this.upload()\n      }\n      session._sendType = 'command'\n    })\n\n    const updateSendStats = async (session: Session) => {\n      this.hourly.total += 1\n      this.hourly[session.subtype] += 1\n      this.longterm.message += 1\n      this.addDaily('botSend', session.sid)\n      if (session.subtype === 'group') {\n        this.addDaily('group', session.gid)\n        const record = this.guilds[session.platform] ||= {}\n        record[session.guildId] = (record[session.guildId] || 0) + 1\n      }\n      this.upload()\n    }\n\n    ctx.on('message', (session) => {\n      this.addDaily('botReceive', session.sid)\n    })\n\n    ctx.on('before-send', (session) => {\n      updateSendStats(session)\n    })\n\n    this.extend(this.extendBasic)\n    this.extend(this.extendGuilds)\n  }\n\n  private clear() {\n    this.daily = Object.fromEntries(StatisticsProvider.dailyFields.map(i => [i, {}])) as any\n    this.hourly = Object.fromEntries(StatisticsProvider.hourlyFields.map(i => [i, 0])) as any\n    this.longterm = Object.fromEntries(StatisticsProvider.longtermFields.map(i => [i, 0])) as any\n    this.guilds = {}\n  }\n\n  addDaily(field: StatisticsProvider.DailyField, key: string | number) {\n    const stat: Record<string, number> = this.daily[field] ||= {}\n    stat[key] = (stat[key] || 0) + 1\n  }\n\n  private async _uploadDaily(date: Date) {\n    if (!Object.values(this.daily).some(data => Object.keys(data).length)) return\n    const time = new Date(date)\n    time.setHours(0, 0, 0, 0)\n    await this.ctx.database.upsert('stats_daily', row => [{\n      time,\n      ...Object.fromEntries(Object.entries(this.daily).flatMap(([type, record]) => {\n        return Object.entries(record).map(([key, value]) => {\n          return [`${type}.${key}`, $.add($.ifNull(row[type][key], 0), value)]\n        })\n      })),\n    }])\n  }\n\n  private async _uploadHourly(date: Date) {\n    if (!Object.values(this.hourly).some(value => value)) return\n    const time = new Date(date)\n    time.setMinutes(0, 0, 0)\n    await this.ctx.database.upsert('stats_hourly', row => [{\n      time,\n      ...valueMap(this.hourly, (value, key) => $.add(row[key], value)),\n    }])\n  }\n\n  private async _uploadLongterm(date: Date) {\n    if (!Object.values(this.longterm).some(value => value)) return\n    const time = new Date(date)\n    time.setHours(0, 0, 0, 0)\n    await this.ctx.database.upsert('stats_longterm', row => [{\n      time,\n      ...valueMap(this.longterm, (value, key) => $.add(row[key], value)),\n    }])\n  }\n\n  private async _uploadGuilds(date: Date) {\n    if (!Object.values(this.guilds).some(data => Object.keys(data).length)) return\n    const key = 'activity.' + Time.getDateNumber(date)\n    await this.ctx.database.upsert('channel', (row) => {\n      return Object.entries(this.guilds).flatMap(([platform, record]) => {\n        return Object.entries(record).map(([id, value]) => ({\n          id,\n          platform,\n          [key]: $.add($.ifNull(row[key], 0), value),\n        }))\n      })\n    })\n  }\n\n  async upload(forced = false) {\n    const date = new Date()\n    const dateHour = date.getHours()\n    if (forced || +date - +this.lastUpdate > this.config.statsInternal || dateHour !== this.updateHour) {\n      this.lastUpdate = date\n      this.updateHour = dateHour\n      await Promise.all([\n        this._uploadDaily(date),\n        this._uploadHourly(date),\n        this._uploadLongterm(date),\n        this._uploadGuilds(date),\n      ])\n      this.clear()\n      logger.debug('stats updated')\n    }\n  }\n\n  extend(callback: StatisticsProvider.Extension) {\n    this.callbacks.push(callback)\n  }\n\n  private extendBasic: StatisticsProvider.Extension = async (payload, data) => {\n    // history\n    payload.history = {}\n    data.longterm.forEach((stat) => {\n      payload.history[stat.time.toLocaleDateString('zh-CN')] = stat.message\n    })\n\n    // command & bot\n    payload.commands = average(data.daily.map(data => data.command))\n    payload.botSend = average(data.daily.map(stat => stat.botSend))\n    payload.botReceive = average(data.daily.map(stat => stat.botReceive))\n\n    // hours\n    payload.hours = new Array(24).fill(0).map((_, index) => {\n      return average(data.hourly.filter(s => s.time.getHours() === index))\n    })\n  }\n\n  private extendGuilds: StatisticsProvider.Extension = async (payload, data) => {\n    const groupSet = new Set<string>()\n    payload.guilds = []\n    const groupMap = Object.fromEntries(data.guilds.map(g => [`${g.platform}:${g.id}`, g]))\n    const messageMap = average(data.daily.map(data => data.group))\n    const updateList: Pick<Channel, 'id' | 'platform' | 'name'>[] = []\n\n    async function getGuildInfo(bot: Bot) {\n      const { platform } = bot\n      const guilds = await bot.getGuildList()\n      for (const { guildId, guildName: name } of guilds) {\n        const id = `${platform}:${guildId}`\n        if (!messageMap[id] || !groupMap[id] || groupSet.has(id)) continue\n        groupSet.add(id)\n        const { name: oldName, assignee } = groupMap[id]\n        if (name !== oldName) updateList.push({ platform, id: guildId, name })\n        payload.guilds.push({\n          name,\n          platform,\n          assignee,\n          value: messageMap[id],\n          last: data.daily[0].group[id] || 0,\n        })\n      }\n    }\n\n    await Promise.all(this.ctx.bots.map(async (bot) => {\n      if (bot.status !== 'online') return\n      await getGuildInfo(bot).catch(logger.warn)\n    }))\n\n    for (const key in messageMap) {\n      if (!groupSet.has(key) && groupMap[key]) {\n        const { name, assignee } = groupMap[key]\n        const [platform] = key.split(':') as [never]\n        payload.guilds.push({\n          platform,\n          name: name || key,\n          value: messageMap[key],\n          last: data.daily[0].group[key] || 0,\n          assignee: this.ctx.bots[`${platform}:${assignee}`]?.selfId || '',\n        })\n      }\n    }\n\n    await this.ctx.database.upsert('channel', updateList)\n  }\n\n  async download() {\n    const time = { $lt: new Date() }, sort = { time: 'desc' as const }\n    const [daily, hourly, longterm, guilds] = await Promise.all([\n      this.ctx.database.get('stats_daily', { time }, { sort, limit: RECENT_LENGTH }),\n      this.ctx.database.get('stats_hourly', { time }, { sort, limit: 24 * RECENT_LENGTH }),\n      this.ctx.database.get('stats_longterm', { time }, { sort }),\n      this.ctx.database.get('channel', row => $.eq(row.id, row.guildId), ['platform', 'id', 'name', 'assignee']),\n    ])\n    const data = { daily, hourly, longterm, guilds }\n    const payload = {} as StatisticsProvider.Payload\n    await Promise.all(this.callbacks.map(cb => cb(payload, data)))\n    return payload\n  }\n\n  async get() {\n    const date = new Date()\n    const dateNumber = Time.getDateNumber(date, date.getTimezoneOffset())\n    if (dateNumber !== this.cachedDate) {\n      this.cachedData = this.download()\n      this.cachedDate = dateNumber\n    }\n    return this.cachedData\n  }\n}\n\nnamespace StatisticsProvider {\n  export type DailyField = typeof dailyFields[number]\n  export const dailyFields = [\n    'command', 'dialogue', 'botSend', 'botReceive', 'group',\n  ] as const\n\n  export type HourlyField = typeof hourlyFields[number]\n  export const hourlyFields = [\n    'total', 'group', 'private', 'command', 'dialogue',\n  ] as const\n\n  export type LongtermField = typeof longtermFields[number]\n  export const longtermFields = [\n    'message',\n  ] as const\n\n  export interface Data {\n    extension?: StatisticsProvider.Payload\n    guilds: Pick<Channel, 'id' | 'platform' | 'name' | 'assignee'>[]\n    daily: Record<DailyField, Dict<number>>[]\n    hourly: ({ time: Date } & Record<HourlyField, number>)[]\n    longterm: ({ time: Date } & Record<LongtermField, number>)[]\n  }\n\n  export interface Payload {\n    history: Dict<number>\n    commands: Dict<number>\n    hours: Dict<number>[]\n    guilds: GuildData[]\n    botSend: Dict<number>\n    botReceive: Dict<number>\n  }\n\n  export interface Config {\n    statsInternal?: number\n  }\n\n  export const Config: Schema<Config> = Schema.object({\n    statsInternal: Schema.natural().role('ms').description('统计数据推送的时间间隔。').default(Time.minute * 10),\n  })\n\n  export type Extension = (payload: Payload, data: StatisticsProvider.Data) => Promise<void>\n}\n\nexport default StatisticsProvider\n"],
  "mappings": "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",
  "names": ["import_koishi", "MetaProvider", "import_koishi", "import_plugin_console", "data", "name", "StatisticsProvider"]
}
